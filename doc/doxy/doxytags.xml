<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AddressingInterface.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_addressing_interface_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
    <class kind="class">veins::AddressingInterface</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>AnalogueModel.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_analogue_model_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_antenna_position_8h" name="AntennaPosition.h" local="yes" imported="no">veins/base/utils/AntennaPosition.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_has_log_proxy_8h" name="HasLogProxy.h" local="yes" imported="no">veins/modules/utility/HasLogProxy.h</includes>
    <class kind="class">veins::AnalogueModel</class>
    <namespace>veins</namespace>
    <member kind="typedef">
      <type>std::vector&lt; std::unique_ptr&lt; AnalogueModel &gt; &gt;</type>
      <name>AnalogueModelList</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a964364ce7398400296a90e748346ac78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnnotationDummy.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/world/annotations/</path>
    <filename>_annotation_dummy_8cc</filename>
    <includes id="_annotation_dummy_8h" name="AnnotationDummy.h" local="yes" imported="no">veins/modules/world/annotations/AnnotationDummy.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_annotation_dummy_8cc.html</anchorfile>
      <anchor>a32ce197402bca7ce83cb8d7a048c2fbe</anchor>
      <arglist>(veins::AnnotationDummy)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnnotationDummy.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/world/annotations/</path>
    <filename>_annotation_dummy_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::AnnotationDummy</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>AnnotationManager.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/world/annotations/</path>
    <filename>_annotation_manager_8cc</filename>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">veins/modules/world/annotations/AnnotationManager.h</includes>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <namespace>anonymous_namespace{AnnotationManager.cc}</namespace>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_annotation_manager_8cc.html</anchorfile>
      <anchor>a0558ef8f0a3b7c068740864ba53ce7f3</anchor>
      <arglist>(veins::AnnotationManager)</arglist>
    </member>
    <member kind="variable">
      <type>const short</type>
      <name>EVT_SCHEDULED_ERASE</name>
      <anchorfile>namespaceanonymous__namespace_02_annotation_manager_8cc_03.html</anchorfile>
      <anchor>aad339c1ed9a3ef9a85238e16e2b920ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnnotationManager.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/world/annotations/</path>
    <filename>_annotation_manager_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">veins::AnnotationManager</class>
    <class kind="class">veins::AnnotationManager::Annotation</class>
    <class kind="class">veins::AnnotationManager::Point</class>
    <class kind="class">veins::AnnotationManager::Line</class>
    <class kind="class">veins::AnnotationManager::Polygon</class>
    <class kind="class">veins::AnnotationManager::Group</class>
    <class kind="class">veins::AnnotationManagerAccess</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>Antenna.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_antenna_8cc</filename>
    <includes id="_antenna_8h" name="Antenna.h" local="yes" imported="no">veins/base/phyLayer/Antenna.h</includes>
  </compound>
  <compound kind="file">
    <name>Antenna.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_antenna_8h</filename>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">veins::Antenna</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>AntennaPosition.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_antenna_position_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">veins::AntennaPosition</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BaseApplLayer.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_appl_layer_8cc</filename>
    <includes id="_base_appl_layer_8h" name="BaseApplLayer.h" local="yes" imported="no">veins/base/modules/BaseApplLayer.h</includes>
    <includes id="_passed_message_8h" name="PassedMessage.h" local="yes" imported="no">veins/base/utils/PassedMessage.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseApplLayer.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_appl_layer_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_base_layer_8h" name="BaseLayer.h" local="yes" imported="no">veins/base/modules/BaseLayer.h</includes>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
    <class kind="class">veins::BaseApplLayer</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BaseBattery.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_battery_8cc</filename>
    <includes id="_base_battery_8h" name="BaseBattery.h" local="yes" imported="no">veins/base/modules/BaseBattery.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseBattery.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_battery_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_base_module_8h" name="BaseModule.h" local="yes" imported="no">veins/base/modules/BaseModule.h</includes>
    <includes id="_host_state_8h" name="HostState.h" local="yes" imported="no">veins/base/utils/HostState.h</includes>
    <class kind="class">veins::DrawAmount</class>
    <class kind="class">veins::BaseBattery</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BaseConnectionManager.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/connectionManager/</path>
    <filename>_base_connection_manager_8cc</filename>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <includes id="_nic_entry_debug_8h" name="NicEntryDebug.h" local="yes" imported="no">veins/base/connectionManager/NicEntryDebug.h</includes>
    <includes id="_nic_entry_direct_8h" name="NicEntryDirect.h" local="yes" imported="no">veins/base/connectionManager/NicEntryDirect.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <namespace>anonymous_namespace{BaseConnectionManager.cc}</namespace>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dist</name>
      <anchorfile>namespaceanonymous__namespace_02_base_connection_manager_8cc_03.html</anchorfile>
      <anchor>a03d2870486bee7d8198d066f67d00e04</anchor>
      <arglist>(double coord1, double coord2, double size)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrTorusDist</name>
      <anchorfile>namespaceanonymous__namespace_02_base_connection_manager_8cc_03.html</anchorfile>
      <anchor>a4c7285eb31fa2914adffc7da4255b6d2</anchor>
      <arglist>(Coord c, Coord b, Coord size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseConnectionManager.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/connectionManager/</path>
    <filename>_base_connection_manager_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_antenna_position_8h" name="AntennaPosition.h" local="yes" imported="no">veins/base/utils/AntennaPosition.h</includes>
    <includes id="_nic_entry_8h" name="NicEntry.h" local="yes" imported="no">veins/base/connectionManager/NicEntry.h</includes>
    <includes id="_heading_8h" name="Heading.h" local="yes" imported="no">veins/base/utils/Heading.h</includes>
    <class kind="class">veins::BaseConnectionManager</class>
    <class kind="class">veins::BaseConnectionManager::GridCoord</class>
    <class kind="class">veins::BaseConnectionManager::CoordSet</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BaseDecider.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_base_decider_8cc</filename>
    <includes id="_base_decider_8h" name="BaseDecider.h" local="yes" imported="no">veins/base/phyLayer/BaseDecider.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseDecider.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_base_decider_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_decider_8h" name="Decider.h" local="yes" imported="no">veins/base/phyLayer/Decider.h</includes>
    <class kind="class">veins::BaseDecider</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BaseLayer.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_layer_8cc</filename>
    <includes id="_base_layer_8h" name="BaseLayer.h" local="yes" imported="no">veins/base/modules/BaseLayer.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseLayer.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_layer_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_battery_access_8h" name="BatteryAccess.h" local="yes" imported="no">veins/base/modules/BatteryAccess.h</includes>
    <includes id="_passed_message_8h" name="PassedMessage.h" local="yes" imported="no">veins/base/utils/PassedMessage.h</includes>
    <class kind="class">veins::BaseLayer</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BaseMacLayer.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_mac_layer_8cc</filename>
    <includes id="_base_mac_layer_8h" name="BaseMacLayer.h" local="yes" imported="no">veins/base/modules/BaseMacLayer.h</includes>
    <includes id="_mac_to_phy_interface_8h" name="MacToPhyInterface.h" local="yes" imported="no">veins/base/phyLayer/MacToPhyInterface.h</includes>
    <includes id="_mac_to_netw_control_info_8h" name="MacToNetwControlInfo.h" local="yes" imported="no">veins/base/utils/MacToNetwControlInfo.h</includes>
    <includes id="_netw_to_mac_control_info_8h" name="NetwToMacControlInfo.h" local="yes" imported="no">veins/base/utils/NetwToMacControlInfo.h</includes>
    <includes id="_addressing_interface_8h" name="AddressingInterface.h" local="yes" imported="no">veins/base/modules/AddressingInterface.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_base_mac_layer_8cc.html</anchorfile>
      <anchor>a614d4696daefcc9b248f8fcbbda4c2af</anchor>
      <arglist>(veins::BaseMacLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseMacLayer.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_mac_layer_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_base_layer_8h" name="BaseLayer.h" local="yes" imported="no">veins/base/modules/BaseLayer.h</includes>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
    <class kind="class">veins::BaseMacLayer</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BaseMobility.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_mobility_8cc</filename>
    <includes id="_base_mobility_8h" name="BaseMobility.h" local="yes" imported="no">veins/base/modules/BaseMobility.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <namespace>anonymous_namespace{BaseMobility.cc}</namespace>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_base_mobility_8cc.html</anchorfile>
      <anchor>a2a73ef0b224357dc768485114e5691ef</anchor>
      <arglist>(veins::BaseMobility)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInBoundary</name>
      <anchorfile>namespaceanonymous__namespace_02_base_mobility_8cc_03.html</anchorfile>
      <anchor>a63cc37de263c8dbba9a763b23359862d</anchor>
      <arglist>(Coord c, Coord lowerBound, Coord upperBound)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseMobility.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_mobility_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_battery_access_8h" name="BatteryAccess.h" local="yes" imported="no">veins/base/modules/BatteryAccess.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_move_8h" name="Move.h" local="yes" imported="no">veins/base/utils/Move.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <class kind="class">veins::BaseMobility</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BaseModule.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_module_8cc</filename>
    <includes id="_base_module_8h" name="BaseModule.h" local="yes" imported="no">veins/base/modules/BaseModule.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseModule.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_module_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_host_state_8h" name="HostState.h" local="yes" imported="no">veins/base/utils/HostState.h</includes>
    <class kind="class">veins::BaseModule</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BasePhyLayer.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_base_phy_layer_8cc</filename>
    <includes id="_base_phy_layer_8h" name="BasePhyLayer.h" local="yes" imported="no">veins/base/phyLayer/BasePhyLayer.h</includes>
    <includes id="_phy_to_mac_control_info_8h" name="PhyToMacControlInfo.h" local="yes" imported="no">veins/base/phyLayer/PhyToMacControlInfo.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="_p_o_a_8h" name="POA.h" local="yes" imported="no">veins/base/utils/POA.h</includes>
    <includes id="_sampled_antenna1_d_8h" name="SampledAntenna1D.h" local="yes" imported="no">veins/modules/phy/SampledAntenna1D.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <includes id="_decider_8h" name="Decider.h" local="yes" imported="no">veins/base/phyLayer/Decider.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_base_phy_layer_8cc.html</anchorfile>
      <anchor>a67012e4caeb7d4741015342e7949279d</anchor>
      <arglist>(veins::BasePhyLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasePhyLayer.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_base_phy_layer_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <includes id="_decider_to_phy_interface_8h" name="DeciderToPhyInterface.h" local="yes" imported="no">veins/base/phyLayer/DeciderToPhyInterface.h</includes>
    <includes id="_mac_to_phy_interface_8h" name="MacToPhyInterface.h" local="yes" imported="no">veins/base/phyLayer/MacToPhyInterface.h</includes>
    <includes id="_antenna_8h" name="Antenna.h" local="yes" imported="no">veins/base/phyLayer/Antenna.h</includes>
    <includes id="_channel_info_8h" name="ChannelInfo.h" local="yes" imported="no">veins/base/phyLayer/ChannelInfo.h</includes>
    <class kind="class">veins::BasePhyLayer</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BaseWorldUtility.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_world_utility_8cc</filename>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_base_world_utility_8cc.html</anchorfile>
      <anchor>a38386c7268ee3663d45cd91cff943cc4</anchor>
      <arglist>(veins::BaseWorldUtility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseWorldUtility.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_base_world_utility_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">veins::BaseWorldUtility</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BatteryAccess.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_battery_access_8cc</filename>
    <includes id="_battery_access_8h" name="BatteryAccess.h" local="yes" imported="no">veins/base/modules/BatteryAccess.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
  </compound>
  <compound kind="file">
    <name>BatteryAccess.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/modules/</path>
    <filename>_battery_access_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_base_module_8h" name="BaseModule.h" local="yes" imported="no">veins/base/modules/BaseModule.h</includes>
    <includes id="_base_battery_8h" name="BaseBattery.h" local="yes" imported="no">veins/base/modules/BaseBattery.h</includes>
    <class kind="class">veins::BatteryAccess</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BBoxLookup.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/utility/</path>
    <filename>_b_box_lookup_8cc</filename>
    <includes id="_b_box_lookup_8h" name="BBoxLookup.h" local="yes" imported="no">veins/modules/utility/BBoxLookup.h</includes>
    <class kind="struct">anonymous_namespace{BBoxLookup.cc}::Ray</class>
    <namespace>anonymous_namespace{BBoxLookup.cc}</namespace>
    <namespace>veins</namespace>
    <member kind="typedef">
      <type>veins::BBoxLookup::Point</type>
      <name>Point</name>
      <anchorfile>namespaceanonymous__namespace_02_b_box_lookup_8cc_03.html</anchorfile>
      <anchor>ab44832c5578a22ebf7b2a19694405cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>veins::BBoxLookup::Box</type>
      <name>Box</name>
      <anchorfile>namespaceanonymous__namespace_02_b_box_lookup_8cc_03.html</anchorfile>
      <anchor>a7fdc32ad591b5c3137e1208ee806f466</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Ray</type>
      <name>makeRay</name>
      <anchorfile>namespaceanonymous__namespace_02_b_box_lookup_8cc_03.html</anchorfile>
      <anchor>a511746fffff7fb590b4d01d923189b03</anchor>
      <arglist>(const Point &amp;sender, const Point &amp;receiver)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>namespaceanonymous__namespace_02_b_box_lookup_8cc_03.html</anchorfile>
      <anchor>ad29edbecc2bba7cf9afb525f0aff0f25</anchor>
      <arglist>(const Ray &amp;ray, const Box &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BBoxLookup.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/utility/</path>
    <filename>_b_box_lookup_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::BBoxLookup</class>
    <class kind="struct">veins::BBoxLookup::Point</class>
    <class kind="struct">veins::BBoxLookup::Box</class>
    <class kind="struct">veins::BBoxLookup::BBoxCell</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>BreakpointPathlossModel.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_breakpoint_pathloss_model_8cc</filename>
    <includes id="_breakpoint_pathloss_model_8h" name="BreakpointPathlossModel.h" local="yes" imported="no">veins/modules/analogueModel/BreakpointPathlossModel.h</includes>
  </compound>
  <compound kind="file">
    <name>BreakpointPathlossModel.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_breakpoint_pathloss_model_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <class kind="class">veins::BreakpointPathlossModel</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>ChannelAccess.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/connectionManager/</path>
    <filename>_channel_access_8cc</filename>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
  </compound>
  <compound kind="file">
    <name>ChannelAccess.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/connectionManager/</path>
    <filename>_channel_access_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_antenna_position_8h" name="AntennaPosition.h" local="yes" imported="no">veins/base/utils/AntennaPosition.h</includes>
    <includes id="_battery_access_8h" name="BatteryAccess.h" local="yes" imported="no">veins/base/modules/BatteryAccess.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="_base_mobility_8h" name="BaseMobility.h" local="yes" imported="no">veins/base/modules/BaseMobility.h</includes>
    <includes id="_heading_8h" name="Heading.h" local="yes" imported="no">veins/base/utils/Heading.h</includes>
    <class kind="class">veins::ChannelAccess</class>
    <namespace>veins</namespace>
    <member kind="typedef">
      <type>AccessModuleWrap&lt; BaseMobility &gt;</type>
      <name>ChannelMobilityAccessType</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa8c17c8b65bcd5ce004cdfc957cf2d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ChannelMobilityAccessType::wrapType *</type>
      <name>ChannelMobilityPtrType</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aab6dc29dc16d0393e914dc30ddbbb5a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelInfo.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_channel_info_8cc</filename>
    <includes id="_channel_info_8h" name="ChannelInfo.h" local="yes" imported="no">veins/base/phyLayer/ChannelInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>ChannelInfo.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_channel_info_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::ChannelInfo</class>
    <class kind="class">veins::ChannelInfo::BaseIntersectionIterator</class>
    <class kind="class">veins::ChannelInfo::IntersectionIterator</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionManager.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/connectionManager/</path>
    <filename>_connection_manager_8cc</filename>
    <includes id="_connection_manager_8h" name="ConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/ConnectionManager.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_connection_manager_8cc.html</anchorfile>
      <anchor>a1540359c440bdd1cfd9c97b2af4f9560</anchor>
      <arglist>(veins::ConnectionManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectionManager.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/connectionManager/</path>
    <filename>_connection_manager_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <class kind="class">veins::ConnectionManager</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>Consts80211p.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/utility/</path>
    <filename>_consts80211p_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_consts_phy_8h" name="ConstsPhy.h" local="yes" imported="no">veins/modules/utility/ConstsPhy.h</includes>
    <namespace>veins</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Channel</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a241b63592930794cb29608c80e737b1c</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1cab7c11fd60722f49eacf6edfe440abe8a">crit_sol</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1cabe2b832062b96b611d69ca99cb257938">sch1</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1ca60531a06d9e5763e9a0f98da418f4009">sch2</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1ca64f5e67ed2b90b1bb9084c7e755bbd7b">cch</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1cab66e16a1079dc327d9771f9c94430dc4">sch3</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1caadbb78a568f709399bf51b5b56524ef6">sch4</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1ca7a8caced55cdc0ec9e96cd0af2a9ae17">hpps</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ChannelType</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a04ab2e3513c72a990fe9f96ae42d9e9a</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceveins.html" anchor="a04ab2e3513c72a990fe9f96ae42d9e9aafc5364bf9dbfa34954526becad136d4b">control</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a04ab2e3513c72a990fe9f96ae42d9e9aaaaabf0d39951f3e6c3e8a7911df524c2">service</enumvalue>
    </member>
    <member kind="variable">
      <type>const uint64_t</type>
      <name>NUM_BITRATES_80211P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a891bdb709cc16d87998853bcee0cec3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64_t</type>
      <name>BITRATES_80211P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aaac445f2f574322887547cad4ec737c1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>N_DBPS_80211P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa2a238b855fa8d5aa97fdd8c2827d184</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>T_SYM_80211P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a86b5c305096431684a4583731c5ec96e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HDR_SERVICE_LENGTH</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ac46b6433ddbb13ec7e54e2dc6532bac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_TAIL_LENGTH</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a7db46f88d57cb2e65114df4ae3180648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PHY_HDR_PREAMBLE_DURATION</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a38ddacfad66b1cac4c9db643da8ec782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PHY_HDR_PLCPSIGNAL_DURATION</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a5070037c3985567bcda6a6a76f1d90c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HDR_PLCPSIGNAL_LENGTH</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>add3c22000991a0233c797a05382ea15f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64_t</type>
      <name>PHY_HDR_BITRATE</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a15dfb8b4e82c5039656158486b5f8aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>SLOTLENGTH_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a087b3a7363b908a1b56441d38ecd5d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>SIFS_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aaed093038c32269e153a1aece3ddd298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>RADIODELAY_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a15ffd08551ff488691e5af663f31c278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>CWMIN_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa96c2c22b02761022917168562433bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>CWMAX_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a2b8d2c8d761f95f373b9134214d630a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>SWITCHING_INTERVAL_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a7bbd290f309e944c0dea15aa0bc9aeb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>GUARD_INTERVAL_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a6c7096da6df660d80aa94bbf3b238ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Bandwidth</type>
      <name>BANDWIDTH_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aff301ed290e2541f8be9ff668c04a321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::map&lt; Channel, double &gt;</type>
      <name>IEEE80211ChannelFrequencies</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a331eb6e8b805e13285fd08b8ed1164d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstsPhy.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/utility/</path>
    <filename>_consts_phy_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <namespace>veins</namespace>
    <member kind="enumeration">
      <type></type>
      <name>MCS</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a0f6515c4d41d47795a037fd662d6b317</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317a5e543256c480ac577d30f76f9120eb74">undefined</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317a91739f1f7ee1f870d3288d72255833e1">ofdm_bpsk_r_1_2</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317a0a709e5c381aaca2ecff5ecb1baf7b08">ofdm_bpsk_r_3_4</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317ae8dd44a070977ab68651bd49afdd7aeb">ofdm_qpsk_r_1_2</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317a5f9d64ab4822c900ee71e08140f2e0d8">ofdm_qpsk_r_3_4</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317a59b5c09e00c8579440accd91f27003a7">ofdm_qam16_r_1_2</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317aaf66c500a925bbbdb1d69f8953a67a5a">ofdm_qam16_r_3_4</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317abad975a6a211a4f29e592091d4ef6f07">ofdm_qam64_r_2_3</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317abf6ab9dd51d59ae94ee0626ebdff6d97">ofdm_qam64_r_3_4</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Bandwidth</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a5f8caa3707df632bbf563c8c30e1314b</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceveins.html" anchor="a5f8caa3707df632bbf563c8c30e1314ba03a13d1e6d29b1512625fc7474f726f2">ofdm_5_mhz</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a5f8caa3707df632bbf563c8c30e1314ba41ca49365a43716b4878539e9f3517e9">ofdm_10_mhz</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a5f8caa3707df632bbf563c8c30e1314baad77370707687075dfe34be031a10fd6">ofdm_20_mhz</enumvalue>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getOfdmDatarate</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aac9251bf5836e3baa0adc984b3b4c783</anchor>
      <arglist>(MCS mcs, Bandwidth bw)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getNDBPS</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>acec18387f16de0bbed065607cb14f06a</anchor>
      <arglist>(MCS mcs)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getBandwidth</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa3595ed01bd33cecc0340d59c09e1ddd</anchor>
      <arglist>(Bandwidth bw)</arglist>
    </member>
    <member kind="function">
      <type>MCS</type>
      <name>getMCS</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a577339f223a802a547b44f9c27e0be8e</anchor>
      <arglist>(uint64_t datarate, Bandwidth bw)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Coord.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_coord_8cc</filename>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <namespace>anonymous_namespace{Coord.cc}</namespace>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dist</name>
      <anchorfile>namespaceanonymous__namespace_02_coord_8cc_03.html</anchorfile>
      <anchor>a8c0f9656a5c33ea4cd7240eb430fc1d6</anchor>
      <arglist>(double coord1, double coord2, double size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Coord.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_coord_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">veins/base/utils/FWMath.h</includes>
    <class kind="class">veins::Coord</class>
    <namespace>veins</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a0507aeea0384286a65df2962a103cfe9</anchor>
      <arglist>(std::ostream &amp;os, const Coord &amp;coord)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Decider.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_decider_8cc</filename>
    <includes id="_decider_8h" name="Decider.h" local="yes" imported="no">veins/base/phyLayer/Decider.h</includes>
  </compound>
  <compound kind="file">
    <name>Decider.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_decider_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_decider_to_phy_interface_8h" name="DeciderToPhyInterface.h" local="yes" imported="no">veins/base/phyLayer/DeciderToPhyInterface.h</includes>
    <includes id="_has_log_proxy_8h" name="HasLogProxy.h" local="yes" imported="no">veins/modules/utility/HasLogProxy.h</includes>
    <class kind="class">veins::DeciderResult</class>
    <class kind="class">veins::Decider</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>Decider80211p.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/phy/</path>
    <filename>_decider80211p_8cc</filename>
    <includes id="_decider80211p_8h" name="Decider80211p.h" local="yes" imported="no">veins/modules/phy/Decider80211p.h</includes>
    <includes id="_decider_result80211_8h" name="DeciderResult80211.h" local="yes" imported="no">veins/modules/phy/DeciderResult80211.h</includes>
    <includes id="_signal_8h" name="Signal.h" local="yes" imported="no">veins/base/toolbox/Signal.h</includes>
    <includes id="_nist_error_rate_8h" name="NistErrorRate.h" local="yes" imported="no">veins/modules/phy/NistErrorRate.h</includes>
    <includes id="_consts_phy_8h" name="ConstsPhy.h" local="yes" imported="no">veins/modules/utility/ConstsPhy.h</includes>
    <includes id="_signal_utils_8h" name="SignalUtils.h" local="yes" imported="no">veins/base/toolbox/SignalUtils.h</includes>
  </compound>
  <compound kind="file">
    <name>Decider80211p.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/phy/</path>
    <filename>_decider80211p_8h</filename>
    <includes id="_base_decider_8h" name="BaseDecider.h" local="yes" imported="no">veins/base/phyLayer/BaseDecider.h</includes>
    <includes id="_consts80211p_8h" name="Consts80211p.h" local="yes" imported="no">veins/modules/utility/Consts80211p.h</includes>
    <includes id="_mac80211p_to_phy11p_interface_8h" name="Mac80211pToPhy11pInterface.h" local="yes" imported="no">veins/modules/mac/ieee80211p/Mac80211pToPhy11pInterface.h</includes>
    <includes id="_decider80211p_to_phy80211p_interface_8h" name="Decider80211pToPhy80211pInterface.h" local="yes" imported="no">veins/modules/phy/Decider80211pToPhy80211pInterface.h</includes>
    <class kind="class">veins::Decider80211p</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>Decider80211pToPhy80211pInterface.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/phy/</path>
    <filename>_decider80211p_to_phy80211p_interface_8h</filename>
    <class kind="class">veins::Decider80211pToPhy80211pInterface</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>DeciderResult80211.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/phy/</path>
    <filename>_decider_result80211_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_decider_8h" name="Decider.h" local="yes" imported="no">veins/base/phyLayer/Decider.h</includes>
    <class kind="class">veins::DeciderResult80211</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>DeciderToPhyInterface.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_decider_to_phy_interface_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::DeciderToPhyInterface</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>DemoBaseApplLayer.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/application/ieee80211p/</path>
    <filename>_demo_base_appl_layer_8cc</filename>
    <includes id="_demo_base_appl_layer_8h" name="DemoBaseApplLayer.h" local="yes" imported="no">veins/modules/application/ieee80211p/DemoBaseApplLayer.h</includes>
  </compound>
  <compound kind="file">
    <name>DemoBaseApplLayer.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/application/ieee80211p/</path>
    <filename>_demo_base_appl_layer_8h</filename>
    <includes id="_base_appl_layer_8h" name="BaseApplLayer.h" local="yes" imported="no">veins/base/modules/BaseApplLayer.h</includes>
    <includes id="_consts80211p_8h" name="Consts80211p.h" local="yes" imported="no">veins/modules/utility/Consts80211p.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <includes id="_demo_base_appl_layer_to_mac1609__4_interface_8h" name="DemoBaseApplLayerToMac1609_4Interface.h" local="yes" imported="no">veins/modules/mac/ieee80211p/DemoBaseApplLayerToMac1609_4Interface.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIMobility.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <class kind="class">veins::DemoBaseApplLayer</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>DemoBaseApplLayerToMac1609_4Interface.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mac/ieee80211p/</path>
    <filename>_demo_base_appl_layer_to_mac1609__4_interface_8h</filename>
    <includes id="_netw_to_mac_control_info_8h" name="NetwToMacControlInfo.h" local="yes" imported="no">veins/base/utils/NetwToMacControlInfo.h</includes>
    <includes id="_consts80211p_8h" name="Consts80211p.h" local="yes" imported="no">veins/modules/utility/Consts80211p.h</includes>
    <class kind="class">veins::DemoBaseApplLayerToMac1609_4Interface</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>EnumBitset.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_enum_bitset_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::EnumBitset</class>
    <namespace>veins</namespace>
    <member kind="function">
      <type>EnumBitset&lt; T &gt;</type>
      <name>operator|</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a5251a4eef8dcd90ca81fd5b2625efd03</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="variable">
      <type>struct VEINS_API</type>
      <name>EnumTraits</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ade9045b9fa02a0e95c3fd874a96136cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FindModule.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_find_module_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::FindModule</class>
    <class kind="class">veins::AccessModuleWrap</class>
    <namespace>veins</namespace>
    <member kind="function">
      <type>std::vector&lt; T * &gt;</type>
      <name>getSubmodulesOfType</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>adf0e051fbdc2b88943cc638233f294ed</anchor>
      <arglist>(cModule *parentModule, bool recurse=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FWMath.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_f_w_math_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::FWMath</class>
    <namespace>veins</namespace>
    <namespace>veins::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>M_E</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a9bf5d952c5c93c70f9e66c9794d406c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_LOG2E</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>ac5c747ee5bcbe892875672a0b9d8171c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_LOG10E</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a9ed2b5582226f3896424ff6d2a3ebb14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_LN2</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a92428112a5d24721208748774a4f23e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_LN10</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a0a53871497a155afe91424c28a8ec3c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>ae71449b1cc6e6250b91f539153a7a0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_PI_2</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a958e4508ed28ee5cc04249144312c15f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_PI_4</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>aeb24420b096a677f3a2dc5a72b36bf22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_1_PI</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a08dfac3cca9601a02fc88356cc078e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_2_PI</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a97f6d6514d3d3dd50c3a2a6d622673db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_2_SQRTPI</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a631ff334c4a1a6db2e8a7ff4acbe48a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_SQRT2</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a66b3ab30f1332874326ed93969e496e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_SQRT1_2</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>acdbb2c2f9429f08916f03c8786d2d2d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPSILON</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a002b2f4894492820fe708b1b7e7c5e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, bool &gt;::type</type>
      <name>almost_equal</name>
      <anchorfile>namespaceveins_1_1math.html</anchorfile>
      <anchor>a8e7bde81401ddc00bf062333bf217491</anchor>
      <arglist>(T x, T y, int ulp=1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HasLogProxy.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/utility/</path>
    <filename>_has_log_proxy_8cc</filename>
    <includes id="_has_log_proxy_8h" name="HasLogProxy.h" local="yes" imported="no">veins/modules/utility/HasLogProxy.h</includes>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>HasLogProxy.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/utility/</path>
    <filename>_has_log_proxy_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::HasLogProxy</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>Heading.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_heading_8cc</filename>
    <includes id="_heading_8h" name="Heading.h" local="yes" imported="no">veins/base/utils/Heading.h</includes>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>Heading.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_heading_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">veins::Heading</class>
    <namespace>veins</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a1050fafc7711c48b53398e360ee1d269</anchor>
      <arglist>(std::ostream &amp;os, const Heading &amp;o)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HostState.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_host_state_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::HostState</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>LinearMobility.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/</path>
    <filename>_linear_mobility_8cc</filename>
    <includes id="_linear_mobility_8h" name="LinearMobility.h" local="yes" imported="no">veins/modules/mobility/LinearMobility.h</includes>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_linear_mobility_8cc.html</anchorfile>
      <anchor>a7a493518882c93e591765aa9cc3af2dd</anchor>
      <arglist>(veins::LinearMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinearMobility.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/</path>
    <filename>_linear_mobility_8h</filename>
    <includes id="_base_mobility_8h" name="BaseMobility.h" local="yes" imported="no">veins/base/modules/BaseMobility.h</includes>
    <class kind="class">veins::LinearMobility</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>Mac1609_4.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mac/ieee80211p/</path>
    <filename>_mac1609__4_8cc</filename>
    <includes id="_mac1609__4_8h" name="Mac1609_4.h" local="yes" imported="no">veins/modules/mac/ieee80211p/Mac1609_4.h</includes>
    <includes id="_decider_result80211_8h" name="DeciderResult80211.h" local="yes" imported="no">veins/modules/phy/DeciderResult80211.h</includes>
    <includes id="_phy_to_mac_control_info_8h" name="PhyToMacControlInfo.h" local="yes" imported="no">veins/base/phyLayer/PhyToMacControlInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_mac1609__4_8cc.html</anchorfile>
      <anchor>a9d918cc5f197f1c7f600c130dd398cae</anchor>
      <arglist>(veins::Mac1609_4)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mac1609_4.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mac/ieee80211p/</path>
    <filename>_mac1609__4_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_base_layer_8h" name="BaseLayer.h" local="yes" imported="no">veins/base/modules/BaseLayer.h</includes>
    <includes id="_phy_layer80211p_8h" name="PhyLayer80211p.h" local="yes" imported="no">veins/modules/phy/PhyLayer80211p.h</includes>
    <includes id="_demo_base_appl_layer_to_mac1609__4_interface_8h" name="DemoBaseApplLayerToMac1609_4Interface.h" local="yes" imported="no">veins/modules/mac/ieee80211p/DemoBaseApplLayerToMac1609_4Interface.h</includes>
    <includes id="_consts80211p_8h" name="Consts80211p.h" local="yes" imported="no">veins/modules/utility/Consts80211p.h</includes>
    <includes id="_mac_to_phy_control_info11p_8h" name="MacToPhyControlInfo11p.h" local="yes" imported="no">veins/modules/utility/MacToPhyControlInfo11p.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="_base_mac_layer_8h" name="BaseMacLayer.h" local="yes" imported="no">veins/base/modules/BaseMacLayer.h</includes>
    <includes id="_consts_phy_8h" name="ConstsPhy.h" local="yes" imported="no">veins/modules/utility/ConstsPhy.h</includes>
    <includes id="_has_log_proxy_8h" name="HasLogProxy.h" local="yes" imported="no">veins/modules/utility/HasLogProxy.h</includes>
    <class kind="class">veins::Mac1609_4</class>
    <class kind="class">veins::Mac1609_4::EDCA</class>
    <class kind="class">veins::Mac1609_4::EDCA::EDCAQueue</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>Mac80211pToPhy11pInterface.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mac/ieee80211p/</path>
    <filename>_mac80211p_to_phy11p_interface_8h</filename>
    <includes id="_mac_to_phy_interface_8h" name="MacToPhyInterface.h" local="yes" imported="no">veins/base/phyLayer/MacToPhyInterface.h</includes>
    <includes id="_consts_phy_8h" name="ConstsPhy.h" local="yes" imported="no">veins/modules/utility/ConstsPhy.h</includes>
    <includes id="_consts80211p_8h" name="Consts80211p.h" local="yes" imported="no">veins/modules/utility/Consts80211p.h</includes>
    <class kind="class">veins::Mac80211pToPhy11pInterface</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>MacToNetwControlInfo.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_mac_to_netw_control_info_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
    <class kind="class">veins::MacToNetwControlInfo</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>MacToPhyControlInfo11p.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/utility/</path>
    <filename>_mac_to_phy_control_info11p_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_consts_phy_8h" name="ConstsPhy.h" local="yes" imported="no">veins/modules/utility/ConstsPhy.h</includes>
    <includes id="_consts80211p_8h" name="Consts80211p.h" local="yes" imported="no">veins/modules/utility/Consts80211p.h</includes>
    <class kind="struct">veins::MacToPhyControlInfo11p</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>MacToPhyInterface.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_mac_to_phy_interface_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_phy_utils_8h" name="PhyUtils.h" local="yes" imported="no">veins/base/phyLayer/PhyUtils.h</includes>
    <class kind="class">veins::MacToPhyInterface</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>manual.md</name>
    <path>/usr/src/veins-veins-5.0/doc/manual/</path>
    <filename>manual_8md</filename>
  </compound>
  <compound kind="file">
    <name>MobileHostObstacle.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/obstacle/</path>
    <filename>_mobile_host_obstacle_8cc</filename>
    <includes id="_mobile_host_obstacle_8h" name="MobileHostObstacle.h" local="yes" imported="no">veins/modules/obstacle/MobileHostObstacle.h</includes>
    <includes id="_base_mobility_8h" name="BaseMobility.h" local="yes" imported="no">veins/base/modules/BaseMobility.h</includes>
    <includes id="_heading_8h" name="Heading.h" local="yes" imported="no">veins/base/utils/Heading.h</includes>
    <namespace>anonymous_namespace{MobileHostObstacle.cc}</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isPointInObstacle</name>
      <anchorfile>namespaceanonymous__namespace_02_mobile_host_obstacle_8cc_03.html</anchorfile>
      <anchor>a4905f71256d96d9b1781ab9b31ec2a9e</anchor>
      <arglist>(Coord point, const MobileHostObstacle::Coords &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>segmentsIntersectAt</name>
      <anchorfile>namespaceanonymous__namespace_02_mobile_host_obstacle_8cc_03.html</anchorfile>
      <anchor>a5d7ee91cc8c7d960c2adaf8c6c773604</anchor>
      <arglist>(Coord p1From, Coord p1To, Coord p2From, Coord p2To)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MobileHostObstacle.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/obstacle/</path>
    <filename>_mobile_host_obstacle_8h</filename>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_antenna_position_8h" name="AntennaPosition.h" local="yes" imported="no">veins/base/utils/AntennaPosition.h</includes>
    <class kind="class">veins::MobileHostObstacle</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>Move.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_move_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">veins::Move</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>MyVeinsApp.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/application/traci/</path>
    <filename>_my_veins_app_8cc</filename>
    <includes id="_my_veins_app_8h" name="MyVeinsApp.h" local="yes" imported="no">veins/modules/application/traci/MyVeinsApp.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_my_veins_app_8cc.html</anchorfile>
      <anchor>a51b3675c0a25616c479e07df567d214a</anchor>
      <arglist>(veins::MyVeinsApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MyVeinsApp.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/application/traci/</path>
    <filename>_my_veins_app_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_demo_base_appl_layer_8h" name="DemoBaseApplLayer.h" local="yes" imported="no">veins/modules/application/ieee80211p/DemoBaseApplLayer.h</includes>
    <class kind="class">veins::MyVeinsApp</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>NakagamiFading.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_nakagami_fading_8cc</filename>
    <includes id="_nakagami_fading_8h" name="NakagamiFading.h" local="yes" imported="no">veins/modules/analogueModel/NakagamiFading.h</includes>
  </compound>
  <compound kind="file">
    <name>NakagamiFading.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_nakagami_fading_8h</filename>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <class kind="class">veins::NakagamiFading</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>NetwToMacControlInfo.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_netw_to_mac_control_info_8cc</filename>
    <includes id="_netw_to_mac_control_info_8h" name="NetwToMacControlInfo.h" local="yes" imported="no">veins/base/utils/NetwToMacControlInfo.h</includes>
    <namespace>anonymous_namespace{NetwToMacControlInfo.cc}</namespace>
    <member kind="typedef">
      <type>NetwToMacControlInfo</type>
      <name>tNetwToMacControlInfoBase</name>
      <anchorfile>namespaceanonymous__namespace_02_netw_to_mac_control_info_8cc_03.html</anchorfile>
      <anchor>a6a3ed43948eaeb9fd5b5b1e9ed5bed9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NetwToMacControlInfo.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_netw_to_mac_control_info_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
    <class kind="class">veins::NetwToMacControlInfo</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>NicEntry.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/connectionManager/</path>
    <filename>_nic_entry_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_heading_8h" name="Heading.h" local="yes" imported="no">veins/base/utils/Heading.h</includes>
    <includes id="_has_log_proxy_8h" name="HasLogProxy.h" local="yes" imported="no">veins/modules/utility/HasLogProxy.h</includes>
    <class kind="class">veins::NicEntry</class>
    <class kind="class">veins::NicEntry::NicEntryComparator</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>NicEntryDebug.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/connectionManager/</path>
    <filename>_nic_entry_debug_8cc</filename>
    <includes id="_nic_entry_debug_8h" name="NicEntryDebug.h" local="yes" imported="no">veins/base/connectionManager/NicEntryDebug.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
  </compound>
  <compound kind="file">
    <name>NicEntryDebug.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/connectionManager/</path>
    <filename>_nic_entry_debug_8h</filename>
    <includes id="_nic_entry_8h" name="NicEntry.h" local="yes" imported="no">veins/base/connectionManager/NicEntry.h</includes>
    <class kind="class">veins::NicEntryDebug</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>NicEntryDirect.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/connectionManager/</path>
    <filename>_nic_entry_direct_8cc</filename>
    <includes id="_nic_entry_direct_8h" name="NicEntryDirect.h" local="yes" imported="no">veins/base/connectionManager/NicEntryDirect.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>NicEntryDirect.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/connectionManager/</path>
    <filename>_nic_entry_direct_8h</filename>
    <includes id="_nic_entry_8h" name="NicEntry.h" local="yes" imported="no">veins/base/connectionManager/NicEntry.h</includes>
    <class kind="class">veins::NicEntryDirect</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>NistErrorRate.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/phy/</path>
    <filename>_nist_error_rate_8cc</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_nist_error_rate_8h" name="NistErrorRate.h" local="yes" imported="no">veins/modules/phy/NistErrorRate.h</includes>
  </compound>
  <compound kind="file">
    <name>NistErrorRate.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/phy/</path>
    <filename>_nist_error_rate_8h</filename>
    <includes id="_consts_phy_8h" name="ConstsPhy.h" local="yes" imported="no">veins/modules/utility/ConstsPhy.h</includes>
    <class kind="class">veins::NistErrorRate</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>Obstacle.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/obstacle/</path>
    <filename>_obstacle_8cc</filename>
    <includes id="_obstacle_8h" name="Obstacle.h" local="yes" imported="no">veins/modules/obstacle/Obstacle.h</includes>
    <namespace>anonymous_namespace{Obstacle.cc}</namespace>
    <member kind="function">
      <type>double</type>
      <name>segmentsIntersectAt</name>
      <anchorfile>namespaceanonymous__namespace_02_obstacle_8cc_03.html</anchorfile>
      <anchor>a46da0e8b4beb911bde581d7997d7312c</anchor>
      <arglist>(const Coord &amp;p1From, const Coord &amp;p1To, const Coord &amp;p2From, const Coord &amp;p2To)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Obstacle.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/obstacle/</path>
    <filename>_obstacle_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">veins/modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">veins::Obstacle</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>ObstacleControl.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/obstacle/</path>
    <filename>_obstacle_control_8cc</filename>
    <includes id="_obstacle_control_8h" name="ObstacleControl.h" local="yes" imported="no">veins/modules/obstacle/ObstacleControl.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <namespace>anonymous_namespace{ObstacleControl.cc}</namespace>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_obstacle_control_8cc.html</anchorfile>
      <anchor>a3abbe90ca8494b0664a39fe98a99fb7e</anchor>
      <arglist>(veins::ObstacleControl)</arglist>
    </member>
    <member kind="function">
      <type>veins::BBoxLookup</type>
      <name>rebuildBBoxLookup</name>
      <anchorfile>namespaceanonymous__namespace_02_obstacle_control_8cc_03.html</anchorfile>
      <anchor>a622c9a0b0c5d14fbd42f7d5bcba982cb</anchor>
      <arglist>(const std::vector&lt; std::unique_ptr&lt; veins::Obstacle &gt;&gt; &amp;obstacleOwner, int gridCellSize=250)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObstacleControl.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/obstacle/</path>
    <filename>_obstacle_control_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_obstacle_8h" name="Obstacle.h" local="yes" imported="no">veins/modules/obstacle/Obstacle.h</includes>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">veins/modules/world/annotations/AnnotationManager.h</includes>
    <includes id="_b_box_lookup_8h" name="BBoxLookup.h" local="yes" imported="no">veins/modules/utility/BBoxLookup.h</includes>
    <class kind="class">veins::ObstacleControl</class>
    <class kind="struct">veins::ObstacleControl::CacheKey</class>
    <class kind="class">veins::ObstacleControlAccess</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>ParBuffer.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_par_buffer_8h</filename>
    <class kind="class">veins::ParBuffer</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>PassedMessage.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_passed_message_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::PassedMessage</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>PERModel.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_p_e_r_model_8cc</filename>
    <includes id="_p_e_r_model_8h" name="PERModel.h" local="yes" imported="no">veins/modules/analogueModel/PERModel.h</includes>
  </compound>
  <compound kind="file">
    <name>PERModel.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_p_e_r_model_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <class kind="class">veins::PERModel</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>PhyLayer80211p.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/phy/</path>
    <filename>_phy_layer80211p_8cc</filename>
    <includes id="_phy_layer80211p_8h" name="PhyLayer80211p.h" local="yes" imported="no">veins/modules/phy/PhyLayer80211p.h</includes>
    <includes id="_decider80211p_8h" name="Decider80211p.h" local="yes" imported="no">veins/modules/phy/Decider80211p.h</includes>
    <includes id="_simple_pathloss_model_8h" name="SimplePathlossModel.h" local="yes" imported="no">veins/modules/analogueModel/SimplePathlossModel.h</includes>
    <includes id="_breakpoint_pathloss_model_8h" name="BreakpointPathlossModel.h" local="yes" imported="no">veins/modules/analogueModel/BreakpointPathlossModel.h</includes>
    <includes id="_p_e_r_model_8h" name="PERModel.h" local="yes" imported="no">veins/modules/analogueModel/PERModel.h</includes>
    <includes id="_simple_obstacle_shadowing_8h" name="SimpleObstacleShadowing.h" local="yes" imported="no">veins/modules/analogueModel/SimpleObstacleShadowing.h</includes>
    <includes id="_vehicle_obstacle_shadowing_8h" name="VehicleObstacleShadowing.h" local="yes" imported="no">veins/modules/analogueModel/VehicleObstacleShadowing.h</includes>
    <includes id="_two_ray_interference_model_8h" name="TwoRayInterferenceModel.h" local="yes" imported="no">veins/modules/analogueModel/TwoRayInterferenceModel.h</includes>
    <includes id="_nakagami_fading_8h" name="NakagamiFading.h" local="yes" imported="no">veins/modules/analogueModel/NakagamiFading.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <includes id="_consts80211p_8h" name="Consts80211p.h" local="yes" imported="no">veins/modules/utility/Consts80211p.h</includes>
    <includes id="_mac_to_phy_control_info11p_8h" name="MacToPhyControlInfo11p.h" local="yes" imported="no">veins/modules/utility/MacToPhyControlInfo11p.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_phy_layer80211p_8cc.html</anchorfile>
      <anchor>a229e18c2d25d7fc70ade312e48f303e2</anchor>
      <arglist>(veins::PhyLayer80211p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhyLayer80211p.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/phy/</path>
    <filename>_phy_layer80211p_8h</filename>
    <includes id="_base_phy_layer_8h" name="BasePhyLayer.h" local="yes" imported="no">veins/base/phyLayer/BasePhyLayer.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" imported="no">veins/base/toolbox/Spectrum.h</includes>
    <includes id="_mac80211p_to_phy11p_interface_8h" name="Mac80211pToPhy11pInterface.h" local="yes" imported="no">veins/modules/mac/ieee80211p/Mac80211pToPhy11pInterface.h</includes>
    <includes id="_decider80211p_8h" name="Decider80211p.h" local="yes" imported="no">veins/modules/phy/Decider80211p.h</includes>
    <includes id="_simple_pathloss_model_8h" name="SimplePathlossModel.h" local="yes" imported="no">veins/modules/analogueModel/SimplePathlossModel.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <includes id="_decider80211p_to_phy80211p_interface_8h" name="Decider80211pToPhy80211pInterface.h" local="yes" imported="no">veins/modules/phy/Decider80211pToPhy80211pInterface.h</includes>
    <includes id="_move_8h" name="Move.h" local="yes" imported="no">veins/base/utils/Move.h</includes>
    <class kind="class">veins::PhyLayer80211p</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>PhyToMacControlInfo.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_phy_to_mac_control_info_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_decider_8h" name="Decider.h" local="yes" imported="no">veins/base/phyLayer/Decider.h</includes>
    <class kind="class">veins::PhyToMacControlInfo</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>PhyUtils.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_phy_utils_8cc</filename>
    <includes id="_phy_utils_8h" name="PhyUtils.h" local="yes" imported="no">veins/base/phyLayer/PhyUtils.h</includes>
  </compound>
  <compound kind="file">
    <name>PhyUtils.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/phyLayer/</path>
    <filename>_phy_utils_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <class kind="class">veins::Radio</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>POA.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_p_o_a_8h</filename>
    <includes id="_antenna_8h" name="Antenna.h" local="yes" imported="no">veins/base/phyLayer/Antenna.h</includes>
    <includes id="_antenna_position_8h" name="AntennaPosition.h" local="yes" imported="no">veins/base/utils/AntennaPosition.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <class kind="class">veins::POA</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>SampledAntenna1D.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/phy/</path>
    <filename>_sampled_antenna1_d_8cc</filename>
    <includes id="_sampled_antenna1_d_8h" name="SampledAntenna1D.h" local="yes" imported="no">veins/modules/phy/SampledAntenna1D.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">veins/base/utils/FWMath.h</includes>
  </compound>
  <compound kind="file">
    <name>SampledAntenna1D.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/phy/</path>
    <filename>_sampled_antenna1_d_8h</filename>
    <includes id="_antenna_8h" name="Antenna.h" local="yes" imported="no">veins/base/phyLayer/Antenna.h</includes>
    <class kind="class">veins::SampledAntenna1D</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>Signal.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/toolbox/</path>
    <filename>_signal_8cc</filename>
    <includes id="_signal_8h" name="Signal.h" local="yes" imported="no">veins/base/toolbox/Signal.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <namespace>veins</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a7e340a38decf7a51e8d1e3c3f70a68e6</anchor>
      <arglist>(std::ostream &amp;os, const Signal &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>calculateStart</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa3e1a164dfa10df737a132165e84432a</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a3a7c8c80c7dc9491c5e9d191a4d763b5</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>abfc8946a04d32fb7d773e27cb81cf45f</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa878425a67810aa3f92068492a830b1b</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a95c45cac4b55a107962c8f1ad8c1e0c2</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a9aa18dbb2878124cbde5abec194dfd56</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a88f5eccdc9513521e70360a3dc66b05d</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>af272fb0f5a0e72642aa28c3585a19baa</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa8da0295acc06cfa17211dcef1b1f230</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a2925dc1d85c4d16a36736a5814a33034</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a04e5a424cea401ce029fe7431fcb59bf</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a0ee10fd2f82b3bf5672280a0aac92685</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a714e9dc581a597615c021bca6790ac93</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ae7f554dbeb2ee9119727b3f27d680c65</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>abfc8946a04d32fb7d773e27cb81cf45f</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa878425a67810aa3f92068492a830b1b</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a95c45cac4b55a107962c8f1ad8c1e0c2</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a9aa18dbb2878124cbde5abec194dfd56</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a88f5eccdc9513521e70360a3dc66b05d</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>af272fb0f5a0e72642aa28c3585a19baa</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa8da0295acc06cfa17211dcef1b1f230</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a2925dc1d85c4d16a36736a5814a33034</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a04e5a424cea401ce029fe7431fcb59bf</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a0ee10fd2f82b3bf5672280a0aac92685</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a714e9dc581a597615c021bca6790ac93</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ae7f554dbeb2ee9119727b3f27d680c65</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Signal.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/toolbox/</path>
    <filename>_signal_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_p_o_a_8h" name="POA.h" local="yes" imported="no">veins/base/utils/POA.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" imported="no">veins/base/toolbox/Spectrum.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <class kind="class">veins::Signal</class>
    <namespace>veins</namespace>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>abfc8946a04d32fb7d773e27cb81cf45f</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa878425a67810aa3f92068492a830b1b</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a95c45cac4b55a107962c8f1ad8c1e0c2</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a9aa18dbb2878124cbde5abec194dfd56</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a88f5eccdc9513521e70360a3dc66b05d</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>af272fb0f5a0e72642aa28c3585a19baa</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa8da0295acc06cfa17211dcef1b1f230</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a2925dc1d85c4d16a36736a5814a33034</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a04e5a424cea401ce029fe7431fcb59bf</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a0ee10fd2f82b3bf5672280a0aac92685</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a714e9dc581a597615c021bca6790ac93</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ae7f554dbeb2ee9119727b3f27d680c65</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>abfc8946a04d32fb7d773e27cb81cf45f</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa878425a67810aa3f92068492a830b1b</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a95c45cac4b55a107962c8f1ad8c1e0c2</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a9aa18dbb2878124cbde5abec194dfd56</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a88f5eccdc9513521e70360a3dc66b05d</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>af272fb0f5a0e72642aa28c3585a19baa</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa8da0295acc06cfa17211dcef1b1f230</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a2925dc1d85c4d16a36736a5814a33034</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a04e5a424cea401ce029fe7431fcb59bf</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a0ee10fd2f82b3bf5672280a0aac92685</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a714e9dc581a597615c021bca6790ac93</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ae7f554dbeb2ee9119727b3f27d680c65</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SignalManager.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/utility/</path>
    <filename>_signal_manager_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="struct">veins::SignalPayload</class>
    <class kind="class">veins::SignalCallbackListener</class>
    <class kind="class">veins::SignalManager</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>SignalUtils.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/toolbox/</path>
    <filename>_signal_utils_8cc</filename>
    <includes id="_signal_utils_8h" name="SignalUtils.h" local="yes" imported="no">veins/base/toolbox/SignalUtils.h</includes>
    <class kind="struct">veins::SignalUtils::anonymous_namespace{SignalUtils.cc}::greaterByReceptionEnd</class>
    <namespace>veins</namespace>
    <namespace>veins::SignalUtils</namespace>
    <namespace>veins::SignalUtils::anonymous_namespace{SignalUtils.cc}</namespace>
    <member kind="function">
      <type>Signal</type>
      <name>getMaxInterference</name>
      <anchorfile>namespaceveins_1_1_signal_utils_1_1anonymous__namespace_02_signal_utils_8cc_03.html</anchorfile>
      <anchor>adec53cec45469bce01bd893290800df5</anchor>
      <arglist>(simtime_t start, simtime_t end, AirFrame *const referenceFrame, AirFrameVector &amp;interfererFrames)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>powerLevelSumAtFrequencyIndex</name>
      <anchorfile>namespaceveins_1_1_signal_utils_1_1anonymous__namespace_02_signal_utils_8cc_03.html</anchorfile>
      <anchor>a861f01ba64a81a5ee7b98bb632eb41c7</anchor>
      <arglist>(const std::vector&lt; Signal *&gt; &amp;signals, size_t freqIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool VEINS_API</type>
      <name>isChannelPowerBelowThreshold</name>
      <anchorfile>namespaceveins_1_1_signal_utils.html</anchorfile>
      <anchor>a744df65831b369a6412cb305cf04f06f</anchor>
      <arglist>(simtime_t now, AirFrameVector &amp;interfererFrames, size_t freqIndex, double threshold, AirFrame *exclude=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>double VEINS_API</type>
      <name>getMinSINR</name>
      <anchorfile>namespaceveins_1_1_signal_utils.html</anchorfile>
      <anchor>a65bf87cf643cccf540dc5f0802a71427</anchor>
      <arglist>(simtime_t start, simtime_t end, AirFrame *signalFrame, AirFrameVector &amp;interfererFrames, double noise)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SignalUtils.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/toolbox/</path>
    <filename>_signal_utils_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_decider_to_phy_interface_8h" name="DeciderToPhyInterface.h" local="yes" imported="no">veins/base/phyLayer/DeciderToPhyInterface.h</includes>
    <includes id="_decider_8h" name="Decider.h" local="yes" imported="no">veins/base/phyLayer/Decider.h</includes>
    <includes id="_signal_8h" name="Signal.h" local="yes" imported="no">veins/base/toolbox/Signal.h</includes>
    <namespace>veins</namespace>
    <namespace>veins::SignalUtils</namespace>
    <member kind="typedef">
      <type>DeciderToPhyInterface::AirFrameVector</type>
      <name>AirFrameVector</name>
      <anchorfile>namespaceveins_1_1_signal_utils.html</anchorfile>
      <anchor>ac9c671582a40719ae28164dc42699535</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool VEINS_API</type>
      <name>isChannelPowerBelowThreshold</name>
      <anchorfile>namespaceveins_1_1_signal_utils.html</anchorfile>
      <anchor>a744df65831b369a6412cb305cf04f06f</anchor>
      <arglist>(simtime_t now, AirFrameVector &amp;interfererFrames, size_t freqIndex, double threshold, AirFrame *exclude=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>double VEINS_API</type>
      <name>getMinSINR</name>
      <anchorfile>namespaceveins_1_1_signal_utils.html</anchorfile>
      <anchor>a65bf87cf643cccf540dc5f0802a71427</anchor>
      <arglist>(simtime_t start, simtime_t end, AirFrame *signalFrame, AirFrameVector &amp;interfererFrames, double noise)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleAddress.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_simple_address_8cc</filename>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">veins/base/utils/SimpleAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>SimpleAddress.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>_simple_address_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::LAddress</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleObstacleShadowing.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_simple_obstacle_shadowing_8cc</filename>
    <includes id="_simple_obstacle_shadowing_8h" name="SimpleObstacleShadowing.h" local="yes" imported="no">veins/modules/analogueModel/SimpleObstacleShadowing.h</includes>
  </compound>
  <compound kind="file">
    <name>SimpleObstacleShadowing.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_simple_obstacle_shadowing_8h</filename>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="_obstacle_control_8h" name="ObstacleControl.h" local="yes" imported="no">veins/modules/obstacle/ObstacleControl.h</includes>
    <includes id="_move_8h" name="Move.h" local="yes" imported="no">veins/base/utils/Move.h</includes>
    <class kind="class">veins::SimpleObstacleShadowing</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>SimplePathlossModel.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_simple_pathloss_model_8cc</filename>
    <includes id="_simple_pathloss_model_8h" name="SimplePathlossModel.h" local="yes" imported="no">veins/modules/analogueModel/SimplePathlossModel.h</includes>
  </compound>
  <compound kind="file">
    <name>SimplePathlossModel.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_simple_pathloss_model_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <class kind="class">veins::SimplePathlossModel</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>simsignal_management.md</name>
    <path>/usr/src/veins-veins-5.0/doc/manual/</path>
    <filename>simsignal__management_8md</filename>
  </compound>
  <compound kind="file">
    <name>Spectrum.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/toolbox/</path>
    <filename>_spectrum_8cc</filename>
    <includes id="_spectrum_8h" name="Spectrum.h" local="yes" imported="no">veins/base/toolbox/Spectrum.h</includes>
    <namespace>veins</namespace>
    <member kind="function">
      <type>Spectrum::Frequencies</type>
      <name>normalizeFrequencies</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ae317931ac12e25d2ecde34956f44c4ae</anchor>
      <arglist>(Spectrum::Frequencies freqs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a8d872d1d10d2ca42893c7ebe42cb3cc9</anchor>
      <arglist>(const Spectrum &amp;lhs, const Spectrum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a791e077e5b62c35a7165b9bcd7936614</anchor>
      <arglist>(std::ostream &amp;os, const Spectrum &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Spectrum.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/toolbox/</path>
    <filename>_spectrum_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::Spectrum</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TimerManager.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/utility/</path>
    <filename>_timer_manager_8cc</filename>
    <includes id="_timer_manager_8h" name="TimerManager.h" local="yes" imported="no">veins/modules/utility/TimerManager.h</includes>
    <class kind="struct">veins::TimerMessage</class>
  </compound>
  <compound kind="file">
    <name>TimerManager.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/utility/</path>
    <filename>_timer_manager_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="struct">veins::TimerSpecification</class>
    <class kind="class">veins::TimerManager</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>timermanager.md</name>
    <path>/usr/src/veins-veins-5.0/doc/manual/</path>
    <filename>timermanager_8md</filename>
  </compound>
  <compound kind="file">
    <name>TraCIBuffer.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_buffer_8cc</filename>
    <includes id="_tra_c_i_buffer_8h" name="TraCIBuffer.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIBuffer.h</includes>
    <includes id="_tra_c_i_constants_8h" name="TraCIConstants.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConstants.h</includes>
    <includes id="_tra_c_i_coord_8h" name="TraCICoord.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICoord.h</includes>
    <namespace>veins</namespace>
    <member kind="function">
      <type>bool VEINS_API</type>
      <name>isBigEndian</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>af50368edf283a729c6096472ee299637</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIBuffer.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_buffer_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_tra_c_i_constants_8h" name="TraCIConstants.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConstants.h</includes>
    <class kind="class">veins::TraCIBuffer</class>
    <namespace>veins</namespace>
    <member kind="function">
      <type>bool VEINS_API</type>
      <name>isBigEndian</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>af50368edf283a729c6096472ee299637</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIColor.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_color_8cc</filename>
    <includes id="_tra_c_i_color_8h" name="TraCIColor.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIColor.h</includes>
  </compound>
  <compound kind="file">
    <name>TraCIColor.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_color_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::TraCIColor</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCICommandInterface.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_command_interface_8cc</filename>
    <includes id="_tra_c_i_buffer_8h" name="TraCIBuffer.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIBuffer.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <includes id="_tra_c_i_connection_8h" name="TraCIConnection.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConnection.h</includes>
    <includes id="_tra_c_i_constants_8h" name="TraCIConstants.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConstants.h</includes>
    <includes id="_par_buffer_8h" name="ParBuffer.h" local="yes" imported="no">veins/modules/mobility/traci/ParBuffer.h</includes>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCICommandInterface.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_command_interface_8h</filename>
    <includes id="_tra_c_i_color_8h" name="TraCIColor.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIColor.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_tra_c_i_coord_8h" name="TraCICoord.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICoord.h</includes>
    <includes id="_tra_c_i_connection_8h" name="TraCIConnection.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConnection.h</includes>
    <includes id="_tra_c_i_traffic_light_program_8h" name="TraCITrafficLightProgram.h" local="yes" imported="no">veins/modules/world/traci/trafficLight/TraCITrafficLightProgram.h</includes>
    <includes id="_has_log_proxy_8h" name="HasLogProxy.h" local="yes" imported="no">veins/modules/utility/HasLogProxy.h</includes>
    <class kind="class">veins::TraCICommandInterface</class>
    <class kind="class">veins::TraCICommandInterface::Vehicle</class>
    <class kind="class">veins::TraCICommandInterface::Road</class>
    <class kind="class">veins::TraCICommandInterface::Lane</class>
    <class kind="class">veins::TraCICommandInterface::Trafficlight</class>
    <class kind="class">veins::TraCICommandInterface::LaneAreaDetector</class>
    <class kind="class">veins::TraCICommandInterface::Polygon</class>
    <class kind="class">veins::TraCICommandInterface::Poi</class>
    <class kind="class">veins::TraCICommandInterface::Junction</class>
    <class kind="class">veins::TraCICommandInterface::Route</class>
    <class kind="class">veins::TraCICommandInterface::GuiView</class>
    <class kind="struct">veins::TraCICommandInterface::VersionConfig</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIConnection.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_connection_8cc</filename>
    <includes id="_tra_c_i_connection_8h" name="TraCIConnection.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConnection.h</includes>
    <includes id="_tra_c_i_constants_8h" name="TraCIConstants.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConstants.h</includes>
    <class kind="struct">veins::traci2omnet_functor</class>
    <namespace>veins</namespace>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>_tra_c_i_connection_8cc.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SOCKET</type>
      <name>socket</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a3e04988b53f0d0109602feb7895b4302</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>makeTraCICommand</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>af83b40d9114af922837b09398bc72005</anchor>
      <arglist>(uint8_t commandId, const TraCIBuffer &amp;buf=TraCIBuffer())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIConnection.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_connection_8h</filename>
    <includes id="_tra_c_i_buffer_8h" name="TraCIBuffer.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIBuffer.h</includes>
    <includes id="_tra_c_i_coord_8h" name="TraCICoord.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICoord.h</includes>
    <includes id="_tra_c_i_coordinate_transformation_8h" name="TraCICoordinateTransformation.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICoordinateTransformation.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_heading_8h" name="Heading.h" local="yes" imported="no">veins/base/utils/Heading.h</includes>
    <includes id="_has_log_proxy_8h" name="HasLogProxy.h" local="yes" imported="no">veins/modules/utility/HasLogProxy.h</includes>
    <class kind="class">veins::TraCIConnection</class>
    <class kind="class">veins::TraCIConnection::Result</class>
    <namespace>veins</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>makeTraCICommand</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>af83b40d9114af922837b09398bc72005</anchor>
      <arglist>(uint8_t commandId, const TraCIBuffer &amp;buf=TraCIBuffer())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIConstants.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_constants_8h</filename>
    <namespace>veins</namespace>
    <namespace>veins::TraCIConstants</namespace>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>TRACI_VERSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1d55c4f263164c10f249e8d4b4072a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>INVALID_DOUBLE_VALUE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa8f42ef2e0fc6886f1bb94ec8850272c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>INVALID_INT_VALUE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad4023f62c7a5af28ec417e2c139313aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ADD</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0083f50089ce124f7d80c7708baf64ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ADD_FULL</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a674ec8bab6f31412dc608fa960a92d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>APPEND_STAGE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae337dd7e356e6a1cca510e8e1d61b08a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>ARRIVALFLAG_LANE_CURRENT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a52695cc200a41dee2a3f944ca728f355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>ARRIVALFLAG_POS_MAX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0837d852df23ad78985d59a0a454b0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>ARRIVALFLAG_POS_RANDOM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab1c8ded9a8f7c80221403e79aa1474ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>ARRIVALFLAG_SPEED_CURRENT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ada0284294deda2096883dbe8b6c8539f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>AUTOMATIC_CONTEXT_SUBSCRIPTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab93fffe1eb1dfaef2c175243592fa396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>AUTOMATIC_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae7f2bab67972bfe7cb686869c8293ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_ADD_SUBSCRIPTION_FILTER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aca335b6911df428fcd8ee8e182c0c700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_CHANGELANE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1be53569ebedbc3fafd27e36872cbb9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_CHANGESUBLANE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aec61aa1517f0b39160b6fa0fd03ab7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_CHANGETARGET</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a558b0fcecbaf1d86edcd52cff3972a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_CLEAR_PENDING_VEHICLES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0c95812cb05335c95cbc850768b7002d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_CLOSE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>adf88aecb6eb6e35ddc79db5cd5470898</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GETVERSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7596522423a0e947a2be889af53de757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_EDGE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5107d68e22f637d26da0419cdade3b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_GUI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a52fbb48436814920190d54bab2b9cd12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>adee8c65e2359c7f9f11a514056cb1b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_JUNCTION_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acda977bbbb9a759a05fd7af267afd091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_LANEAREA_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad2533090405c38bd7658777ead68d717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_LANE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8da5ce287801d389863ed377aea39e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_MULTIENTRYEXIT_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4edc090924c966285dea2e55d687de21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_PERSON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8b5144f3769af818b859c812c6f37683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_POI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5589f5c6175eb106819d75e302f960ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_POLYGON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2952101fb6329fdab72453ac45cc0ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_ROUTE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0d73cbd9c4fe36f0c64a4ed823e8aedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_SIM_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5dc903c1a669de70b048894ea85bbf99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_TL_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a71c6e6bd583f7e4fe28254b8d3ca0a9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9e3a3538d44792f8cb6f11d3b5b89a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_VEHICLE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a18f341b3e34e0eff06eb32af09b7e8e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_LOAD</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1395f83a5cdac54bbdab27f16b818946</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_OPENGAP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9b1fb421acd625f3db3a4b6e0a2a1c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_REROUTE_EFFORT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a75258ec759be8e69d9d2dcca83f131e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_REROUTE_TO_PARKING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab3180b43505cd8a32df0cfb8fabadd14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_REROUTE_TRAVELTIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aad9dc453d537e0d7f3fbcbed5657bd90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_RESUME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a08891b658012be406ebefd418dd958a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SAVE_SIMSTATE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a344045eb42037ff7be9679e0533c04e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SETORDER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6f8dda9284a2a98903753605c423ddf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_EDGE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7929e82b4e42fe4576f724578c2fcb6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_GUI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0386f14f7feea6ebfef8e534e710e1fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_JUNCTION_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7ca23b7769ffeec1527b7538fc2e04e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_LANE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a72a295dbc0bb414e1a1567cc14e06ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_PERSON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a50f2364c5c7b4fefc1418c1bb2c77f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_POI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a960655c907b2a2e2e3ea96815aaeb2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_POLYGON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a663072978ecabe8cdf4782ea78afb077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_ROUTE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9ba5ad9d1894ea35bc7c46a2e0380a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_SIM_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a798e56dc1480d2352aacf2fc892e19d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_TL_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a30d91d06932b34bfa4685ae33ec99654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a98c942d010509276311292bc53317db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_VEHICLE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7074f136e1e29bb0b978c5f4951ed58a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SIMSTEP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3728000b9eb37ca4e54f3a7a7ff73db8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SIMSTEP2</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5ecec69d4f87492fc49d69c276d5d94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SLOWDOWN</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a09818c5a2500c1d92b9c8aa89821b6b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_STOP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa163a8307e0036269fe5ed9ad48e2e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a33d7693e44ecd3492a93f1fe3398218a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5d9bd6c8cf6a6fa8fe4009ccc1610e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae704adfb171aeecf1b4d25813160e7f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a331bc419d2216d722a7fbb2f66f2574a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acaa9654a4f68cc7aef6a824a72936296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a644968b383f1bf798688829f3f2d0650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae2750e99e746852cf4620fcaae31bae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3629a36b5f9f5ad777aec98f43984833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_LANEAREA_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a914a386605c9626bc36a976cc2b3a1e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_LANEAREA_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3bd0d0b0cd56ebe1d835bca3fc5664ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a796e535e23c8f61d7626b63c290491f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab90938525080232809a234be5a6ee554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4b191bd0edfa59d3298a028f3192b282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1ad5c518743336903a79efadee2f36b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_PERSON_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6327632506c1c59dd0ab736ca593f96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_PERSON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab9858176315ed92259c9c00734130901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af5cd7fd90c37b7c2ca9840650a67a2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9253e63d1f1f9d69acc06553246892b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a419b677e9574c785764c7b30e03e50c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9e205add6fe30958b976cec05a5d778c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af46719b79ab762edc541127e98d6fa98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1854d0d2f11ec945104869b6258c1d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a804f6d86a463a077d58728f3bf204074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a790f23db5c82d5a6ab3a424db7a160e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9ccda4bd15c66915982a8434beb4b7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>afdaf3e863979f15562f998e2cef7e46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8840bd1d60730091f2947220bed48824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2bb8ab263cb2dfcc056f36b45b2fc4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2c8abb9d2b22c2f05c8053c3035c0772</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a80f88e3428839954864610f4826e3d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>COPY</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a00a6c22a920b628490a865a188134de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_CONTAINER_TRIGGERED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a119a2f0df4486cca51626012ddf47589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_LANE_ALLOWED_FREE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab9bfbf0eddc6220054b83e04e07f8f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_LANE_BEST_FREE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6bf3851b50fdd13675a5f25101f953be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_LANE_FIRST_ALLOWED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a122ae32d08848a3ca4bdceacf42633e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_LANE_FREE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5f94e440c340ba65adf2e90ebfd5d2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_LANE_RANDOM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab84a8f0f5bfcb79d7da7e74fea2032cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_NOW</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af4ad5013a78822a67d67187e07599daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_POS_BASE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5694f1a06d0f67ad614c701c9006dacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_POS_FREE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abd4ac65edda30e608334b340ec5b4d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_POS_LAST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a74970ac753946ba92404963aaa8f1e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_POS_RANDOM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a13ead9605ee6ce88b900ea404ce3376b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_POS_RANDOM_FREE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac9b9eab3eea208b9bd9f2f91b9dc6b84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_SPEED_MAX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac554d5eb7745d733c993617f91bcf7ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_SPEED_RANDOM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0722b915a5b8a448cf248f1bd33856eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_TRIGGERED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a159ca02d35d85313204fa6b2d9fbe416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>DISTANCE_REQUEST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a610b036ca0873b9faf4ec7c8a4fa8c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_DOWNSTREAM_DIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7808c4a46dc8d8caba33e5b275f8e7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_LANES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a51d2cdcae20f4ed2a24dcc2657932280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_LEAD_FOLLOW</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3f12015372cfb668653e7caeda26a41d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_NONE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abf5b41362feebddc9bf192646551c9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_NOOPPOSITE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1548c71b697053f0fcbfb424998cd66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_TURN</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a48336af4dc508025d71d500d20501acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_UPSTREAM_DIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7d9413ecc7a35082690c8550b5fd9568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_VCLASS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8a6336387347b63bd677b3ce61c34e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_VTYPE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abf7ba13d792b3994fde04a27868745a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FIND_INTERMODAL_ROUTE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa1c1d285e179f488737f33963f318625</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FIND_ROUTE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4883055b79cca555d66553023cff85c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>GENERIC_ATTRIBUTE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad2a201bddd92c7f3ade24d9ed752fc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ID_COUNT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8e4d320b5b2265dfd6142048d4900084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ID_LIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a93bf7340c6eb435e04228db67fc23c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>JAM_LENGTH_METERS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a63b0681f966578bdbe85aa53c751a601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>JAM_LENGTH_VEHICLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aeab93f4940177563a2886fba3b3b2cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LANE_ALLOWED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ada307cbf59174739525dd7969f857268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LANE_DISALLOWED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab947d3518c46712cf7d0f71939365b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LANE_EDGE_ID</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aac92eddcc1779fb5012f0820fd5d2856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LANE_LINKS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab076987edeabdc96fdd34f09a8227ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LANE_LINK_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab26823007236012dd9c6dad157d47a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_LENGTH</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a24cb28b90f420af44c32abcc92aacb01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_MEAN_SPEED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a707de22f6c1e38a1cd06ec01c1f1b7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_OCCUPANCY</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae8b97800ca541774f5e967774f56d5c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_PERSON_ID_LIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8eab9937dac32f69897ef7d3adfcde10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_TIME_SINCE_DETECTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab8d10ae1877c471189f05db75a0b4c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_VEHICLE_DATA</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a67f044319ca850d9b69bbccc3403c5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_VEHICLE_HALTING_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac14ecda98143d2b8a452f08d0041d0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_VEHICLE_ID_LIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2760c3b3a9c262c1394c3e956c4df9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_VEHICLE_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4266722453e6396b135656417f33de58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>MAX_ORDER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a41cf3c7750091d7750ee7f62117d309f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>MOVE_TO_XY</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9651724aa4ba1a97d8f64dcd6da1c5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>OBJECT_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ade8011036de23a055014b79c9463a07d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>POSITION_2D</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2d5c064ba63549611152777b2771c52b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>POSITION_3D</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a17ba2941981a6ac2b884297c54d6dafb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>POSITION_CONVERSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acff95f7b5f58f59e747da995e6b88485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>POSITION_LON_LAT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3cd7aabb51036019cc10a3f83e607ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>POSITION_LON_LAT_ALT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a20c10ec846baabb94d846de5a04d8bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>POSITION_ROADMAP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa737dbb1f9131ababf25479b8f6fd258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a019693e64b8ce211a399053e3993cba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE_ARRIVED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a379b8496fe67ee4f15d1abb71e74fbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE_PARKING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2662e81f462269b9108114945d3b6133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE_STAGE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aec63fca6d4266af73a36eba24026008f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE_TELEPORT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad1222e32e537b774c802c4550de1d126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE_TELEPORT_ARRIVED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a67b08e09e754fbce503101993946d895</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE_VAPORIZED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a310193e5b6090ec034d11e12282d8dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REQUEST_AIRDIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9697eabf1d1a994a57d56803ac3a2a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REQUEST_DRIVINGDIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a19de762b877db63e276773e05a9220cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_EDGE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a90ff01be6e141406f9c37bcc0e08b0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_GUI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a821be6d7e616e6c3e3ed3dfeb99f1ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aec8c5037ed871097679136ec60998d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_JUNCTION_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2831be810e183e5224a768869e4ba3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_LANEAREA_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae45edddb88ddbca1da58ec8d5a36b075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_LANE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9a17178a0e3d3dc1c76b5ab290b56fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_MULTIENTRYEXIT_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a50550e8f6a3b5a2701ea25b7f568d4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_PERSON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a80667e026af2702c64ec060eac478e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_POI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a382e2f163d3f35efe7d7d42afbb56378</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_POLYGON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aba23e2d83a996902170a42bf797b6b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_ROUTE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab9f1b9cc8f749c625b33567cc5ba6102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_SIM_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a27c4faf04094c4c6386a9e4337a52c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_TL_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a98466d31f30fca815797de2511185995</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acd9012372c1a3adc5df73a2655aac739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_VEHICLE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6f1b22af322ec3f3f33d1269f0216797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae81895f251604d3b33f786ffac915168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1043b062926dc40f05282f9ba8f00467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a158504069ad522d95fa296c7e5bae11b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4cc0b1fd3d8587296e7f02e2e3868d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1fc57900510454df701c43448b3ea885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a606173b020d7aa1cacae9dd4ef052c64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a040b2125fd0ef100d5077c09af9fd7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1f48cd0468bbc90ff908d396fa710974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_LANEAREA_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3a5f1a7f8ed5fc28b0cd37b5355ba30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_LANEAREA_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a83f0545cfb30e2c40c2a486c98df9afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aaa5a955a838af23556351c2097dc2714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a698b1ec0ae678f391ea23fb8e9f7dd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3bf6f38c69c1aa2a92698e2c02592b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1873bbeafe5fa4af4dcf99e5c40ae401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_PERSON_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9f8f61cf1e65e2179fb1245891c63a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_PERSON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8acb0d47aab08702faeb2f06e22d4cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae9500aaf1778e1cb61c18079c76860d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8a41bda573adb076f158f7f9160b1a08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a20449044aa6ee4c903466f6f6a1bf1b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acad3e3447036d7546db4dbb7b03069b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abd9c72c080359ea695111af23de30d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a61529b7708c97c2cae0d8f8580e10dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a370b80805a2bbf0b8fb6f46d69f7df0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ace12f14337b099615656d8c0a8c4784a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3c1172327c129f366ff71ef9a4479770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a26c1662065b142b6468867977430d2ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a90a72e07ce0ae2ea5a4d17811e3bf267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1b910fa51146dad62cc611bf474c0a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>adc1839b293afd1baf4f0349b204d1963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae6b0869ef6bd5b15d6b16a39eeb3695a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ROUTING_MODE_AGGREGATED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a86699a113ca204a55c9ee762861ff0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ROUTING_MODE_COMBINED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab5d47b331dace2d49203a58fb09eb86d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ROUTING_MODE_DEFAULT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8ca9887f42f41d22e59e121fa78997f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ROUTING_MODE_EFFORT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a21ce1fe3a83c1036673166ef22a0e1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RTYPE_ERR</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6493e7aa545028af9e77993bdddef856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RTYPE_NOTIMPLEMENTED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a770b295d2b3ae7044db37e88f3771c60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RTYPE_OK</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a038efb141c2da3e2f754992e25ab722a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STAGE_DRIVING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad725e31aced3ccc036a1a2d629d138c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STAGE_WAITING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aefcf629f3513ceb91f93e3cc3ea4b60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STAGE_WAITING_FOR_DEPART</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad50115008afb606daac96e9e9ea3790a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STAGE_WALKING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2f27bcc7bb568357f935a92bb1002492</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_BUS_STOP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae1fd5192f19808b63cd6c99b6a08d44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_CHARGING_STATION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a676ff638d037c5f5c69750099054db5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_CONTAINER_STOP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a87d96fbe529629198618017cf60c4b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_CONTAINER_TRIGGERED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2171da8ad1a591d3e2532876b205bf3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_DEFAULT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0b677d3896f9fdf3b86d00f0e2ba6c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_PARKING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a791949e85775f53a4d88f75dfc9ceaf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_PARKING_AREA</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1a689de929cd0a36ee710952629c7d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_TRIGGERED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa85ebd21e1b6b48b9bc7a762734c7243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>SURROUNDING_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1ccc2277d47e75c305f6d3fb8e818fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_COMPLETE_DEFINITION_RYG</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3321f59e5cff51ab2bb174e9822b675d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_COMPLETE_PROGRAM_RYG</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6f697a47568983c53fbf64ed3092c0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_CONTROLLED_JUNCTIONS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa0f8e2872f6581443e3c042046330928</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_CONTROLLED_LANES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abd394b27e478f87234fa86bc8d40b56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_CONTROLLED_LINKS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0101b821ee3e019f5fa834afe04163c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_CURRENT_PHASE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa9ef6478d0f94375f03f93d82158058e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_CURRENT_PROGRAM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac802f9da5bcd5c8643400791d9781beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_EXTERNAL_STATE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acd9e828a15047ccff30549b863186457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_NEXT_SWITCH</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa0bf49b6dc99ce8ceb66527eb9d32548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_PHASE_DURATION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a071d609be8b1c0285cd1f649213a8a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_PHASE_INDEX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa04bba616d8ab691d2d52c227f379414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_PROGRAM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3d3abee5103b7c7889eb101a252fddf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_RED_YELLOW_GREEN_STATE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4fe67e85f80a87b4baea3b54d54d759c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_BOUNDINGBOX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4e7cdc43f9bd91c73cd660f142c04287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_BYTE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a13db309262d2ed1cf84776d030b8cde3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_COLOR</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae535933987db6cee00babba6a158f07f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_COMPOUND</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a65f08c87a1e1b3d5a258bc982829c1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_DOUBLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af6bb70c9236f90e2704fced4b84bd212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_INTEGER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab27785bbcbbc587d55536b8ff94fd3a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_POLYGON</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4989fce70194adc47c73117209bc74fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_STRING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7cc44f6f7f42e1d8eb0342be5f7ab7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_STRINGLIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a50f00f928dce85b05c6f5a79c4977dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_UBYTE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a065078887c8297cd8aa0c50cdb12cb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ACCEL</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a14af26c9527a3517b2e898f04376c5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ACCELERATION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a847513b367168404b092232087851304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ACCUMULATED_WAITING_TIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9efd0c7bd14f21a396d3e68a5b1a6680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ACTIONSTEPLENGTH</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a35dceda9e6a939b0ecaaacf2061bbb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ALLOWED_SPEED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a28790aa32dd0605bc3230ec64a63fe1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ANGLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aad9636c908d03af0152ad27c964beb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_APPARENT_DECEL</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa3f23bd3d8ec6d776ecd7fef6b4fd002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ARRIVED_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa50b01e9caa6c6452c6a2209ee463ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ARRIVED_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>adfbadff16d0d74e2eb7932bcfd0e30fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_BEST_LANES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3bafded76a07433b44c7d219b6e02ad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_BUS_STOP_WAITING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>afed81896c10b84d11b3cefda29a3b3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_CO2EMISSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a27ce9026057761db0d07a38e650c2ad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_COEMISSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a462493718d46a957293f693d84fb3e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_COLLIDING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab28f457187d4577a7be9bcc843b7fd7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_COLLIDING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af6ee18f8b413c27be94bb7a499f22ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_COLOR</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7e3bb54846e45259ee916a00d7aaeffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_CURRENT_TRAVELTIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a62c8bfded9d860ad46ee1837d73937d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_DECEL</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa5348a3db9d8d0c99d920121d5053a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_DELTA_T</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8da0e1a27a1c4a7844f4c9b079a9aa2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_DEPARTED_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6b0a4db6b50693d5c8b4962087ee3e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_DEPARTED_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>afce78e18e358428e29bf96d9a145528f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_DISTANCE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aebd787405b92d9642e576501fed97026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EDGES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9cca519d4872c8b189e3d0daa8e2e127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EDGE_EFFORT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a87b7208b1ba6b5c44936a6596395051d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EDGE_TRAVELTIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3b8d253292ef6a6f4b48514327224eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ELECTRICITYCONSUMPTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af2d88ef9e666253588196732a62f3282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EMERGENCYSTOPPING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a78a1b47b9194dd5060b67ddfd1416820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EMERGENCYSTOPPING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acbeb5dc1771cf09abd4484def77c10c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EMERGENCY_DECEL</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a222eb58a55bed9e6a0bb697ec6b6024c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EMISSIONCLASS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acac94610c5a63b72d800306c8024e424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_FILL</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a82a7cd42c39dcc2d994f26c8b0062f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_FOES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab7bc9761f1b62503a67c864a014f8ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_FUELCONSUMPTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a475ec173b46567be6ca6b12b5e430734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_HAS_VIEW</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3498d1e534890c88d89effeab4127e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_HCEMISSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>accd898496ee6ce2e495dc3dc80fda49c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_HEIGHT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acd05564943f293ef468c40afdba2f313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_IMPERFECTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abdf1064c4d1ac1063f0a1421cc4f2a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LANECHANGE_MODE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7547be5cd4daa41d82e34de561fc6396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LANEPOSITION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a20a4dd17ebbb7f5ef126b666e8372205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LANEPOSITION_LAT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3bbc41df278fd9c71c04195435c37d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LANE_ID</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a15c8991f6968052da0e9ae6fed821de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LANE_INDEX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af9a35fa7b5ff11084f441c8de4129bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LASTACTIONTIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a872eb8c91301cb8571e6a6b320149d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LATALIGNMENT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab2ee141f663521a781c4488b1a82ab36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LEADER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a110cc26ba2d2fcf2d25e9dbfb8439b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LENGTH</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1d322c7af87e627eca9baedfe1cc1dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LINE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af317ba591a7d0305f32ae33f25286a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LOADED_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae27613fafe7fdc5f36f7d596cb0c4edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LOADED_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab1e4729f0b0cdd003464bb1629267797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MAXSPEED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a440e8279115dcd60b49ac7ea95f30c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MAXSPEED_LAT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abaa60320e825cf03f11a5b3c0d171ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MINGAP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a39c3028967cdaeade8fafbe3a51d6c60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MINGAP_LAT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aeb020c8463c09c1a458336b5be9c9c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MIN_EXPECTED_VEHICLES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a901b45f37181e6b3812a9fbbdf09e05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MOVE_TO</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a839e10df90e9f73f8795ca043b6bad74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MOVE_TO_VTD</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a292cadea6d57e08590cf3b9fe22a99b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NAME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa84d2a1da5dca35911bcab5a66a98e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NET_BOUNDING_BOX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a55dc257c6806ba610e41e04bd3303acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NEXT_EDGE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2e6d78f26c47b3fa2a7bf73443db60ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NEXT_STOPS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a23fe5db07be564af12d9b7481b91a53f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NEXT_TLS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0def6d772135706328ac766a4d85d77d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NOISEEMISSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a97342a4c9309ffe643e46538e822d858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NOXEMISSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a319db49d910b2cb08c3a2b148b8ff10e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PARAMETER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab9b052fd2332ab24205b9bf90ab2e310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PARKING_ENDING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad9b3ef66755d7dee0a5570887aa0246d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PARKING_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a18cad94823e4de48637695b7ecbfff2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PARKING_STARTING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aebfae27abd1e47ea71be0b85559fe893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PARKING_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3861b6fb08c0d6b8742eaa78c478a43a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PERSON_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad0826e67fdbb7b00fe127a013ee9cdd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PMXEMISSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac299dce16143b8f7a02e172c35b98530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_POSITION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9a41b6ec5aa12230aa9a96bade91c592</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_POSITION3D</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7d7e9fb572cb051bd38f6ad8c3d7c81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ROAD_ID</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a24e84b504823e65153a5b4d5297f34ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ROUTE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5d7aad14697188502d64754123d637bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ROUTE_ID</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>afde08e40f69012821553ff04b6208e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ROUTE_INDEX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5aabfe828ae1a41bed2e9ce024bbdf46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ROUTE_VALID</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0d5537981640aebbf0c1eb69fb0d6e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ROUTING_MODE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a85747bdc413ba5886e7ca83f376e88a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SCREENSHOT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac0d03089dd4be8fdbf06a56077cdee39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SHAPE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a76915d5a908a87087e922162fccc72ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SHAPECLASS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad8ace34134f05e0c6638271787aa2736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SIGNALS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a283e1b19190bd0048f083d2df09248d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SLOPE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a85cfb7717d4faf0a9e90eaa32295b103</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SPEED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0b2aa56b7bce08b70c65cf04e327f728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SPEEDSETMODE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>afdc126524c3affeb3dc56b464bd76a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SPEED_DEVIATION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1075ed244f379cac020ca7950142e905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SPEED_FACTOR</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3f5f9f85dcbeaac7d1217ecae5a72def</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SPEED_WITHOUT_TRACI</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5fec2b2929721883af44683a8b2eba80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STAGE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae44c54af3f075403c9a4d026ecb6dcfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STAGES_REMAINING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acf61da513559d4a8f832dfdd48acc350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STOPSTATE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af752c094a9442487ff68ab6a61a608af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STOP_ENDING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ace6b339b107e979abbe9ca8b4649c544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STOP_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a436a8974cfcdac9e160710902dbff1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STOP_STARTING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a83c8a13dbb9eafac2da5f10fc515082e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STOP_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af38ea32891df56fde32c2e478140e084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TAU</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aafa9259f725b2040541a38f79dad27ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acf35220cba7048c8dacd9d998a115ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a22245b01beef79cae76caef86691de58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abb54efc20062f7728651f4b1bb27e2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>adf52e6289cd322e7d79ad679d4934581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a34fde6e225cd3cbcca0022675b050936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TIME_STEP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa734fae66b78d65811e2a53add713c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TRACK_VEHICLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8bcdfe3878de6de2aa0d38062a37e4e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TYPE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af0566d66ce7f3a351184646e7d181641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_UPDATE_BESTLANES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a15a16c5925039c0f3f94014faa25ec5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VEHICLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae77a0bb0249072e08b0a5c8977a97cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VEHICLECLASS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>adc903729c495194afd818e2084888908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VIA</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2922d6e9feec3909637a47303cf573af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VIEW_BOUNDARY</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a12247c48d0cccb94c22e4feb92d7e8b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VIEW_OFFSET</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af15c0a8cd433f0ae86cb54b5d2f81b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VIEW_SCHEMA</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5943ec55c3b4ef4fcd9d8f9963a71619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VIEW_ZOOM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af5c533ce0ca7c848eadc10983ce5c046</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_WAITING_TIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af9530f927275857b1ba3c2b9438bd932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_WAITING_TIME_ACCUMULATED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac5c4ff2d0edaa689122a55d9d87dfb03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_WIDTH</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0fc63ced70ab65c1b448f1d2d4b7a063</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCICoord.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_coord_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="struct">veins::TraCICoord</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCICoordinateTransformation.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_coordinate_transformation_8cc</filename>
    <includes id="_tra_c_i_coordinate_transformation_8h" name="TraCICoordinateTransformation.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICoordinateTransformation.h</includes>
    <namespace>veins</namespace>
    <member kind="typedef">
      <type>TraCICoordinateTransformation::OmnetCoord</type>
      <name>OmnetCoord</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a2bf3c811568782b8e09332f929be278d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraCICoordinateTransformation::OmnetCoordList</type>
      <name>OmnetCoordList</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a83a9df14be621e16218eca6ba1a6ec2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraCICoordinateTransformation::TraCICoordList</type>
      <name>TraCICoordList</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a8038130a97935e742fac799330b84c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraCICoordinateTransformation::OmnetHeading</type>
      <name>OmnetHeading</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ac2179e548f812de4b81b0040ef0d33f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraCICoordinateTransformation::TraCIHeading</type>
      <name>TraCIHeading</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a4ac0d5fc836cf7b6d5ad47aea35cc6c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCICoordinateTransformation.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_coordinate_transformation_8h</filename>
    <includes id="_tra_c_i_coord_8h" name="TraCICoord.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICoord.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_heading_8h" name="Heading.h" local="yes" imported="no">veins/base/utils/Heading.h</includes>
    <class kind="class">veins::TraCICoordinateTransformation</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIDemo11p.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/application/traci/</path>
    <filename>_tra_c_i_demo11p_8cc</filename>
    <includes id="_tra_c_i_demo11p_8h" name="TraCIDemo11p.h" local="yes" imported="no">veins/modules/application/traci/TraCIDemo11p.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_demo11p_8cc.html</anchorfile>
      <anchor>a5d41859afbceefc01cd740fa079e98a3</anchor>
      <arglist>(veins::TraCIDemo11p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIDemo11p.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/application/traci/</path>
    <filename>_tra_c_i_demo11p_8h</filename>
    <includes id="_demo_base_appl_layer_8h" name="DemoBaseApplLayer.h" local="yes" imported="no">veins/modules/application/ieee80211p/DemoBaseApplLayer.h</includes>
    <class kind="class">veins::TraCIDemo11p</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIDemoRSU11p.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/application/traci/</path>
    <filename>_tra_c_i_demo_r_s_u11p_8cc</filename>
    <includes id="_tra_c_i_demo_r_s_u11p_8h" name="TraCIDemoRSU11p.h" local="yes" imported="no">veins/modules/application/traci/TraCIDemoRSU11p.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_demo_r_s_u11p_8cc.html</anchorfile>
      <anchor>a33afda10349561cd9c0c21e94995c3cd</anchor>
      <arglist>(veins::TraCIDemoRSU11p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIDemoRSU11p.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/application/traci/</path>
    <filename>_tra_c_i_demo_r_s_u11p_8h</filename>
    <includes id="_demo_base_appl_layer_8h" name="DemoBaseApplLayer.h" local="yes" imported="no">veins/modules/application/ieee80211p/DemoBaseApplLayer.h</includes>
    <class kind="class">veins::TraCIDemoRSU11p</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCILauncher.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_launcher_8cc</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_tra_c_i_launcher_8h" name="TraCILauncher.h" local="yes" imported="no">veins/modules/mobility/traci/TraCILauncher.h</includes>
  </compound>
  <compound kind="file">
    <name>TraCILauncher.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_launcher_8h</filename>
    <class kind="class">veins::TraCILauncher</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIMobility.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_mobility_8cc</filename>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIMobility.h</includes>
    <namespace>anonymous_namespace{TraCIMobility.cc}</namespace>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_mobility_8cc.html</anchorfile>
      <anchor>a9ea957adce57828ebebc46a2e3fa9c3f</anchor>
      <arglist>(veins::TraCIMobility)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>MY_INFINITY</name>
      <anchorfile>namespaceanonymous__namespace_02_tra_c_i_mobility_8cc_03.html</anchorfile>
      <anchor>a2460ad95761f590f8bfdc2fb72d73e57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIMobility.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_mobility_8h</filename>
    <includes id="_base_mobility_8h" name="BaseMobility.h" local="yes" imported="no">veins/base/modules/BaseMobility.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <includes id="_vehicle_signal_8h" name="VehicleSignal.h" local="yes" imported="no">veins/modules/mobility/traci/VehicleSignal.h</includes>
    <includes id="_heading_8h" name="Heading.h" local="yes" imported="no">veins/base/utils/Heading.h</includes>
    <class kind="class">veins::TraCIMobility</class>
    <class kind="class">veins::TraCIMobility::Statistics</class>
    <class kind="class">veins::TraCIMobilityAccess</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIRegionOfInterest.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_region_of_interest_8cc</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_tra_c_i_region_of_interest_8h" name="TraCIRegionOfInterest.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIRegionOfInterest.h</includes>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIRegionOfInterest.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_region_of_interest_8h</filename>
    <includes id="_tra_c_i_coord_8h" name="TraCICoord.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICoord.h</includes>
    <class kind="class">veins::TraCIRegionOfInterest</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManager.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_scenario_manager_8cc</filename>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <includes id="_tra_c_i_constants_8h" name="TraCIConstants.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConstants.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIMobility.h</includes>
    <includes id="_obstacle_control_8h" name="ObstacleControl.h" local="yes" imported="no">veins/modules/obstacle/ObstacleControl.h</includes>
    <includes id="_tra_c_i_traffic_light_interface_8h" name="TraCITrafficLightInterface.h" local="yes" imported="no">veins/modules/world/traci/trafficLight/TraCITrafficLightInterface.h</includes>
    <namespace>anonymous_namespace{TraCIScenarioManager.cc}</namespace>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_scenario_manager_8cc.html</anchorfile>
      <anchor>a2bf2e5e178ff427c82906fd6eecba07c</anchor>
      <arglist>(veins::TraCIScenarioManager)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getMapping</name>
      <anchorfile>namespaceanonymous__namespace_02_tra_c_i_scenario_manager_8cc_03.html</anchorfile>
      <anchor>aee10972a597261c51d4978b2e596294a</anchor>
      <arglist>(std::string el)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManager.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_scenario_manager_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">veins/base/connectionManager/BaseConnectionManager.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="_obstacle_control_8h" name="ObstacleControl.h" local="yes" imported="no">veins/modules/obstacle/ObstacleControl.h</includes>
    <includes id="_vehicle_obstacle_control_8h" name="VehicleObstacleControl.h" local="yes" imported="no">veins/modules/obstacle/VehicleObstacleControl.h</includes>
    <includes id="_tra_c_i_buffer_8h" name="TraCIBuffer.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIBuffer.h</includes>
    <includes id="_tra_c_i_color_8h" name="TraCIColor.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIColor.h</includes>
    <includes id="_tra_c_i_connection_8h" name="TraCIConnection.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConnection.h</includes>
    <includes id="_tra_c_i_coord_8h" name="TraCICoord.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICoord.h</includes>
    <includes id="_vehicle_signal_8h" name="VehicleSignal.h" local="yes" imported="no">veins/modules/mobility/traci/VehicleSignal.h</includes>
    <includes id="_tra_c_i_region_of_interest_8h" name="TraCIRegionOfInterest.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIRegionOfInterest.h</includes>
    <class kind="class">veins::TraCIScenarioManager</class>
    <class kind="class">veins::TraCIScenarioManagerAccess</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManagerForker.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_scenario_manager_forker_8cc</filename>
    <includes id="_tra_c_i_scenario_manager_forker_8h" name="TraCIScenarioManagerForker.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManagerForker.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <includes id="_tra_c_i_constants_8h" name="TraCIConstants.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConstants.h</includes>
    <includes id="_tra_c_i_launcher_8h" name="TraCILauncher.h" local="yes" imported="no">veins/modules/mobility/traci/TraCILauncher.h</includes>
    <namespace>anonymous_namespace{TraCIScenarioManagerForker.cc}</namespace>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>_tra_c_i_scenario_manager_forker_8cc.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_scenario_manager_forker_8cc.html</anchorfile>
      <anchor>aa0cd860ead190778e273cda53e3da6b4</anchor>
      <arglist>(veins::TraCIScenarioManagerForker)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>replace</name>
      <anchorfile>namespaceanonymous__namespace_02_tra_c_i_scenario_manager_forker_8cc_03.html</anchorfile>
      <anchor>ab1f88e93928abbf9d1734e6c330da1e9</anchor>
      <arglist>(std::string haystack, std::string needle, T newValue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManagerForker.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_scenario_manager_forker_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="_tra_c_i_launcher_8h" name="TraCILauncher.h" local="yes" imported="no">veins/modules/mobility/traci/TraCILauncher.h</includes>
    <class kind="class">veins::TraCIScenarioManagerForker</class>
    <class kind="class">veins::TraCIScenarioManagerForkerAccess</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManagerLaunchd.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_scenario_manager_launchd_8cc</filename>
    <includes id="_tra_c_i_scenario_manager_launchd_8h" name="TraCIScenarioManagerLaunchd.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <includes id="_tra_c_i_constants_8h" name="TraCIConstants.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIConstants.h</includes>
    <namespace>veins</namespace>
    <namespace>veins::TraCIConstants</namespace>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_scenario_manager_launchd_8cc.html</anchorfile>
      <anchor>a1657dd0dfab03ca64011f8f7f37f0956</anchor>
      <arglist>(veins::TraCIScenarioManagerLaunchd)</arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_FILE_SEND</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a23bcd5db8842b59a6337a611ce7436b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManagerLaunchd.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_scenario_manager_launchd_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <class kind="class">veins::TraCIScenarioManagerLaunchd</class>
    <class kind="class">veins::TraCIScenarioManagerLaunchdAccess</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIScreenRecorder.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_screen_recorder_8cc</filename>
    <includes id="_tra_c_i_screen_recorder_8h" name="TraCIScreenRecorder.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScreenRecorder.h</includes>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_screen_recorder_8cc.html</anchorfile>
      <anchor>a26379c0aa6a4c1b74e4361fd8fc6ae7b</anchor>
      <arglist>(veins::TraCIScreenRecorder)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScreenRecorder.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_screen_recorder_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::TraCIScreenRecorder</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCITrafficLightAbstractLogic.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/world/traci/trafficLight/logics/</path>
    <filename>_tra_c_i_traffic_light_abstract_logic_8cc</filename>
    <includes id="_tra_c_i_traffic_light_abstract_logic_8h" name="TraCITrafficLightAbstractLogic.h" local="yes" imported="no">veins/modules/world/traci/trafficLight/logics/TraCITrafficLightAbstractLogic.h</includes>
  </compound>
  <compound kind="file">
    <name>TraCITrafficLightAbstractLogic.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/world/traci/trafficLight/logics/</path>
    <filename>_tra_c_i_traffic_light_abstract_logic_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::TraCITrafficLightAbstractLogic</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCITrafficLightInterface.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/world/traci/trafficLight/</path>
    <filename>_tra_c_i_traffic_light_interface_8cc</filename>
    <includes id="_tra_c_i_traffic_light_interface_8h" name="TraCITrafficLightInterface.h" local="yes" imported="no">veins/modules/world/traci/trafficLight/TraCITrafficLightInterface.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_traffic_light_interface_8cc.html</anchorfile>
      <anchor>a07bd6035239cb5648b73b357759a2d7d</anchor>
      <arglist>(veins::TraCITrafficLightInterface)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCITrafficLightInterface.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/world/traci/trafficLight/</path>
    <filename>_tra_c_i_traffic_light_interface_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <includes id="_tra_c_i_traffic_light_program_8h" name="TraCITrafficLightProgram.h" local="yes" imported="no">veins/modules/world/traci/trafficLight/TraCITrafficLightProgram.h</includes>
    <class kind="class">veins::TraCITrafficLightInterface</class>
    <class kind="class">veins::TraCITrafficLightInterfaceAccess</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCITrafficLightProgram.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/world/traci/trafficLight/</path>
    <filename>_tra_c_i_traffic_light_program_8cc</filename>
    <includes id="_tra_c_i_traffic_light_program_8h" name="TraCITrafficLightProgram.h" local="yes" imported="no">veins/modules/world/traci/trafficLight/TraCITrafficLightProgram.h</includes>
  </compound>
  <compound kind="file">
    <name>TraCITrafficLightProgram.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/world/traci/trafficLight/</path>
    <filename>_tra_c_i_traffic_light_program_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <class kind="class">veins::TraCITrafficLightProgram</class>
    <class kind="struct">veins::TraCITrafficLightProgram::Phase</class>
    <class kind="struct">veins::TraCITrafficLightProgram::Logic</class>
    <class kind="struct">veins::TraCITrafficLightLink</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCITrafficLightSimpleLogic.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/world/traci/trafficLight/logics/</path>
    <filename>_tra_c_i_traffic_light_simple_logic_8cc</filename>
    <includes id="_tra_c_i_traffic_light_simple_logic_8h" name="TraCITrafficLightSimpleLogic.h" local="yes" imported="no">veins/modules/world/traci/trafficLight/logics/TraCITrafficLightSimpleLogic.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_traffic_light_simple_logic_8cc.html</anchorfile>
      <anchor>a4a04bfdc73a52652ced97bcdcceed7b2</anchor>
      <arglist>(veins::TraCITrafficLightSimpleLogic)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCITrafficLightSimpleLogic.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/world/traci/trafficLight/logics/</path>
    <filename>_tra_c_i_traffic_light_simple_logic_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <includes id="_tra_c_i_traffic_light_abstract_logic_8h" name="TraCITrafficLightAbstractLogic.h" local="yes" imported="no">veins/modules/world/traci/trafficLight/logics/TraCITrafficLightAbstractLogic.h</includes>
    <includes id="_tra_c_i_traffic_light_interface_8h" name="TraCITrafficLightInterface.h" local="yes" imported="no">veins/modules/world/traci/trafficLight/TraCITrafficLightInterface.h</includes>
    <class kind="class">veins::TraCITrafficLightSimpleLogic</class>
    <class kind="class">veins::TraCITrafficLightSimpleLogicAccess</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIVehicleInserter.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_vehicle_inserter_8cc</filename>
    <includes id="_tra_c_i_vehicle_inserter_8h" name="TraCIVehicleInserter.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIVehicleInserter.h</includes>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">veins/modules/mobility/traci/TraCICommandInterface.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIMobility.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">veins/base/utils/FindModule.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_vehicle_inserter_8cc.html</anchorfile>
      <anchor>ad152842640969c7dc43b88b2820a2814</anchor>
      <arglist>(veins::TraCIVehicleInserter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIVehicleInserter.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_tra_c_i_vehicle_inserter_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">veins/modules/mobility/traci/TraCIScenarioManager.h</includes>
    <class kind="class">veins::TraCIVehicleInserter</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>TwoRayInterferenceModel.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_two_ray_interference_model_8cc</filename>
    <includes id="_two_ray_interference_model_8h" name="TwoRayInterferenceModel.h" local="yes" imported="no">veins/modules/analogueModel/TwoRayInterferenceModel.h</includes>
  </compound>
  <compound kind="file">
    <name>TwoRayInterferenceModel.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_two_ray_interference_model_8h</filename>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <class kind="class">veins::TwoRayInterferenceModel</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>VehicleObstacleControl.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/obstacle/</path>
    <filename>_vehicle_obstacle_control_8cc</filename>
    <includes id="_vehicle_obstacle_control_8h" name="VehicleObstacleControl.h" local="yes" imported="no">veins/modules/obstacle/VehicleObstacleControl.h</includes>
    <includes id="_base_mobility_8h" name="BaseMobility.h" local="yes" imported="no">veins/base/modules/BaseMobility.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">veins/base/connectionManager/ChannelAccess.h</includes>
    <includes id="_signal_8h" name="Signal.h" local="yes" imported="no">veins/base/toolbox/Signal.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_vehicle_obstacle_control_8cc.html</anchorfile>
      <anchor>a83615a3727c15cdc4fadb07fd6730815</anchor>
      <arglist>(veins::VehicleObstacleControl)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VehicleObstacleControl.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/obstacle/</path>
    <filename>_vehicle_obstacle_control_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_antenna_position_8h" name="AntennaPosition.h" local="yes" imported="no">veins/base/utils/AntennaPosition.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">veins/base/utils/Coord.h</includes>
    <includes id="_obstacle_8h" name="Obstacle.h" local="yes" imported="no">veins/modules/obstacle/Obstacle.h</includes>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">veins/modules/world/annotations/AnnotationManager.h</includes>
    <includes id="_move_8h" name="Move.h" local="yes" imported="no">veins/base/utils/Move.h</includes>
    <includes id="_mobile_host_obstacle_8h" name="MobileHostObstacle.h" local="yes" imported="no">veins/modules/obstacle/MobileHostObstacle.h</includes>
    <class kind="class">veins::VehicleObstacleControl</class>
    <class kind="class">veins::VehicleObstacleControlAccess</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>VehicleObstacleShadowing.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_vehicle_obstacle_shadowing_8cc</filename>
    <includes id="_vehicle_obstacle_shadowing_8h" name="VehicleObstacleShadowing.h" local="yes" imported="no">veins/modules/analogueModel/VehicleObstacleShadowing.h</includes>
  </compound>
  <compound kind="file">
    <name>VehicleObstacleShadowing.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/analogueModel/</path>
    <filename>_vehicle_obstacle_shadowing_8h</filename>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">veins/base/phyLayer/AnalogueModel.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">veins/base/modules/BaseWorldUtility.h</includes>
    <includes id="_vehicle_obstacle_control_8h" name="VehicleObstacleControl.h" local="yes" imported="no">veins/modules/obstacle/VehicleObstacleControl.h</includes>
    <includes id="_move_8h" name="Move.h" local="yes" imported="no">veins/base/utils/Move.h</includes>
    <class kind="class">veins::VehicleObstacleShadowing</class>
    <namespace>veins</namespace>
  </compound>
  <compound kind="file">
    <name>VehicleSignal.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/modules/mobility/traci/</path>
    <filename>_vehicle_signal_8h</filename>
    <includes id="veins_8h" name="veins.h" local="yes" imported="no">veins/veins.h</includes>
    <includes id="_enum_bitset_8h" name="EnumBitset.h" local="yes" imported="no">veins/base/utils/EnumBitset.h</includes>
    <class kind="struct">veins::EnumTraits&lt; VehicleSignal &gt;</class>
    <namespace>veins</namespace>
    <member kind="typedef">
      <type>EnumBitset&lt; VehicleSignal &gt;</type>
      <name>VehicleSignalSet</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a93b519d305586018b3e235bde088e6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VehicleSignal</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a3646bbff248e309c6bf314c1c105166f</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa159cf822c52983226f035885a219ec22">blinker_right</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fafc6b63264388abbf3a6d3d0757a53b16">blinker_left</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fafe805ede71bf740a4d4f448e9c6ddba8">blinker_emergency</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa1a9f113e4ae235f61db27efc25403f85">brakelight</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa44aabd6568e2b2fa5c3e279096303261">frontlight</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa757ffdaa87a487b7cdb1f7d231435720">foglight</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa7e9791a80f6356966b5f4baaec74b425">highbeam</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa15a6647e6aacae388a44be2a8df170c1">backdrive</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa07a8e724484fb94f28e6f4823bd36cdb">wiper</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166faed71a12e31aaf2ca49e54e15168991c4">door_open_left</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa7ef4f0d1dcece28de7b1dc96db4b6dfd">door_open_right</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166faf8e33cf2711b4b11ece6db4363d63ffe">emergency_blue</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fadab7b3f81a59a5796c4f5d11f863887f">emergency_red</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fae8eee9bcc56abe72a1f67de2f19d4fa1">emergency_yellow</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa5e543256c480ac577d30f76f9120eb74">undefined</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>veins.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/</path>
    <filename>veins_8h</filename>
    <namespace>omnetpp</namespace>
    <namespace>veins</namespace>
    <member kind="define">
      <type>#define</type>
      <name>VEINS_VERSION_MAJOR</name>
      <anchorfile>veins_8h.html</anchorfile>
      <anchor>a09d3fa6164be2a42917145a41736cd09</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEINS_VERSION_MINOR</name>
      <anchorfile>veins_8h.html</anchorfile>
      <anchor>a5a0f172f582d0fafd48fed5c8b3dfe24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEINS_VERSION_PATCH</name>
      <anchorfile>veins_8h.html</anchorfile>
      <anchor>a4efd4d0782d56e7ae0e2585c0daf0342</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEINS_VERSION_ALPHA</name>
      <anchorfile>veins_8h.html</anchorfile>
      <anchor>a2af5a75992cb6f63d34786afcfe0461c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEINS_API</name>
      <anchorfile>veins_8h.html</anchorfile>
      <anchor>a4712e05eeaf6ada031e3059f531bb5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEINS_DEPRECATED</name>
      <anchorfile>veins_8h.html</anchorfile>
      <anchor>aae28cdde617ed9321edfda5b872840cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RNGCONTEXT</name>
      <anchorfile>veins_8h.html</anchorfile>
      <anchor>ac63e7a187ac530ca9ccc8b41b61272cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>make_unique</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ab5ffaae0bbd1bb2eaab79788f3f45e03</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>winsupport.cc</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>winsupport_8cc</filename>
    <includes id="winsupport_8h" name="winsupport.h" local="yes" imported="no">veins/base/utils/winsupport.h</includes>
  </compound>
  <compound kind="file">
    <name>winsupport.h</name>
    <path>/usr/src/veins-veins-5.0/src/veins/base/utils/</path>
    <filename>winsupport_8h</filename>
  </compound>
  <compound kind="class">
    <name>veins::AccessModuleWrap</name>
    <filename>classveins_1_1_access_module_wrap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>wrapType</name>
      <anchorfile>classveins_1_1_access_module_wrap.html</anchorfile>
      <anchor>a3154186826fb0fbf44f49cb9367d3cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AccessModuleWrap</name>
      <anchorfile>classveins_1_1_access_module_wrap.html</anchorfile>
      <anchor>a8abce0f4f971ed0705121b53d2c287ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *const</type>
      <name>get</name>
      <anchorfile>classveins_1_1_access_module_wrap.html</anchorfile>
      <anchor>aba35d824475dcf42954f0f8e464b4f00</anchor>
      <arglist>(cModule *const from=nullptr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>pModule</name>
      <anchorfile>classveins_1_1_access_module_wrap.html</anchorfile>
      <anchor>a5b4def00ac88865e3930a22f0815f389</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::AddressingInterface</name>
    <filename>classveins_1_1_addressing_interface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual LAddress::L2Type</type>
      <name>myMacAddr</name>
      <anchorfile>classveins_1_1_addressing_interface.html</anchorfile>
      <anchor>a5234c74da9e41e453740f46dfb6e3c1e</anchor>
      <arglist>(const cModule *mac) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LAddress::L3Type</type>
      <name>myNetwAddr</name>
      <anchorfile>classveins_1_1_addressing_interface.html</anchorfile>
      <anchor>a773884c3a83837574e9f8d849237ce21</anchor>
      <arglist>(const cModule *netw) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::AnalogueModel</name>
    <filename>classveins_1_1_analogue_model.html</filename>
    <base>veins::HasLogProxy</base>
    <member kind="function">
      <type></type>
      <name>AnalogueModel</name>
      <anchorfile>classveins_1_1_analogue_model.html</anchorfile>
      <anchor>ae8e48ddcbc9fe0690e1ddd73135a0690</anchor>
      <arglist>(cComponent *owner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AnalogueModel</name>
      <anchorfile>classveins_1_1_analogue_model.html</anchorfile>
      <anchor>abefa864518a8e8283d857b45e4ed3c18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>classveins_1_1_analogue_model.html</anchorfile>
      <anchor>af6ceae390c5e923275d30b3fa2789e17</anchor>
      <arglist>(Signal *signal)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>neverIncreasesPower</name>
      <anchorfile>classveins_1_1_analogue_model.html</anchorfile>
      <anchor>adc6adc5056bf289f280b6d1254512cb9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::AnnotationManager::Annotation</name>
    <filename>classveins_1_1_annotation_manager_1_1_annotation.html</filename>
    <member kind="function">
      <type></type>
      <name>Annotation</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>a7af18079c89ffe6e0adc729acfa02ebb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Annotation</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>a78aac1438ac238c7dcaccf6eb1979599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Group *</type>
      <name>group</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>a4be91546ed5c91ed0eef09f00d56e2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cFigure *</type>
      <name>figure</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>abf03b0ce25889a7292044dc1d381c135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>traciPoiIds</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>a1cedd6b8101e432e376bd21d25107528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>traciLineIds</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>a17a6e8a94c0169ec1bf327316e64687b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>traciPolygonsIds</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>a64d309200d5386019c9a25ede8b97f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::AnnotationDummy</name>
    <filename>classveins_1_1_annotation_dummy.html</filename>
    <member kind="function">
      <type></type>
      <name>~AnnotationDummy</name>
      <anchorfile>classveins_1_1_annotation_dummy.html</anchorfile>
      <anchor>aa339a73a357594e733e67047adea53ff</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::AnnotationManager</name>
    <filename>classveins_1_1_annotation_manager.html</filename>
    <class kind="class">veins::AnnotationManager::Annotation</class>
    <class kind="class">veins::AnnotationManager::Group</class>
    <class kind="class">veins::AnnotationManager::Line</class>
    <class kind="class">veins::AnnotationManager::Point</class>
    <class kind="class">veins::AnnotationManager::Polygon</class>
    <member kind="function">
      <type></type>
      <name>~AnnotationManager</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>abe35c5f8aff4a424d43e80cb8ad28206</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>af1b9b5eacc0afa3a90fbf48a7f00a539</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a7cd6933413793d71e8494c4561f635e0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a3e4a47c7b4bdeef090c4bb77c2813f3a</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a15b1bc8dc418c545c8ff4e2b1f14833b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleParameterChange</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>aa368e9f91a7b1ae9f0ed505ec2153044</anchor>
      <arglist>(const char *parname) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFromXml</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a946e1967906528815fbe61cb8cfb2986</anchor>
      <arglist>(cXMLElement *xml)</arglist>
    </member>
    <member kind="function">
      <type>Group *</type>
      <name>createGroup</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>ac579f5fef019464b16a2e93a36868274</anchor>
      <arglist>(std::string title=&quot;untitled&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Point *</type>
      <name>drawPoint</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a336eefa4f1f95638dcf5d5e5db0a93e9</anchor>
      <arglist>(Coord p, std::string color, std::string text, Group *group=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Line *</type>
      <name>drawLine</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a4de648d17c042138a6c8b8638e945f4b</anchor>
      <arglist>(Coord p1, Coord p2, std::string color, Group *group=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Polygon *</type>
      <name>drawPolygon</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a7623e3423953cbe2f3db0133967829b7</anchor>
      <arglist>(std::list&lt; Coord &gt; coords, std::string color, Group *group=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Polygon *</type>
      <name>drawPolygon</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a51c3cecfcf9fd3f315177b07bb7ab040</anchor>
      <arglist>(std::vector&lt; Coord &gt; coords, std::string color, Group *group=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawBubble</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a0b53a21c767d536a5a7ed72335cb9331</anchor>
      <arglist>(Coord p1, std::string text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a990948888917eff8840f899714d4e754</anchor>
      <arglist>(const Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseAll</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>af071307b3e3fad6ec12a193418a9f576</anchor>
      <arglist>(Group *group=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleErase</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>ac782dda85f42f36488d8a2eb91de6b11</anchor>
      <arglist>(simtime_t deltaT, Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a87ffa1c7edbccb8372a4551b73c73def</anchor>
      <arglist>(const Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hide</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>ae7cd5fba58d72f4351963b9a6c95e669</anchor>
      <arglist>(const Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showAll</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a15a2bcf8ab7d62b65a85c55c3960085f</anchor>
      <arglist>(Group *group=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideAll</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a25be0b4d24230db849859184c6144441</anchor>
      <arglist>(Group *group=nullptr)</arglist>
    </member>
    <member kind="variable">
      <type>class VEINS_API</type>
      <name>Group</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>ad24a6bd1e62eef819bebc1e5ed61388b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Annotation * &gt;</type>
      <name>Annotations</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a8d6299abec8ad7c79950f4e83055c6b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Group * &gt;</type>
      <name>Groups</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a2749fe9658b0e6825aeb5215ca74122c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>annotationsXml</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>ae2e488cdf69f92dda6b50b5ca1750d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; cMessage * &gt;</type>
      <name>scheduledEraseEvts</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a76bce138adbdd050944ce0a5ae3cf0bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Annotations</type>
      <name>annotations</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a8f88e23120b9acb99ed26bc8ad7ddd06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Groups</type>
      <name>groups</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a7645fb5ad8254a70300082425d5afa9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGroupFigure *</type>
      <name>annotationLayer</name>
      <anchorfile>classveins_1_1_annotation_manager.html</anchorfile>
      <anchor>a0a977fb522bdb74265d8a4c45956dd7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::AnnotationManagerAccess</name>
    <filename>classveins_1_1_annotation_manager_access.html</filename>
    <member kind="function">
      <type>AnnotationManager *</type>
      <name>getIfExists</name>
      <anchorfile>classveins_1_1_annotation_manager_access.html</anchorfile>
      <anchor>a078a458514be3927ea589e843a9bef72</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Antenna</name>
    <filename>classveins_1_1_antenna.html</filename>
    <member kind="function">
      <type></type>
      <name>Antenna</name>
      <anchorfile>classveins_1_1_antenna.html</anchorfile>
      <anchor>aa8fd5ec0167a31a59593a7ecaf99b973</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Antenna</name>
      <anchorfile>classveins_1_1_antenna.html</anchorfile>
      <anchor>a459c9db72041d26051e09c943b354347</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGain</name>
      <anchorfile>classveins_1_1_antenna.html</anchorfile>
      <anchor>a0a323bfc246428b50ca5fc97e610b0f1</anchor>
      <arglist>(Coord ownPos, Coord ownOrient, Coord otherPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLastAngle</name>
      <anchorfile>classveins_1_1_antenna.html</anchorfile>
      <anchor>a28207175e3686e99bde0ebfb3bd5eb36</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::AntennaPosition</name>
    <filename>classveins_1_1_antenna_position.html</filename>
    <member kind="function">
      <type></type>
      <name>AntennaPosition</name>
      <anchorfile>classveins_1_1_antenna_position.html</anchorfile>
      <anchor>a0aa99111db5ed6ca1596761dc8c016da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AntennaPosition</name>
      <anchorfile>classveins_1_1_antenna_position.html</anchorfile>
      <anchor>a8155502d1467d72c4b64be4eee7d7352</anchor>
      <arglist>(int id, Coord p, Coord v, simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>getPositionAt</name>
      <anchorfile>classveins_1_1_antenna_position.html</anchorfile>
      <anchor>a08154432e1365873de146371cc996948</anchor>
      <arglist>(simtime_t t=simTime()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameAntenna</name>
      <anchorfile>classveins_1_1_antenna_position.html</anchorfile>
      <anchor>aeb770f6ff3b2da1267e4122e6de4ae16</anchor>
      <arglist>(const AntennaPosition &amp;o) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id</name>
      <anchorfile>classveins_1_1_antenna_position.html</anchorfile>
      <anchor>a2dc12b2f2872faf4287ecc06b8332cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>p</name>
      <anchorfile>classveins_1_1_antenna_position.html</anchorfile>
      <anchor>ad9851ba539af8d1591d0a79cbc26f015</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>v</name>
      <anchorfile>classveins_1_1_antenna_position.html</anchorfile>
      <anchor>a246caa4f41f811aec52b8e663e565c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>t</name>
      <anchorfile>classveins_1_1_antenna_position.html</anchorfile>
      <anchor>a58cbb5e77833d5370b50ea2a54fc8b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>undef</name>
      <anchorfile>classveins_1_1_antenna_position.html</anchorfile>
      <anchor>a9924873494c683bda42b1882a9f3fb0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BaseApplLayer</name>
    <filename>classveins_1_1_base_appl_layer.html</filename>
    <base>veins::BaseLayer</base>
    <member kind="enumeration">
      <type></type>
      <name>BaseApplMessageKinds</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a3c7a0a0d7bd1e01ced1a1f29dcaeead8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_APPL_MESSAGE_KIND</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a3c7a0a0d7bd1e01ced1a1f29dcaeead8a2353fe19ef4f6327b49d52b4da60d1a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BaseApplControlKinds</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a67b270826a91049dfde007acb645f5fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_APPL_CONTROL_KIND</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a67b270826a91049dfde007acb645f5faaeaf2ab0cf469065bc9ecc05c898119ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_APPL_MESSAGE_KIND</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a3c7a0a0d7bd1e01ced1a1f29dcaeead8a2353fe19ef4f6327b49d52b4da60d1a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_APPL_CONTROL_KIND</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a67b270826a91049dfde007acb645f5faaeaf2ab0cf469065bc9ecc05c898119ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseApplLayer</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>ab05a1dfa2440098b14e0815bf6904942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseApplLayer</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>ac83c7fa6387c99bed5a6c9bc1978c653</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a709299823ec0e1a8055407ceb765f7f8</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDelayedDown</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a08d91ffcf2598556db4dd3ba845e4979</anchor>
      <arglist>(cMessage *, simtime_t_cref)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const LAddress::L3Type</type>
      <name>myApplAddr</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a1d8d6d85adcaa9ee67f50a8d647217f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a201b654e99ce1eaecd2459b9294bb3a1</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>aed61d5c805d8fa54cd9c9559a80438b9</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerControl</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a1c88a5e6465c482ca6eaba394f9e6ea9</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a43a6dbfcfa5a9047985ddc94a351484d</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUpperControl</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>afa2608aa423f7b438126d16df8b0988c</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a804ddd953b874540a765e18f8e38f5a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a201b654e99ce1eaecd2459b9294bb3a1</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>aed61d5c805d8fa54cd9c9559a80438b9</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerControl</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a1c88a5e6465c482ca6eaba394f9e6ea9</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>a43a6dbfcfa5a9047985ddc94a351484d</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUpperControl</name>
      <anchorfile>classveins_1_1_base_appl_layer.html</anchorfile>
      <anchor>afa2608aa423f7b438126d16df8b0988c</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BaseBattery</name>
    <filename>classveins_1_1_base_battery.html</filename>
    <base>veins::BaseModule</base>
    <member kind="function">
      <type></type>
      <name>BaseBattery</name>
      <anchorfile>classveins_1_1_base_battery.html</anchorfile>
      <anchor>ae9d2fc8317df572445638d9ec1ea0fb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseBattery</name>
      <anchorfile>classveins_1_1_base_battery.html</anchorfile>
      <anchor>af40204171f7f8fbbed00a044a9dc4d63</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>registerDevice</name>
      <anchorfile>classveins_1_1_base_battery.html</anchorfile>
      <anchor>a56c7c1f4c6348fd0dfab9a4219797d5c</anchor>
      <arglist>(const std::string &amp;name, int numAccounts)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classveins_1_1_base_battery.html</anchorfile>
      <anchor>affd93b0b525452e73a068c5b3dac7411</anchor>
      <arglist>(int drainID, DrawAmount &amp;amount, int account)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getVoltage</name>
      <anchorfile>classveins_1_1_base_battery.html</anchorfile>
      <anchor>a465a5c7a977f20a3b83847f5219b53f3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateResidualRelative</name>
      <anchorfile>classveins_1_1_base_battery.html</anchorfile>
      <anchor>a81a6b412728c9035574e67fe9d884f63</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateResidualAbs</name>
      <anchorfile>classveins_1_1_base_battery.html</anchorfile>
      <anchor>ad845158e4bca964efa56062c514094e2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual HostState::States</type>
      <name>getState</name>
      <anchorfile>classveins_1_1_base_battery.html</anchorfile>
      <anchor>a7af01ec0b6155ac88ea53ca848d204b4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getVoltage</name>
      <anchorfile>classveins_1_1_base_battery.html</anchorfile>
      <anchor>a465a5c7a977f20a3b83847f5219b53f3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateResidualRelative</name>
      <anchorfile>classveins_1_1_base_battery.html</anchorfile>
      <anchor>a81a6b412728c9035574e67fe9d884f63</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateResidualAbs</name>
      <anchorfile>classveins_1_1_base_battery.html</anchorfile>
      <anchor>ad845158e4bca964efa56062c514094e2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual HostState::States</type>
      <name>getState</name>
      <anchorfile>classveins_1_1_base_battery.html</anchorfile>
      <anchor>a7af01ec0b6155ac88ea53ca848d204b4</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BaseConnectionManager</name>
    <filename>classveins_1_1_base_connection_manager.html</filename>
    <class kind="class">veins::BaseConnectionManager::CoordSet</class>
    <class kind="class">veins::BaseConnectionManager::GridCoord</class>
    <member kind="function">
      <type></type>
      <name>~BaseConnectionManager</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>ae45f6769029cdbd513a1eda7dc866307</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a46977dbf9da4adaee081af55b10f51a1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a084bb7d054e50e3d276da4ce0b7bb5b0</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>registerNic</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a35d8c27aeacff47e0e62135ffe065078</anchor>
      <arglist>(cModule *nic, ChannelAccess *chAccess, Coord nicPos, Heading heading)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unregisterNic</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a3e3f6ea1da0e15af3c91493dcfdc22ba</anchor>
      <arglist>(cModule *nic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNicPos</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>af264b3c891bde0a49dd003c584c997ac</anchor>
      <arglist>(int nicID, Coord newPos, Heading heading)</arglist>
    </member>
    <member kind="function">
      <type>const NicEntry::GateList &amp;</type>
      <name>getGateList</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a32172876aa44e95bce3e7d4484c041ec</anchor>
      <arglist>(int nicID) const</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>getOutGateTo</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>ac1b3a4651dc5922a145024fb03d6daa4</anchor>
      <arglist>(const NicEntry *nic, const NicEntry *targetNic) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, NicEntry * &gt;</type>
      <name>NicEntries</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>ab128740fc9173de78b38b9ab49a62e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NicEntries &gt;</type>
      <name>RowVector</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a9ceef145ae32eb9dadcb6640bf329da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; RowVector &gt;</type>
      <name>NicMatrix</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a29645ed77696c5ff8e5bd10a074ca386</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NicMatrix &gt;</type>
      <name>NicCube</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a8492fa38d22ac599ef0e3e3be2b1d191</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a99dc9770c0ae535dc458586206a3235f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerNicExt</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a6851b0f5e82df7cfd187c283faf0eca5</anchor>
      <arglist>(int nicID)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateConnections</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>af87d8c9c33b54eb6bf8a5f43e6e36a96</anchor>
      <arglist>(int nicID, Coord oldPos, Coord newPos)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInRange</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a418d9fb4151ff38840838a94189ba8b6</anchor>
      <arglist>(NicEntries::mapped_type pFromNic, NicEntries::mapped_type pToNic)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NicEntries</type>
      <name>nics</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a36034e32ece85339c4a5dff4296f2d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendDirect</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a50fd81ddd71878f6685fe529d191b5cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord *</type>
      <name>playgroundSize</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>ab1748b778e0ad22df43c9566f506f2ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxInterferenceDistance</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a8d43ff82a0223dc5455a714d7f521866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistSquared</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>ad9189b4b380ea53b274368341b6e61af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>ad9cf685973ec3166713c281a5d85a78b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>drawMIR</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a7cc291f8834b3869812916b6b29671d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NicCube</type>
      <name>nicGrid</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a2f5e0903008a9e319f014a7e5c7a0236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>findDistance</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>ac590f3fb15e1dc2894cbdc35887e433d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridCoord</type>
      <name>gridDim</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>ac6810cfd2f746e70088493cfa122fc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateNicConnections</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>af36a4fd1f31773f63187cc9717441a98</anchor>
      <arglist>(NicEntries &amp;nmap, NicEntries::mapped_type nic)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkGrid</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a063c137e5a6d73ff846321b511d48a32</anchor>
      <arglist>(GridCoord &amp;oldCell, GridCoord &amp;newCell, int id)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GridCoord</type>
      <name>getCellForCoordinate</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a7f0e7ff7533bb1f5e3c9bb2c2c0db261</anchor>
      <arglist>(const Coord &amp;c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NicEntries &amp;</type>
      <name>getCellEntries</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>ae776ac81a8f88a9afba710afaf8573b8</anchor>
      <arglist>(GridCoord &amp;cell)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>wrapIfTorus</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a77e53c22a7c607482398632b85396a6c</anchor>
      <arglist>(int value, int max)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillUnionWithNeighbors</name>
      <anchorfile>classveins_1_1_base_connection_manager.html</anchorfile>
      <anchor>a9b524c0f46ec4bb2ade902ac0855cac5</anchor>
      <arglist>(CoordSet &amp;gridUnion, GridCoord cell)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BaseDecider</name>
    <filename>classveins_1_1_base_decider.html</filename>
    <base>veins::Decider</base>
    <member kind="enumeration">
      <type></type>
      <name>BaseDeciderControlKinds</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a289da9983d009dbf7b9e797bc75375ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PACKET_DROPPED</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a289da9983d009dbf7b9e797bc75375ada4286a6780ddef1c25012655d33f80b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_DECIDER_CONTROL_KIND</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a289da9983d009dbf7b9e797bc75375ada6a76f21fc3632a9202e73d65d83c26e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PACKET_DROPPED</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a289da9983d009dbf7b9e797bc75375ada4286a6780ddef1c25012655d33f80b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_DECIDER_CONTROL_KIND</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a289da9983d009dbf7b9e797bc75375ada6a76f21fc3632a9202e73d65d83c26e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseDecider</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a39b31f3f49fec7d741f4514c2020d1b8</anchor>
      <arglist>(cComponent *owner, DeciderToPhyInterface *phy, double minPowerLevel, int myIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BaseDecider</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>aa54d0812e49549d9476ea7185e94ab9e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>processSignal</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a8b488dcd86bfc2749763682ea3589800</anchor>
      <arglist>(AirFrame *frame) override</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>SignalState</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>aff19b429dd4aeea4e44a45ff42159a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>NEW</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>aff19b429dd4aeea4e44a45ff42159a01a0a4897d2956b92c80a3044f8989f7e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>EXPECT_HEADER</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>aff19b429dd4aeea4e44a45ff42159a01ae3c1b40d4a361e3a4d07590366e7e02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>EXPECT_END</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>aff19b429dd4aeea4e44a45ff42159a01a4b79323b1e21025be3bccd35d9a34316</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; AirFrame *, int &gt;</type>
      <name>ReceivedSignal</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a3d0bcea9afe64ce6394e752ac187e782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>NEW</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>aff19b429dd4aeea4e44a45ff42159a01a0a4897d2956b92c80a3044f8989f7e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>EXPECT_HEADER</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>aff19b429dd4aeea4e44a45ff42159a01ae3c1b40d4a361e3a4d07590366e7e02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>EXPECT_END</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>aff19b429dd4aeea4e44a45ff42159a01a4b79323b1e21025be3bccd35d9a34316</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processNewSignal</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a6a480f87157d0509c0c1fccf94ea9fef</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalHeader</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a586529178d95663f70072fe46d166efa</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalEnd</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>ab9cfef6c04e12d2524d45e881f341300</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processUnknownSignal</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>ac054bb9bbda73689caf6c7cd7e55c8de</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getSignalState</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>aa41d7cb370ba4069108ede77732b3bc8</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelIdleStatus</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>ae535b44e34061014fe282c36c27b0193</anchor>
      <arglist>(bool isIdle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a1eb9539d907f101c8d30798f6ca03337</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, AirFrameVector &amp;out)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minPowerLevel</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a9dc0181b8686c7159b4c893de6587798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReceivedSignal</type>
      <name>currentSignal</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a24b37764cdb900862ab86f61578ceb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isChannelIdle</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>a7d849fd67e9353e1716752e425af8f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>classveins_1_1_base_decider.html</anchorfile>
      <anchor>ad282af3fa4d5a606dcf400bb087b205e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::ChannelInfo::BaseIntersectionIterator</name>
    <filename>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</filename>
    <templarg>C</templarg>
    <templarg>ItMatrix</templarg>
    <templarg>ItList</templarg>
    <member kind="function">
      <type></type>
      <name>BaseIntersectionIterator</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a1c67a231b6b27bdaa6a5f4dcf28915b3</anchor>
      <arglist>(C *airFrames, simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function">
      <type>AirFrame *</type>
      <name>next</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>ac8cb02d11bbba3ab83fe39a400aa320d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>C *</type>
      <name>intervals</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>abe2cd4c422bb3a4fb961e02e5832b03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>from</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>ab200ae19553df517517f90ff9a3cde10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>to</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a42f8cf19289126816fdae6cb4aa1c0f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ItMatrix</type>
      <name>endIt</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>afd8b3c823042d07b5e3b0b3359e2151f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ItList</type>
      <name>startIt</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a37833ee62d43aea203fcba427d5769e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alreadyNext</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a5f23745e1a93704d96bdf46d79ae846d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseIntersectionIterator&lt; AirFrameMatrix, AirFrameMatrix::iterator, AirFrameTimeList::iterator &gt;</name>
    <filename>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>BaseIntersectionIterator</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a1c67a231b6b27bdaa6a5f4dcf28915b3</anchor>
      <arglist>(AirFrameMatrix *airFrames, simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function">
      <type>AirFrame *</type>
      <name>next</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>ac8cb02d11bbba3ab83fe39a400aa320d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>AirFrameMatrix *</type>
      <name>intervals</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>abe2cd4c422bb3a4fb961e02e5832b03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>from</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>ab200ae19553df517517f90ff9a3cde10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>to</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a42f8cf19289126816fdae6cb4aa1c0f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AirFrameMatrix::iterator</type>
      <name>endIt</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>afd8b3c823042d07b5e3b0b3359e2151f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AirFrameTimeList::iterator</type>
      <name>startIt</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a37833ee62d43aea203fcba427d5769e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alreadyNext</name>
      <anchorfile>classveins_1_1_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a5f23745e1a93704d96bdf46d79ae846d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BaseLayer</name>
    <filename>classveins_1_1_base_layer.html</filename>
    <base>veins::BatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>BaseLayer</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a68ab3ed1e8897eea805ed32c207db233</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseLayer</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>ab46d83d656d86cf3d2c68f4c4844c8e1</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BaseLayer</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>aa18641762e8011c76674b1691ced32fa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a5619505dba58f2669af33f9e23f6f1ad</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a898e1733d0a0866ec884b6e950385fc6</anchor>
      <arglist>(cMessage *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>afa2dfd0f48477af339ae46dd49d7a52b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignal_t</type>
      <name>catPacketSignal</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a4c02bc79be29c706d412b0ee0f48a56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignal_t</type>
      <name>catPassedMsgSignal</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>add705c972491c563cbc34e34934f6fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignal_t</type>
      <name>catDroppedPacketSignal</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>ac6481353f4e23bac969902294b2ca6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a215376a4259416145ddf74444937161b</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a69c14c083e420c38a313894452c88fa7</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a3ea3bc153bc1e987eb9fa3b9eaeb2bce</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a61b647d5c030ba1b9a433e86c9faa48a</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a6dfe8aca6c874ee299bfd9ee9c8283d2</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a1873d6e3fc6d92cf8482b39f1c5ac6c8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>adbf061566606041db811b519f0400ed5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlUp</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>aa1190a06fb4dfb15d8ff001468335dc8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlDown</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a6d01a0f56978740d7617c2e338858cc3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recordPacket</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a33f4f320f4b6c4ec48651847338ff47f</anchor>
      <arglist>(PassedMessage::direction_t dir, PassedMessage::gates_t gate, const cMessage *m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PassedMessage *</type>
      <name>passedMsg</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a3f9ac20fc245267d9d0ace8d0ff0e02e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerIn</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>aa87cf9162148715bf647530354afbba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerOut</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a7e800dd43a12f7daf04d139c5f0155b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerLayerIn</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a62dc879c66b177894c58eacbb5902f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerLayerOut</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a9c82c5aa1e4947d4f0885748f11062c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlIn</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a5eefeff92d566feaa5b695e9b3095128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a612d8e239c1d7dc90d6d6f6794804193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlIn</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a1a287d0c02a62574a1ca916c5f17d17b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlOut</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>ab85e57447cecfc29d9aafbb577429b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerIn</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>aa87cf9162148715bf647530354afbba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerOut</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a7e800dd43a12f7daf04d139c5f0155b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerLayerIn</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a62dc879c66b177894c58eacbb5902f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerLayerOut</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a9c82c5aa1e4947d4f0885748f11062c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlIn</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a5eefeff92d566feaa5b695e9b3095128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a612d8e239c1d7dc90d6d6f6794804193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlIn</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a1a287d0c02a62574a1ca916c5f17d17b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlOut</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>ab85e57447cecfc29d9aafbb577429b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a215376a4259416145ddf74444937161b</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a69c14c083e420c38a313894452c88fa7</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a3ea3bc153bc1e987eb9fa3b9eaeb2bce</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a61b647d5c030ba1b9a433e86c9faa48a</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a6dfe8aca6c874ee299bfd9ee9c8283d2</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a1873d6e3fc6d92cf8482b39f1c5ac6c8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>adbf061566606041db811b519f0400ed5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlUp</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>aa1190a06fb4dfb15d8ff001468335dc8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlDown</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a6d01a0f56978740d7617c2e338858cc3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recordPacket</name>
      <anchorfile>classveins_1_1_base_layer.html</anchorfile>
      <anchor>a33f4f320f4b6c4ec48651847338ff47f</anchor>
      <arglist>(PassedMessage::direction_t dir, PassedMessage::gates_t gate, const cMessage *m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BaseMacLayer</name>
    <filename>classveins_1_1_base_mac_layer.html</filename>
    <base>veins::BaseLayer</base>
    <member kind="enumeration">
      <type></type>
      <name>BaseMacMessageKinds</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a67ee22bbbc559968d19b0c5614aa8151</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_MAC_MESSAGE_KIND</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a67ee22bbbc559968d19b0c5614aa8151af938de094dc97d1daadee6d5eb35726b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BaseMacControlKinds</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a127b08451364f54f850e92a69528c9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX_OVER</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a127b08451364f54f850e92a69528c9bca4c6be73dc7fa156e1ad9fe0af31c7942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PACKET_DROPPED</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a127b08451364f54f850e92a69528c9bcaa7917df430062028bf1a64fd0df3927a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_MAC_CONTROL_KIND</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a127b08451364f54f850e92a69528c9bca09b7d5029577bd0141fbfb335a45aaae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_MAC_MESSAGE_KIND</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a67ee22bbbc559968d19b0c5614aa8151af938de094dc97d1daadee6d5eb35726b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX_OVER</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a127b08451364f54f850e92a69528c9bca4c6be73dc7fa156e1ad9fe0af31c7942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PACKET_DROPPED</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a127b08451364f54f850e92a69528c9bcaa7917df430062028bf1a64fd0df3927a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_MAC_CONTROL_KIND</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a127b08451364f54f850e92a69528c9bca09b7d5029577bd0141fbfb335a45aaae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMacLayer</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>af2515ab7f7edfa3352571fb98d59e777</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMacLayer</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a993c8186be3ca212fd1410ae3164b93d</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a689fa06067e9df73c7fa19512fe91117</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>const LAddress::L2Type &amp;</type>
      <name>getMACAddress</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a51fdaa37f4bb9ace9760e8cad99d6c77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerInterface</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>adc87295362ca7859cb6fe2a5bbe3c90d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a00e3c0935a4e53b889a1c32848f1fed0</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a65b38b9b47cec29bd5be9613271585c3</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a65dd97d0cbe0714efe2af80af3267faf</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerControl</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a5558c9ff946caf311858ee446259e73c</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUpperControl</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a5759ca26b1f2094c7a4d13fc76d0f4fa</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsMsg</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>ab5c40c53eda6e5a5041bddebfab6e0b6</anchor>
      <arglist>(MacPkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MacPkt *</type>
      <name>encapsMsg</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a32d47cbd6940c09071e0f0e777cf6716</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BaseConnectionManager *</type>
      <name>getConnectionManager</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>ad7e8421f697848e8122e2261543e7780</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getUpperDestinationFromControlInfo</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a64013bf689c9da4e79fa48116e14730e</anchor>
      <arglist>(const cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cObject *const</type>
      <name>setUpControlInfo</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a7ff1f42ff72aee9670a012ebffb54881</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacToPhyInterface *</type>
      <name>phy</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a80e771b95aca25a116accb22ce387340</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a4a494585d39704f5f6d1331fb7f91036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>myMacAddr</name>
      <anchorfile>classveins_1_1_base_mac_layer.html</anchorfile>
      <anchor>a06ecaaf646c25c71d29852443be01c22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BaseMobility</name>
    <filename>classveins_1_1_base_mobility.html</filename>
    <base>veins::BatteryAccess</base>
    <member kind="enumeration">
      <type></type>
      <name>BorderPolicy</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a0bb971331456745039b62339d4979faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFLECT</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a0bb971331456745039b62339d4979faaabf24f35fa06c27ea750e997dd0413807</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRAP</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a0bb971331456745039b62339d4979faaa82933d4ea9d9ecd0589c4a94c1776d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLACERANDOMLY</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a0bb971331456745039b62339d4979faaa84549715391226af2632599b6e6e779c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RAISEERROR</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a0bb971331456745039b62339d4979faaac506c9410fc516d69717fbbf8c416a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BaseMobilityMsgKinds</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a258d8a20e47f5b6f5b94850a8c7a65ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOVE_HOST</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a258d8a20e47f5b6f5b94850a8c7a65ffa509f7e6756bc56bc8d121c6db622b15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOVE_TO_BORDER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a258d8a20e47f5b6f5b94850a8c7a65ffa85f77df784c3b119d7cebb136653bb5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_MOBILITY_KIND</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a258d8a20e47f5b6f5b94850a8c7a65ffa088301768ba7cde84e0fed3853b5917c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BorderHandling</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOWHERE</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934eba98918acc3a2b60b4452ffb5993896278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>X_SMALLER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934ebac59f182ce965cec98c5af818d3956816</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>X_BIGGER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934ebae3c7516b4b4d2331442ff19712f87461</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y_SMALLER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934eba61407b402d97b410f270cacbda9061cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y_BIGGER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934ebaee145768c50023f09cce59dbfbd11ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z_SMALLER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934eba90e6b4de1def5f0590c790e4c7144ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z_BIGGER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934ebab90c5a4730a70a72e7e6970c4ecad816</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFLECT</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a0bb971331456745039b62339d4979faaabf24f35fa06c27ea750e997dd0413807</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRAP</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a0bb971331456745039b62339d4979faaa82933d4ea9d9ecd0589c4a94c1776d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLACERANDOMLY</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a0bb971331456745039b62339d4979faaa84549715391226af2632599b6e6e779c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RAISEERROR</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a0bb971331456745039b62339d4979faaac506c9410fc516d69717fbbf8c416a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOVE_HOST</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a258d8a20e47f5b6f5b94850a8c7a65ffa509f7e6756bc56bc8d121c6db622b15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOVE_TO_BORDER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a258d8a20e47f5b6f5b94850a8c7a65ffa85f77df784c3b119d7cebb136653bb5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_MOBILITY_KIND</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a258d8a20e47f5b6f5b94850a8c7a65ffa088301768ba7cde84e0fed3853b5917c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOWHERE</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934eba98918acc3a2b60b4452ffb5993896278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>X_SMALLER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934ebac59f182ce965cec98c5af818d3956816</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>X_BIGGER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934ebae3c7516b4b4d2331442ff19712f87461</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y_SMALLER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934eba61407b402d97b410f270cacbda9061cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y_BIGGER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934ebaee145768c50023f09cce59dbfbd11ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z_SMALLER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934eba90e6b4de1def5f0590c790e4c7144ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z_BIGGER</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1f0f0d8f8b5d314ee1f6c0a76ce934ebab90c5a4730a70a72e7e6970c4ecad816</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMobility</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a15457745146da27bc0a05dc3a534406e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMobility</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a911e98f6eb04ab67801e206f57e9daec</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a64b618ee6a35eaebfcfba7d9266be4c8</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>ac865e9d430a27e6a3076c0d9293fef35</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a0442a403b23e52fe34834e0385c08f0c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getPositionAt</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>abd802d0e5d919085a5422b99cd7c377d</anchor>
      <arglist>(simtime_t_cref stWhen) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentOrientation</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a9e647c3474d6195812dbe1680b687df3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a3e1f7fde5dd3ba602725b30d861681af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentDirection</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a8bc4c16521a69ad6192b78e84be3e026</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignal_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a830d988623baf18a40b7af3d0ad19b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>iconSizeTagToSize</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a27e651dbd0a13f5f1a40c8ac531fc367</anchor>
      <arglist>(const char *tag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>iconSizeToTag</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a4385f329f6d9df7294297c98028083e2</anchor>
      <arglist>(double size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a70b2b357a4cef14850cd4edd440a13a7</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBorderMsg</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a1cd10753592e8eeb018d8f774ce862c6</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a44bb0aa81c28c6e56dd840cfe8afdc8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updatePosition</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a291eed23c07d4693a5fa4164aa80934e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeX</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a86c357c59de6f58dc9916706ef1b4f6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeY</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>acb8f54f076e73b8760cf3f2421a68ad6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeZ</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a61602db99644b3a1fe849eb02c8286cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>ad1ddc43c422d35b51b87d98a038b055e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleIfOutside</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>aae36006995d117a723134cbe1fee5e90</anchor>
      <arglist>(BorderPolicy, Coord &amp;, Coord &amp;, Coord &amp;, double &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>aa66c98343f5a3ead6adf5a04bc9b1adb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BorderHandling</type>
      <name>checkIfOutside</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>ab69f42caa7932524bf470f0799b4aac7</anchor>
      <arglist>(Coord, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>goToBorder</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a3bf65a049293dc4c7043554c04555bdc</anchor>
      <arglist>(BorderPolicy, BorderHandling, Coord &amp;, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reflectCoordinate</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a6c817348be2c3586777a85bb60e2b3f1</anchor>
      <arglist>(BorderHandling border, Coord &amp;c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reflectIfOutside</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>ab9e4cd0caa3fc245ba934f5f5bd9fc49</anchor>
      <arglist>(BorderHandling, Coord &amp;, Coord &amp;, Coord &amp;, double &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wrapIfOutside</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a78f392149c0f8185e07dc9a51286bf85</anchor>
      <arglist>(BorderHandling, Coord &amp;, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeRandomlyIfOutside</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a933475f97d6ab7bf834e4d07beda131b</anchor>
      <arglist>(Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>aba221195b5a84282e00111308a8b41da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Move</type>
      <name>move</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a29f2fdadeaa29128531f1920af7909ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>ac27c139d035f07c7f125c22e9a43bc11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>moveMsg</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a8ef99ffc087f3090e75a678c24fdd09c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>scaleNodeByDepth</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a848e9772f98156d0daefeafaa10e0684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>playgroundScaleX</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a28accc0e271ee122b04cb0ddc7f61e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>playgroundScaleY</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a89e95ed12036daa96c81385441c19785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origDisplayWidth</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>aa8b6114fec14d5491a0d235df3bf137f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origDisplayHeight</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>aa98d26227107177e2666f865e2d4a3ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origIconSize</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>ad5a33f861be89173c11d9bba71d483f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleIfOutside</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>aae36006995d117a723134cbe1fee5e90</anchor>
      <arglist>(BorderPolicy, Coord &amp;, Coord &amp;, Coord &amp;, double &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>aa66c98343f5a3ead6adf5a04bc9b1adb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BorderHandling</type>
      <name>checkIfOutside</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>ab69f42caa7932524bf470f0799b4aac7</anchor>
      <arglist>(Coord, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>goToBorder</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a3bf65a049293dc4c7043554c04555bdc</anchor>
      <arglist>(BorderPolicy, BorderHandling, Coord &amp;, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reflectCoordinate</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a6c817348be2c3586777a85bb60e2b3f1</anchor>
      <arglist>(BorderHandling border, Coord &amp;c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reflectIfOutside</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>ab9e4cd0caa3fc245ba934f5f5bd9fc49</anchor>
      <arglist>(BorderHandling, Coord &amp;, Coord &amp;, Coord &amp;, double &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wrapIfOutside</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a78f392149c0f8185e07dc9a51286bf85</anchor>
      <arglist>(BorderHandling, Coord &amp;, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeRandomlyIfOutside</name>
      <anchorfile>classveins_1_1_base_mobility.html</anchorfile>
      <anchor>a933475f97d6ab7bf834e4d07beda131b</anchor>
      <arglist>(Coord &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BaseModule</name>
    <filename>classveins_1_1_base_module.html</filename>
    <member kind="function">
      <type></type>
      <name>BaseModule</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a32a85543320f15e3852fc15201acd492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseModule</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>ab8e21b1eab02b58e24ab06858faa5104</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a66e943d61eb3d43e5a999ccbaf010fd9</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>ae0c3403e21b772d9bc3be6eb7bdaac66</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>logName</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a8f33836785d4804800dfcc6ab78fa720</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const cModule *const</type>
      <name>getNode</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a7a97c20a3c68d86b26e37c76fd000930</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receiveSignal</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a16da8d7ff9635f5b3db51d16de3f208c</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a5ec2b1374c1c66437b80ff93790cb30e</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a44220aa650488eee8ad121f8bc599265</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>switchHostState</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a2edf4477674604a8c2eb2b95e952694a</anchor>
      <arglist>(HostState::States state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *const</type>
      <name>findHost</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a1d2d2af49918dfb9ae036b1d086b123a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const cModule *const</type>
      <name>findHost</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a99fd623de9f68bca4116357388d751dd</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a61d9ad2276dd1a7cf2fa9625b592e741</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a00b48623277fe2fc3c2f5ee1fa3096d6</anchor>
      <arglist>(cComponent *component, simsignal_t signalID) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>notAffectedByHostState</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a8ce8e07777ddb6f48df194f711ea4e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignal_t</type>
      <name>catHostStateSignal</name>
      <anchorfile>classveins_1_1_base_module.html</anchorfile>
      <anchor>a8f612e2c10904def7e6652ea1dd65e80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BasePhyLayer</name>
    <filename>classveins_1_1_base_phy_layer.html</filename>
    <base>veins::ChannelAccess</base>
    <base>veins::DeciderToPhyInterface</base>
    <base>veins::MacToPhyInterface</base>
    <member kind="function">
      <type></type>
      <name>~BasePhyLayer</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a122b35f2e9b3130534d9ef1a807a31a2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aa94507957355d000701f5d05a1c6cb8a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRadioState</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>ae2b3e3d388bacd0aea4f9a7780ce395f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aefafbb15daa91c819c4d25e7a9c38b71</anchor>
      <arglist>(int rs) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentRadioChannel</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a40cb359f6d308c4fded8070e31073afc</anchor>
      <arglist>(int newRadioChannel) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a47271351f82411c3fea318d038577717</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNbRadioChannels</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a509192bf2e63c70d5a5e3b3d79aa0169</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getChannelInfo</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aeb30108998ff4015ae0e63cee13d4586</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNoiseFloorValue</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a89d0007c3c1791185c8ee529f6a109d8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendControlMsgToMac</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a7839a1e342516ba1cde3a001a72965f3</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendUp</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aa8a1f512941e00bd093f1d709b858fd7</anchor>
      <arglist>(AirFrame *packet, DeciderResult *result) override</arglist>
    </member>
    <member kind="function">
      <type>BaseWorldUtility *</type>
      <name>getWorldUtility</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a8228e95912a46788e82d9f9c4d9d8b55</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalar</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a3f7e4d2c74c715f5bcac17a6c7464462</anchor>
      <arglist>(const char *name, double value, const char *unit=nullptr) override</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>AirFrameState</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a64a8641e67ed395fc0aeaca0aa0d3050</anchor>
      <arglist></arglist>
      <enumvalue file="classveins_1_1_base_phy_layer.html" anchor="a64a8641e67ed395fc0aeaca0aa0d3050a79b46116a73591310a6124d4c284f9da">start_receive</enumvalue>
      <enumvalue file="classveins_1_1_base_phy_layer.html" anchor="a64a8641e67ed395fc0aeaca0aa0d3050a0639f5c0e2228ccdf3385f88f1579491">receiving</enumvalue>
      <enumvalue file="classveins_1_1_base_phy_layer.html" anchor="a64a8641e67ed395fc0aeaca0aa0d3050abe297ca2dfd11232a303503cae2af5f7">end_receive</enumvalue>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>ProtocolIds</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a9645e727e49f5c8ed7c62a7f9dadf5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>PROTOCOL_ID_GENERIC</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a9645e727e49f5c8ed7c62a7f9dadf5d3a3e62f4e8c9017d39b1922ca38f95b905</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, cMsgPar &gt;</type>
      <name>ParameterMap</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a8a57e6161b4310655b3894b0d6739719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>PROTOCOL_ID_GENERIC</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a9645e727e49f5c8ed7c62a7f9dadf5d3a3e62f4e8c9017d39b1922ca38f95b905</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>readPar</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a379b5527a61ac5dfe378691faca6c2d9</anchor>
      <arglist>(const char *parName, const T defaultValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a63e95c45ba5f46514ed9027c53216491</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a54c20b44779b724638e62f941b656f9c</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; Radio &gt;</type>
      <name>initializeRadio</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>ac4851d3dace57854b3aa03414486af65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; AnalogueModel &gt;</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a2dceabc7af52fa78ce2b973675e19e38</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; Decider &gt;</type>
      <name>getDeciderFromName</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aa38b7628ab90623a528609dd6334dbf7</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; Antenna &gt;</type>
      <name>getAntennaFromName</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a2f4ac3bf2db3af3055d8c9397d2ffe3e</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; Antenna &gt;</type>
      <name>initializeSampledAntenna1D</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>afe8f862b497716d20c4f380662a25471</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; AirFrame &gt;</type>
      <name>createAirFrame</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>afa9969e29e4da7c827662e03522abd9f</anchor>
      <arglist>(cPacket *macPkt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>attachSignal</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a5e9c914412f6eae586f5a41d5308a7f5</anchor>
      <arglist>(AirFrame *airFrame, cObject *ctrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; AirFrame &gt;</type>
      <name>encapsMsg</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>afcce43624a95c13ee83ac8d6f3086aaf</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>adb6dcf56295ceb53b34e83eb409a40a2</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finishRadioSwitching</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>ada6c556e50ead146f822dadf6ea2a472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>myProtocolId</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>ae32956b372dbacefb9c97ec6f16ffe91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isKnownProtocolId</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>ae460c42343d21773092cda8eb36cb500</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrame</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a8d6f371fa6ea6ca89cb78764a05f31dd</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a17b1d469775962d23835dd5f43a639ac</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControlMessage</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a4cab267d310b5fd6cefe613fc8dfe71d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a17088ad93f59e143ff6c7ba866a31982</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameStartReceive</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a671f083680882230b754b7e9578e6274</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameReceiving</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a9dbbcf0004b22c622ec4b06a19b4f564</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameEndReceive</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a4f8fde562c0004b498fc3294c3f54c2f</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlMessageUp</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aaa439e85a8bc20a39477055aecf04993</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMacPktUp</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>af5ac9665c3f3eaee7846ef0ba141b858</anchor>
      <arglist>(cMessage *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessageDown</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a1fe847ed3e50ccf3a3740234dfee42b1</anchor>
      <arglist>(AirFrame *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSelfMessage</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aa59aef501cadd36c94d4f82efe9b64be</anchor>
      <arglist>(cMessage *msg, simtime_t_cref time)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static short</type>
      <name>airFramePriority</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>ac5571de9711dc5adda0d4281a6a78f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>protocolId</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>af78ba2d5fe5a806587ebb2d8ff1a0de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>noiseFloorValue</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a67cd9a9b3216a553feb87e957d1fb08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minPowerLevel</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a1e9441b081777ee4e94306d43d8a41bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>recordStats</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>ac6d9da6bfa28bcd14ed4dec62e4d3b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelInfo</type>
      <name>channelInfo</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a07a9938cc0577431182a9ad014ed8e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; Radio &gt;</type>
      <name>radio</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a831c5299d9db7acdd84f73163a960ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Antenna &gt;</type>
      <name>antenna</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a076d742c168dfe7a299d76cdda61c062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; Decider &gt;</type>
      <name>decider</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a2fe0261ae991b1488cda2b10b2893f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnalogueModelList</type>
      <name>analogueModels</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a3a284dfd242861945866bbf7e1812a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnalogueModelList</type>
      <name>analogueModelsThresholding</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a6bce7264e4a4774ab87196337a0bef32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerIn</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a266ee4e127b1a9eee2df1b9331cba0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerOut</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a60516bddba6c76c5cc96da734b343836</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a30e6c5e86194913d327adae8d99d2aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlIn</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a9376bd23334704f3f9dbe2958611e98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>radioSwitchingOverTimer</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a787944c6edf3837aab2768a7567cb2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>txOverTimer</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a79d3bdb7626753d59b19146cfd851578</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a6000947aef6eecbaa9e3ff8c7e1402fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Spectrum</type>
      <name>overallSpectrum</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a31366f6d86c163087d2f64c8ae771d8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getParametersFromXML</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aa89a9272b99ab3005347301c2effc254</anchor>
      <arglist>(cXMLElement *xmlData, ParameterMap &amp;outputMap)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeAnalogueModels</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a8ea7353793eed2f1a7b0cd1caacd72e9</anchor>
      <arglist>(cXMLElement *xmlConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeDecider</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a9da4f8ffaa373a0de7895cbea524816b</anchor>
      <arglist>(cXMLElement *xmlConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeAntenna</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a6831a45d54cb89ff44836fa811d239c2</anchor>
      <arglist>(cXMLElement *xmlConfig)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrame</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a8d6f371fa6ea6ca89cb78764a05f31dd</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a17b1d469775962d23835dd5f43a639ac</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControlMessage</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a4cab267d310b5fd6cefe613fc8dfe71d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a17088ad93f59e143ff6c7ba866a31982</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameStartReceive</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a671f083680882230b754b7e9578e6274</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameReceiving</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a9dbbcf0004b22c622ec4b06a19b4f564</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameEndReceive</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a4f8fde562c0004b498fc3294c3f54c2f</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlMessageUp</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aaa439e85a8bc20a39477055aecf04993</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMacPktUp</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>af5ac9665c3f3eaee7846ef0ba141b858</anchor>
      <arglist>(cMessage *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessageDown</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a1fe847ed3e50ccf3a3740234dfee42b1</anchor>
      <arglist>(AirFrame *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSelfMessage</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aa59aef501cadd36c94d4f82efe9b64be</anchor>
      <arglist>(cMessage *msg, simtime_t_cref time)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRadioState</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>ae2b3e3d388bacd0aea4f9a7780ce395f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aefafbb15daa91c819c4d25e7a9c38b71</anchor>
      <arglist>(int rs) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentRadioChannel</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a40cb359f6d308c4fded8070e31073afc</anchor>
      <arglist>(int newRadioChannel) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a47271351f82411c3fea318d038577717</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNbRadioChannels</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a509192bf2e63c70d5a5e3b3d79aa0169</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getChannelInfo</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aeb30108998ff4015ae0e63cee13d4586</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNoiseFloorValue</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a89d0007c3c1791185c8ee529f6a109d8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendControlMsgToMac</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a7839a1e342516ba1cde3a001a72965f3</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendUp</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>aa8a1f512941e00bd093f1d709b858fd7</anchor>
      <arglist>(AirFrame *packet, DeciderResult *result) override</arglist>
    </member>
    <member kind="function">
      <type>BaseWorldUtility *</type>
      <name>getWorldUtility</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a8228e95912a46788e82d9f9c4d9d8b55</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalar</name>
      <anchorfile>classveins_1_1_base_phy_layer.html</anchorfile>
      <anchor>a3f7e4d2c74c715f5bcac17a6c7464462</anchor>
      <arglist>(const char *name, double value, const char *unit=nullptr) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BaseWorldUtility</name>
    <filename>classveins_1_1_base_world_utility.html</filename>
    <member kind="function">
      <type></type>
      <name>BaseWorldUtility</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>aff195a9524d2d3973de0bdbe19ab5ae5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>ad6800876f5c13a7bfedaa0048e4eded6</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>const Coord *</type>
      <name>getPgs</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>a08a8c00b81e5b70ab4cdfe611d4169b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>ac0e47ec8501896bb97172a70c31d7e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>a3c574ecd7a055ba2407f638ce548bc24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use2D</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>ad67073ffe5557077cd4b96fa2138c536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getUniqueAirFrameId</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>a4dd7a66a8ccbc52ff7ff43c66f832d5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const double</type>
      <name>speedOfLight</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>a425e4c8fac6fb8309ae2efd494a19fe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeIfNecessary</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>aabcceb57843568c213b0772b08971827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>playgroundSize</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>a6901c504598df65b250b8957b08d92aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorusFlag</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>a6a45ace5f1240d24bd6e5435e595b180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use2DFlag</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>a7e049f66da8d308aee3336c7c9a6eeaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>airFrameId</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>add49e88b1e582d670755b71b28929ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isInitialized</name>
      <anchorfile>classveins_1_1_base_world_utility.html</anchorfile>
      <anchor>a59b05dd627b5d12b3dae06809b98c54b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BatteryAccess</name>
    <filename>classveins_1_1_battery_access.html</filename>
    <base>veins::BaseModule</base>
    <member kind="function">
      <type></type>
      <name>BatteryAccess</name>
      <anchorfile>classveins_1_1_battery_access.html</anchorfile>
      <anchor>a91a34707835f0938bc9c1a1c470ad5fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BatteryAccess</name>
      <anchorfile>classveins_1_1_battery_access.html</anchorfile>
      <anchor>af1956d05ad1d5a1b5e3b605e7238c4f6</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerWithBattery</name>
      <anchorfile>classveins_1_1_battery_access.html</anchorfile>
      <anchor>a2286e83003b2919cbb496260a5b0d009</anchor>
      <arglist>(const std::string &amp;name, int numAccounts)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classveins_1_1_battery_access.html</anchorfile>
      <anchor>a1015e11ad7fc73f62a37e395bf686015</anchor>
      <arglist>(DrawAmount &amp;amount, int account)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drawCurrent</name>
      <anchorfile>classveins_1_1_battery_access.html</anchorfile>
      <anchor>af62a4c6ab659f7bebc16cc789c559bc6</anchor>
      <arglist>(double amount, int account)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drawEnergy</name>
      <anchorfile>classveins_1_1_battery_access.html</anchorfile>
      <anchor>a603868d7ae89b65da4af161c9470f07f</anchor>
      <arglist>(double amount, int account)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseBattery *</type>
      <name>battery</name>
      <anchorfile>classveins_1_1_battery_access.html</anchorfile>
      <anchor>abbad287c6877d824b7c35ca1b9fd01b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>deviceID</name>
      <anchorfile>classveins_1_1_battery_access.html</anchorfile>
      <anchor>ab9db846471553045b46645d80d672d86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::BBoxLookup::BBoxCell</name>
    <filename>structveins_1_1_b_box_lookup_1_1_b_box_cell.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>index</name>
      <anchorfile>structveins_1_1_b_box_lookup_1_1_b_box_cell.html</anchorfile>
      <anchor>a1fb49729455c6a7888484018baa16ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>count</name>
      <anchorfile>structveins_1_1_b_box_lookup_1_1_b_box_cell.html</anchorfile>
      <anchor>a82c51b141cdff923f057017e4bcf59fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BBoxLookup</name>
    <filename>classveins_1_1_b_box_lookup.html</filename>
    <class kind="struct">veins::BBoxLookup::BBoxCell</class>
    <class kind="struct">veins::BBoxLookup::Box</class>
    <class kind="struct">veins::BBoxLookup::Point</class>
    <member kind="function">
      <type></type>
      <name>BBoxLookup</name>
      <anchorfile>classveins_1_1_b_box_lookup.html</anchorfile>
      <anchor>a3104d5c4d87b177a61f2dd9498617963</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BBoxLookup</name>
      <anchorfile>classveins_1_1_b_box_lookup.html</anchorfile>
      <anchor>a4ef9dec8a5ff5e9744a064d9555b75a8</anchor>
      <arglist>(const std::vector&lt; Obstacle *&gt; &amp;obstacles, std::function&lt; BBoxLookup::Box(Obstacle *)&gt; makeBBox, double scenarioX, double scenarioY, int cellSize=250)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Obstacle * &gt;</type>
      <name>findOverlapping</name>
      <anchorfile>classveins_1_1_b_box_lookup.html</anchorfile>
      <anchor>aafb4c0c12fd2d7623a9fa41010cddb01</anchor>
      <arglist>(Point sender, Point receiver) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Box &gt;</type>
      <name>bboxes</name>
      <anchorfile>classveins_1_1_b_box_lookup.html</anchorfile>
      <anchor>aee0dfb4c3aac8b2006c2cdaeb0485044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Obstacle * &gt;</type>
      <name>obstacleLookup</name>
      <anchorfile>classveins_1_1_b_box_lookup.html</anchorfile>
      <anchor>abcb20942184c9224bc4db2bca793ba15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; BBoxCell &gt;</type>
      <name>bboxCells</name>
      <anchorfile>classveins_1_1_b_box_lookup.html</anchorfile>
      <anchor>a34fa1b8c9180101162aa52534d96b635</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>cellSize</name>
      <anchorfile>classveins_1_1_b_box_lookup.html</anchorfile>
      <anchor>a81203850210fe98ac7e5aae9e070c2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>numCols</name>
      <anchorfile>classveins_1_1_b_box_lookup.html</anchorfile>
      <anchor>ab65447dfb5af913590fc0ef8d35c6b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>numRows</name>
      <anchorfile>classveins_1_1_b_box_lookup.html</anchorfile>
      <anchor>a00fc9de0e955dc74ff4b3fe00b03b41f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::BBoxLookup::Box</name>
    <filename>structveins_1_1_b_box_lookup_1_1_box.html</filename>
    <member kind="variable">
      <type>Point</type>
      <name>p1</name>
      <anchorfile>structveins_1_1_b_box_lookup_1_1_box.html</anchorfile>
      <anchor>a2080206f51edc94d8b7825abb88295cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>p2</name>
      <anchorfile>structveins_1_1_b_box_lookup_1_1_box.html</anchorfile>
      <anchor>a7e2c184dadfd23902f69bef54a00a7e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BreakpointPathlossModel</name>
    <filename>classveins_1_1_breakpoint_pathloss_model.html</filename>
    <base>veins::AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>BreakpointPathlossModel</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a657f1df396c4e69aa7ee3486f5ac993a</anchor>
      <arglist>(cComponent *owner, double L01, double L02, double alpha1, double alpha2, double breakpointDistance, bool useTorus, const Coord &amp;playgroundSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterSignal</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>aeb1eff2df94e21c6ed4f16adae50cf3f</anchor>
      <arglist>(Signal *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActiveAtDestination</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a544933ef6aa1972e129eaf38b08770ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActiveAtOrigin</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>afa47a772610d58668867bcc0b2e53961</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL01</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a4fbcd7463e6ffd752fb9e81af49c474a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL02</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a27aa5c5a9a6b352c199f9c673a91d787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL01_real</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>ae762e16bf739dabd5665637cde3a1097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL02_real</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a0cd5c5661c7c1af0fe3e03f906992ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha1</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>ae4fd77b8b45ee3e24c19614e1a79bd6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha2</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>afe15edc75c2a2f9dd55677857f18fb45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>breakpointDistance</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>abad9e10c93087a4b750a4170b27ce8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>useTorus</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a16004c6ac9a0ee2925ceb5920d111c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord &amp;</type>
      <name>playgroundSize</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>ac63ce7ce35ca7a4beec9be4411d46c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>pathlosses</name>
      <anchorfile>classveins_1_1_breakpoint_pathloss_model.html</anchorfile>
      <anchor>aa25b29219feb536be88d456055a6e1d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::ObstacleControl::CacheKey</name>
    <filename>structveins_1_1_obstacle_control_1_1_cache_key.html</filename>
    <member kind="function">
      <type></type>
      <name>CacheKey</name>
      <anchorfile>structveins_1_1_obstacle_control_1_1_cache_key.html</anchorfile>
      <anchor>a5f2f104a4249126af687a8e1404d327b</anchor>
      <arglist>(const Coord &amp;senderPos, const Coord &amp;receiverPos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structveins_1_1_obstacle_control_1_1_cache_key.html</anchorfile>
      <anchor>a2100b947f91a44e90afe904c143df64f</anchor>
      <arglist>(const CacheKey &amp;o) const</arglist>
    </member>
    <member kind="variable">
      <type>const Coord</type>
      <name>senderPos</name>
      <anchorfile>structveins_1_1_obstacle_control_1_1_cache_key.html</anchorfile>
      <anchor>a0082a99dd2c1db2b031905d0f411dba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Coord</type>
      <name>receiverPos</name>
      <anchorfile>structveins_1_1_obstacle_control_1_1_cache_key.html</anchorfile>
      <anchor>a44d1a8e7bc08ee2bfbb0dd0a6a0f4aa4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::ChannelAccess</name>
    <filename>classveins_1_1_channel_access.html</filename>
    <base>veins::BatteryAccess</base>
    <base protection="protected">veins::AccessModuleWrap</base>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a70e63408397b7f7a8e00054355905d96</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receiveSignal</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a152e2780da20c82d3751d521142a5f90</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelMobilityPtrType</type>
      <name>getMobilityModule</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a907ca947b7f0c4ef3e7f688115c944fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AntennaPosition</type>
      <name>getAntennaPosition</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>ad9eece8bdef36aa5d0efed46e833a09a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseConnectionManager *</type>
      <name>getConnectionManager</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a0dc69d65185a429fcd739d4eadedb504</anchor>
      <arglist>(cModule *nic)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>calculatePropagationDelay</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a01c12c70034ec0583ee5f4e1ac0f683b</anchor>
      <arglist>(const NicEntry *nic)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToChannel</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>ae370934ad7b1feacc1cb6bd6ad437198</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useSendDirect</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a071e1190355a804368d10a2d0f7fecc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseConnectionManager *</type>
      <name>cc</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a8a8ebc0524fe351f468a1a63db4ed7a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usePropagationDelay</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a6739156167385f21ecadcffcb2082fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isRegistered</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a59e67ca6af47436006836fb30d8a28e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>ad8d44f09d03155e0d7baecab4fe938d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AntennaPosition</type>
      <name>antennaPosition</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a1f289819a6ffb5586b878e033cdf1ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Heading</type>
      <name>antennaHeading</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a24a080878ad3d0637fdbf1228c665664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>antennaOffset</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a3929c74c2e478073d481363ce51394ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>antennaOffsetYaw</name>
      <anchorfile>classveins_1_1_channel_access.html</anchorfile>
      <anchor>a9547a2f0f0ee47166fd962f48cb5b295</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::ChannelInfo</name>
    <filename>classveins_1_1_channel_info.html</filename>
    <class kind="class">veins::ChannelInfo::BaseIntersectionIterator</class>
    <class kind="class">veins::ChannelInfo::IntersectionIterator</class>
    <member kind="typedef">
      <type>std::list&lt; AirFrame * &gt;</type>
      <name>AirFrameVector</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a00fc63fdb09b4d14398525466f79698d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelInfo</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a52708e50b348e6f895cea9aee8253634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChannelInfo</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>aef45399fc02b3dca9513700807d9392e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAirFrame</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a922ab80fac41c9d89871080940e07cd5</anchor>
      <arglist>(AirFrame *a, simtime_t_cref startTime)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>removeAirFrame</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>af9ee0be843528ee913df218f73d4d713</anchor>
      <arglist>(AirFrame *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAirFrames</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a1ddbd4f301cb388778f1cdf1e390771f</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getEarliestInfoPoint</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>ada12efa9ecfb18696249000aba9a6b37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startRecording</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>ab9b9173bf9b6c68b778f2a778ec93af3</anchor>
      <arglist>(simtime_t_cref start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopRecording</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>ae082c8378da5d60b76cd6f8024a0ab4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRecording</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a8561dce709e7ee60fda4416e05f725bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannelEmpty</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a3eccd59780524f653850bbd458354d07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; simtime_t, AirFrame * &gt;</type>
      <name>AirFrameTimePair</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a89d8f026426f7b0fd8aa9a03a6aa8ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; AirFrameTimePair &gt;</type>
      <name>AirFrameTimeList</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>aa1a3ea58869a88ae292d846e2f0dad85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; simtime_t, AirFrameTimeList &gt;</type>
      <name>AirFrameMatrix</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a05863867d25bee98be3b88b0a0bb6047</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseIntersectionIterator&lt; const AirFrameMatrix, AirFrameMatrix::const_iterator, AirFrameTimeList::const_iterator &gt;</type>
      <name>ConstIntersectionIterator</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>ad6bc731b30d72b73de93f23559987acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; AirFrame *, simtime_t &gt;</type>
      <name>AirFrameStartMap</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a75c10b6df08a4500f983244e24d6c32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assertNoIntersections</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a86eb4a8cae1a123e9125cd0e8977c548</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getIntersections</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a8ed0db6d27389d07c50a83c46c9bd2d7</anchor>
      <arglist>(const AirFrameMatrix &amp;airFrames, simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;outVector) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>ab32ce0e1d994fe641eb188022bec0844</anchor>
      <arglist>(const AirFrameMatrix &amp;airFrames, simtime_t_cref from, simtime_t_cref to) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToInactives</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a002d7a0fff6734bdb6d8ddebf799f7f5</anchor>
      <arglist>(AirFrame *a, simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteAirFrame</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>aec072c13541b9a22bbdcc8e9103fe9e5</anchor>
      <arglist>(AirFrameMatrix &amp;airFrames, AirFrame *a, simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>findEarliestInfoPoint</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a627fbeddfec6f3ec1da17a91b97f1051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkAndCleanInterval</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a1ffb197c5bf86824cd04313da5e9e4ed</anchor>
      <arglist>(simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>canDiscardInterval</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>ab4da0befdce7f2b27ae4a61d66ec2167</anchor>
      <arglist>(simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkAndCleanFrom</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a949881b8274ae51b3f5b3e3acc61dc0d</anchor>
      <arglist>(simtime_t_cref start)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameMatrix</type>
      <name>activeAirFrames</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a8a0821808d6de551cd2d5c9624d0c45a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameMatrix</type>
      <name>inactiveAirFrames</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>aa2fb181db8233e2e234052295955ad0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameStartMap</type>
      <name>airFrameStarts</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a43e85748ba067dbf2c36e3ef6ec3fd9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>earliestInfoPoint</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>afb82a5aabeb57db696566fec27d97ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>recordStartTime</name>
      <anchorfile>classveins_1_1_channel_info.html</anchorfile>
      <anchor>a33a1c533389ce3ce4fbc086fc30a9b5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::ConnectionManager</name>
    <filename>classveins_1_1_connection_manager.html</filename>
    <base>veins::BaseConnectionManager</base>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calcInterfDist</name>
      <anchorfile>classveins_1_1_connection_manager.html</anchorfile>
      <anchor>a111f6a1f0eb46e3424fca1e3fd02f6cb</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Coord</name>
    <filename>classveins_1_1_coord.html</filename>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>addb83b1dd8cc7f96028fdd1f5325c5e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a7079d9a2501cf39c41bf82fe049e1b47</anchor>
      <arglist>(double x, double y, double z=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a13e905e5a7f7d9ef036a2e024692f5ed</anchor>
      <arglist>(const Coord &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a6e2a6d6d22318dcac1173b4de5962d30</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>twoDimensionalCrossProduct</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a01e6faf09aed1cfa4eb4a4bb9b4be5a6</anchor>
      <arglist>(const Coord &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator*=</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a8411b7762ed8da1ecf212c37e9e6be9d</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator/=</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a8dc6fb7d9e15cd0efe00fc80489c3b99</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator+=</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>aa9487092ef8f82fdf4e2f73aa333d589</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator=</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>ab0dbfb05501b4c66daef488ceb39bf4f</anchor>
      <arglist>(const Coord &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator-=</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a5a2f3b10c459cb5333686f70af615f88</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a8420e28c26b3855cbce79a4cf085d477</anchor>
      <arglist>(const Coord &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrdist</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a6307af5ac557c0c1400ff72006ba0c8d</anchor>
      <arglist>(const Coord &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrTorusDist</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a4a4c16dee61dd77a82eda62d8a4448e6</anchor>
      <arglist>(const Coord &amp;b, const Coord &amp;size) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squareLength</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a97d38ff2838475fbf534d626c4172957</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>aa003fb9d6788186697029ce7653eb9e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInBoundary</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a0ff6fe060ee67588ff081d396b4c2a89</anchor>
      <arglist>(const Coord &amp;lowerBound, const Coord &amp;upperBound) const</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>min</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>ac093228afbfc7ac2c3369ba05587d9ae</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>max</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a53bb8be6286a6b53276b5e2ea4d59e75</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>rotatedYaw</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a6bb1bb817b4d968292b0c8d884cf59e9</anchor>
      <arglist>(double rad) const</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>flippedY</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>acce12585c0e5cd22bbd59d2e75eb2925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>atZ</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a25ecc003230c97e5e64c5b750d4b4c7e</anchor>
      <arglist>(double newZ) const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>afbd5e95b5fc320575a6ed64bb3849846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a4eb6bafb5dfce3f57099601cdb1e9883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>ab7f47cf79294153d0dbd61add30b09e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Coord</type>
      <name>ZERO</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a2d291cbb8e58af4ce8c68e9c8671b5d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a3ce065b5d4c63bb3209c51927508aa16</anchor>
      <arglist>(const Coord &amp;other)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator+</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a4eb976e0a2def05ecb6464bd170b5fa9</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator-</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a0a956e1210813652ce2caa7529b3e0be</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator*</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a432afd497adcff7b20ca23af611ec919</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend double</type>
      <name>operator*</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>ab14d1a76b8003aa654846034c8dbca6f</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator/</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a310db4e85a0b20ec14725f49aae08cc3</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a2dc488cbfa8e8256dfc22b4916b9ef9b</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a321e8d56735047b9e49f869fd8f23d3e</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>afbd5e95b5fc320575a6ed64bb3849846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>a4eb6bafb5dfce3f57099601cdb1e9883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z</name>
      <anchorfile>classveins_1_1_coord.html</anchorfile>
      <anchor>ab7f47cf79294153d0dbd61add30b09e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BaseConnectionManager::CoordSet</name>
    <filename>classveins_1_1_base_connection_manager_1_1_coord_set.html</filename>
    <member kind="function">
      <type></type>
      <name>CoordSet</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>aa26da7e9e748df1780ad2f8caeaeab36</anchor>
      <arglist>(unsigned sz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoordSet</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>ad1e42ac334ea17f6f20e45f1255b23a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a94f30f431f9664e2fdb17aac5a845992</anchor>
      <arglist>(const GridCoord &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>GridCoord *</type>
      <name>next</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a703f38eb2b72f1381d2a3b69f26fdbd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getSize</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>ae5ab09d0d5e98652292fc791522dd25f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getmaxSize</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>ad3e8bd673b004cead661f3dcc45a7883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>aab76700a23a9839a12b5fa63bf184b00</anchor>
      <arglist>(const GridCoord &amp;c, unsigned pos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; GridCoord * &gt;</type>
      <name>data</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a9f31b3e9400db503c846a4045670cd52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>maxSize</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a7d268fe7346c9a5d3784aa18771c9526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a190b06e9a3639791d100179a1d99d714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>current</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>ae23ec43f7dad60f3073ccee1afc5e948</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Decider</name>
    <filename>classveins_1_1_decider.html</filename>
    <base>veins::HasLogProxy</base>
    <member kind="function">
      <type></type>
      <name>Decider</name>
      <anchorfile>classveins_1_1_decider.html</anchorfile>
      <anchor>ad3a691f67aa8fda1634b23ec0382ff7b</anchor>
      <arglist>(cComponent *owner, DeciderToPhyInterface *phy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Decider</name>
      <anchorfile>classveins_1_1_decider.html</anchorfile>
      <anchor>a491b5ea45ca2269d53a0f57f9d4228aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignal</name>
      <anchorfile>classveins_1_1_decider.html</anchorfile>
      <anchor>a2039d051f59054d39d4a5e0b38f25086</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_decider.html</anchorfile>
      <anchor>a0acac061ac63311b57521173d4ce6662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelChanged</name>
      <anchorfile>classveins_1_1_decider.html</anchorfile>
      <anchor>a7fb5657e7049afb375107cfa2309bee7</anchor>
      <arglist>(int newChannel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>switchToTx</name>
      <anchorfile>classveins_1_1_decider.html</anchorfile>
      <anchor>a682e22f3084924ab1f589dfbfeeb2648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DeciderToPhyInterface::AirFrameVector</type>
      <name>AirFrameVector</name>
      <anchorfile>classveins_1_1_decider.html</anchorfile>
      <anchor>a3053936000f9cd197950b79e4d22dd2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeciderToPhyInterface *</type>
      <name>phy</name>
      <anchorfile>classveins_1_1_decider.html</anchorfile>
      <anchor>a2cc49757ec08b64ca98332025d2862ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const simtime_t</type>
      <name>notAgain</name>
      <anchorfile>classveins_1_1_decider.html</anchorfile>
      <anchor>ad6b8f70cf6a6c50a2df9544bcc1d4a9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Decider80211p</name>
    <filename>classveins_1_1_decider80211p.html</filename>
    <base>veins::BaseDecider</base>
    <member kind="enumeration">
      <type></type>
      <name>Decider80211ControlKinds</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a2512502baa02d3843f6604cee719d8a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTHING</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a2512502baa02d3843f6604cee719d8a5a4b4306d1b1c582b5ab1d5cf90780fa99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BITERROR</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a2512502baa02d3843f6604cee719d8a5aa3d9ee969bbe7d784ce6a583e15381eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_DECIDER_80211_CONTROL_KIND</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a2512502baa02d3843f6604cee719d8a5a5e33d384350470987927f7842000bdc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RECWHILESEND</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a2512502baa02d3843f6604cee719d8a5acc3b720d77ad566afa0ff6b5f41941db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PACKET_OK_RESULT</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a19b797f1554f813ef971d42f51539eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECODED</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a19b797f1554f813ef971d42f51539eeba0833541f3a8fa3a715a70df447b60b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DECODED</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a19b797f1554f813ef971d42f51539eeba362737f034a49f527480db9c39b03865</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLLISION</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a19b797f1554f813ef971d42f51539eeba7d5f2725caa84f0fe7f7083fce617ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTHING</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a2512502baa02d3843f6604cee719d8a5a4b4306d1b1c582b5ab1d5cf90780fa99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BITERROR</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a2512502baa02d3843f6604cee719d8a5aa3d9ee969bbe7d784ce6a583e15381eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_DECIDER_80211_CONTROL_KIND</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a2512502baa02d3843f6604cee719d8a5a5e33d384350470987927f7842000bdc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RECWHILESEND</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a2512502baa02d3843f6604cee719d8a5acc3b720d77ad566afa0ff6b5f41941db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECODED</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a19b797f1554f813ef971d42f51539eeba0833541f3a8fa3a715a70df447b60b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DECODED</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a19b797f1554f813ef971d42f51539eeba362737f034a49f527480db9c39b03865</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLLISION</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a19b797f1554f813ef971d42f51539eeba7d5f2725caa84f0fe7f7083fce617ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Decider80211p</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a439b9df61ccf931cf5c661e18df03406</anchor>
      <arglist>(cComponent *owner, DeciderToPhyInterface *phy, double minPowerLevel, double ccaThreshold, bool allowTxDuringRx, double centerFrequency, int myIndex=-1, bool collectCollisionStatistics=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a94b377d4d33b39a6c76b382a91407b54</anchor>
      <arglist>(std::string myPath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cca</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>aeba984a7f23ef26ce8b22b0bfef88947</anchor>
      <arglist>(simtime_t_cref, AirFrame *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSignalState</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>ad860406bab4bfcbaf6218e62c07cd0c5</anchor>
      <arglist>(AirFrame *frame) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Decider80211p</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a04a79e76655f5d2c721db356d42ebd05</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeFrequency</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a05c2fcbb2f8b131ed7e43586f0e8c27d</anchor>
      <arglist>(double freq)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCCAThreshold</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a8f815fab2dbc152cc6cd5700276276f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCCAThreshold</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a4c22f9e527f35e07963fb24e1babd6f5</anchor>
      <arglist>(double ccaThreshold_dBm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChannelIdleStatus</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a70d7d4c3003fdef38e4b68c471152992</anchor>
      <arglist>(bool isIdle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>ad64ecb4e0f79fce566109735958881d7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>switchToTx</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a059571bfbe3cbda6772dd184a820ffa0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNotifyRxStart</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a661988863d48e9cf8042478a1fb64d96</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DeciderResult *</type>
      <name>checkIfSignalOk</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a01349c12df6c01678d1e25553b754819</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>processNewSignal</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a6604c73b2ee786a4eeca5abe6f072cab</anchor>
      <arglist>(AirFrame *frame) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>processSignalEnd</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a389f17ab33d4fc22b499593fa0837faf</anchor>
      <arglist>(AirFrame *frame) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>enum PACKET_OK_RESULT</type>
      <name>packetOk</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a25ca0927f831000b88741dc0db84246c</anchor>
      <arglist>(double snirMin, double snrMin, int lengthMPDU, double bitrate)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snrThreshold</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>ac3fd26b84c10fa387b7d2ca741fef990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ccaThreshold</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a7773b6baf230a3a1df5ac3fe476bd622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>allowTxDuringRx</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>af4d03b6aee69314ec63071e921ea5a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>centerFrequency</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>aae87a7bac5abb18b558add0b6fcd7ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myBusyTime</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>aafee432f3b88ab4d99f66a2564d6ded7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStartTime</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a4810bbc3c28014ae2ac4adef440071ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myPath</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a28a466c819caf2ecc2f3656cd5d23e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Decider80211pToPhy80211pInterface *</type>
      <name>phy11p</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>ad63d2f666bd66eca62790bb190f4b591</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; AirFrame *, int &gt;</type>
      <name>signalStates</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a32a8e4662b0ac082c573f7a33f034f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>collectCollisionStats</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a7bc9a41eef13162399b72548180230d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>collisions</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a112e9ab0cacf0bcc09fec194593c2cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>notifyRxStart</name>
      <anchorfile>classveins_1_1_decider80211p.html</anchorfile>
      <anchor>a9803affda83c3f81133350d1fa1ad09c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Decider80211pToPhy80211pInterface</name>
    <filename>classveins_1_1_decider80211p_to_phy80211p_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Decider80211pToPhy80211pInterface</name>
      <anchorfile>classveins_1_1_decider80211p_to_phy80211p_interface.html</anchorfile>
      <anchor>a293d1e3c559a019782428b7ae8730c3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>classveins_1_1_decider80211p_to_phy80211p_interface.html</anchorfile>
      <anchor>a3960233915713852fd8f7ffe07bfd44c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::DeciderResult</name>
    <filename>classveins_1_1_decider_result.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeciderResult</name>
      <anchorfile>classveins_1_1_decider_result.html</anchorfile>
      <anchor>ac53ed0e9f38d9eabf8ca0fa3e5cb47d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeciderResult</name>
      <anchorfile>classveins_1_1_decider_result.html</anchorfile>
      <anchor>a2dfbeb9cbc7b3a261973b3ed52b0abce</anchor>
      <arglist>(bool isCorrect=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSignalCorrect</name>
      <anchorfile>classveins_1_1_decider_result.html</anchorfile>
      <anchor>abe0ecc1a30dafcef8704bece99903e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isCorrect</name>
      <anchorfile>classveins_1_1_decider_result.html</anchorfile>
      <anchor>ac28caa74b612c7e4d620bc456378486a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::DeciderResult80211</name>
    <filename>classveins_1_1_decider_result80211.html</filename>
    <base>veins::DeciderResult</base>
    <member kind="function">
      <type></type>
      <name>DeciderResult80211</name>
      <anchorfile>classveins_1_1_decider_result80211.html</anchorfile>
      <anchor>ad04c0019689325b56da211916bb09532</anchor>
      <arglist>(bool isCorrect, double bitrate, double snr, double recvPower_dBm=0, bool collision=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBitrate</name>
      <anchorfile>classveins_1_1_decider_result80211.html</anchorfile>
      <anchor>a15b273497f124de4c60fb96309d23556</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSnr</name>
      <anchorfile>classveins_1_1_decider_result80211.html</anchorfile>
      <anchor>ae0921202a6cade427f29f07b4f32d348</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCollision</name>
      <anchorfile>classveins_1_1_decider_result80211.html</anchorfile>
      <anchor>ab74ef22f68752f6db60b38238446cfc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRecvPower_dBm</name>
      <anchorfile>classveins_1_1_decider_result80211.html</anchorfile>
      <anchor>a3f88255eaeb0f5ac69a2e8e01ba81a42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>classveins_1_1_decider_result80211.html</anchorfile>
      <anchor>a381da0d9948d8a73b69a5b48e8d88ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snr</name>
      <anchorfile>classveins_1_1_decider_result80211.html</anchorfile>
      <anchor>af4f04a3042258257f64b016ca74f868f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>recvPower_dBm</name>
      <anchorfile>classveins_1_1_decider_result80211.html</anchorfile>
      <anchor>a1958923bd06cfec7955482a3ca49270a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>collision</name>
      <anchorfile>classveins_1_1_decider_result80211.html</anchorfile>
      <anchor>a7a0bce9cc82c13933b1157ea802dce0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::DeciderToPhyInterface</name>
    <filename>classveins_1_1_decider_to_phy_interface.html</filename>
    <member kind="typedef">
      <type>std::list&lt; AirFrame * &gt;</type>
      <name>AirFrameVector</name>
      <anchorfile>classveins_1_1_decider_to_phy_interface.html</anchorfile>
      <anchor>ab8300ae6f15749c94f4830adc660e307</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeciderToPhyInterface</name>
      <anchorfile>classveins_1_1_decider_to_phy_interface.html</anchorfile>
      <anchor>aaad9297f24e07e02bccb4eb251408521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>classveins_1_1_decider_to_phy_interface.html</anchorfile>
      <anchor>a49ab6416f80e747952ad829d6e8ca771</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getNoiseFloorValue</name>
      <anchorfile>classveins_1_1_decider_to_phy_interface.html</anchorfile>
      <anchor>af423a846c8d7b68d6882b30be41432a7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendControlMsgToMac</name>
      <anchorfile>classveins_1_1_decider_to_phy_interface.html</anchorfile>
      <anchor>a72dbcdf0657bf5760d67e34645066d33</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>classveins_1_1_decider_to_phy_interface.html</anchorfile>
      <anchor>a8795c130caca902f79ba399fa9905f24</anchor>
      <arglist>(AirFrame *packet, DeciderResult *result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BaseWorldUtility *</type>
      <name>getWorldUtility</name>
      <anchorfile>classveins_1_1_decider_to_phy_interface.html</anchorfile>
      <anchor>aa4cd40e1961d9de2abacf49994406d5e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classveins_1_1_decider_to_phy_interface.html</anchorfile>
      <anchor>a9cd93faa42e49a141275b8aa28303171</anchor>
      <arglist>(const char *name, double value, const char *unit=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>classveins_1_1_decider_to_phy_interface.html</anchorfile>
      <anchor>a340f210419ba22c6d7e54407435b4bea</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::DemoBaseApplLayer</name>
    <filename>classveins_1_1_demo_base_appl_layer.html</filename>
    <base>veins::BaseApplLayer</base>
    <member kind="enumeration">
      <type></type>
      <name>DemoApplMessageKinds</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>ab9efce899a1de4e1ca3c9f6a4c41516f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_BEACON_EVT</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>ab9efce899a1de4e1ca3c9f6a4c41516fa5f9b601653c32eeb69aed9c18ed722d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_WSA_EVT</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>ab9efce899a1de4e1ca3c9f6a4c41516faf4904fd3be5458af22d3bb82df2e04e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_BEACON_EVT</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>ab9efce899a1de4e1ca3c9f6a4c41516fa5f9b601653c32eeb69aed9c18ed722d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_WSA_EVT</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>ab9efce899a1de4e1ca3c9f6a4c41516faf4904fd3be5458af22d3bb82df2e04e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DemoBaseApplLayer</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a24a3ca57d2273f653f1070c317be1df8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>acca47f0d4a756e78ca29d2e4271af396</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>af3ebab1d965f23077810d112a47cae98</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receiveSignal</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>acf0b4977efacc25c723cc44a938ee0f9</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj, cObject *details) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a0457eac366e27a0cd301e764ee955504</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>aec3c66232b9ca518c76021c8f2f1dc40</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>populateWSM</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>aecfff5ce1d91dcdb319272042375e6b2</anchor>
      <arglist>(BaseFrame1609_4 *wsm, LAddress::L2Type rcvId=LAddress::L2BROADCAST(), int serial=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onWSM</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a1b499d1dc3483e09a9e989a9488c0b59</anchor>
      <arglist>(BaseFrame1609_4 *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBSM</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a0c777a569144188afa113afd62daa043</anchor>
      <arglist>(DemoSafetyMessage *bsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onWSA</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a4288b81a3cdf4c5dad6b1abd99b6e2c6</anchor>
      <arglist>(DemoServiceAdvertisment *wsa)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a384db2de57cd12b3b5bab48f255bcea7</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParkingUpdate</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>ab5cc9db685df1f2f180359af47a3140c</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startService</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a950278bac8ae9a57bbf8d052f3d72740</anchor>
      <arglist>(Channel channel, int serviceId, std::string serviceDescription)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stopService</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>ae87d3a13dfd916a8abcc7b269ce0fbbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>computeAsynchronousSendingTime</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a59d83e257a9f18f9af061d2e3bbe0440</anchor>
      <arglist>(simtime_t interval, ChannelType chantype)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDown</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>ac473178d13013063c13943d343a672f4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDelayedDown</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>ac649666b5e8cb94740dd8a4588776e27</anchor>
      <arglist>(cMessage *msg, simtime_t delay)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkAndTrackPacket</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a92eee52f9f934fa6118dbad5422f4269</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>mobility</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>aa5007dab9b355e3e4053fb9f6a59a9c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a854e4fec077209a3cc63115f70584c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface::Vehicle *</type>
      <name>traciVehicle</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a63775a58d8e863d0ec87f7993b313d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a4f526c86ab3d432e620b5de9927274b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DemoBaseApplLayerToMac1609_4Interface *</type>
      <name>mac</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a1b882676e94dfddd95326cbe9df0f380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isParked</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a5947c4a8f447af7aff327cde07d64308</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>beaconLengthBits</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>afb4ada150c65919b1770abdef7985419</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>beaconUserPriority</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a6d61f40c578e82777003c41fe23a3e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>beaconInterval</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a2815c39ba35f6c42b06128ddbfc8f32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendBeacons</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a7866c2e197f24c3f7e81decd5261d28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>dataLengthBits</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a9edf00f009a5e15f1b74d9f480f7582e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>dataUserPriority</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a6ace8c13e49e5d21d03e0c19aa19c607</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dataOnSch</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>adaae310c2a0cbed58859b93251f64646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>currentOfferedServiceId</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a82f0f97fea0cea96f3a4a176c1d6ec32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>currentServiceDescription</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a784ecec0121113f39511d5f83a5287d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Channel</type>
      <name>currentServiceChannel</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a20f692e176ef4efbe3f6cc396cd48618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>wsaInterval</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a0b9d09e2002ba0576a5b89ec8b03895a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>curPosition</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a2fa1ce104879707982364a13525dd20c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>curSpeed</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a18895b664bf4f72dcc3a08995b8d0881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>myId</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>ae6bb59969ae9756d6efaf494c33a201e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySCH</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a96f08269458a78e556d1da3ff91c627d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>generatedWSMs</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a08a41ca3d9badae8c9379ae222c271a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>generatedWSAs</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>aafaceefbff2a06f20babee4c0ff9abbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>generatedBSMs</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a602336c04c91a87bd2d1ad5edafd5265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>receivedWSMs</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a0365da1bc38b06f8813e943711a8a0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>receivedWSAs</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>afadc226a1018a9e973207851df1e4754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>receivedBSMs</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>a0b5911c89f24182e15f6d4401c264fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sendBeaconEvt</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>af4cb7a5451ffc4fbf47095dd228d3527</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sendWSAEvt</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer.html</anchorfile>
      <anchor>ad0eff098a3ba5b59267839a8e59ce8c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::DemoBaseApplLayerToMac1609_4Interface</name>
    <filename>classveins_1_1_demo_base_appl_layer_to_mac1609__4_interface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isChannelSwitchingActive</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer_to_mac1609__4_interface.html</anchorfile>
      <anchor>a3f9d9623e60f56b3c0c15669b4df53a6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>getSwitchingInterval</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer_to_mac1609__4_interface.html</anchorfile>
      <anchor>aac07f54c6e7d52a40b16b560638f2ce8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isCurrentChannelCCH</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer_to_mac1609__4_interface.html</anchorfile>
      <anchor>a43aee47e5687617af50e5919c26542a9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>changeServiceChannel</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer_to_mac1609__4_interface.html</anchorfile>
      <anchor>a73bf2fa8eced9dc5a97ec5566f29f6f6</anchor>
      <arglist>(Channel channelNumber)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DemoBaseApplLayerToMac1609_4Interface</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer_to_mac1609__4_interface.html</anchorfile>
      <anchor>a6c120ab7a6da52553a01e077daf7c44d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getMACAddress</name>
      <anchorfile>classveins_1_1_demo_base_appl_layer_to_mac1609__4_interface.html</anchorfile>
      <anchor>a778c4d8707cdb821a2f388b786493905</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::DrawAmount</name>
    <filename>classveins_1_1_draw_amount.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>PowerType</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>a72eb786928939c15bd91da699cd2bb8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURRENT</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>a72eb786928939c15bd91da699cd2bb8ea874cee40c4ddafb14e1d62fa54aa732b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>a72eb786928939c15bd91da699cd2bb8ea74aa8feec928d83b9d5991f55a754963</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURRENT</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>a72eb786928939c15bd91da699cd2bb8ea874cee40c4ddafb14e1d62fa54aa732b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>a72eb786928939c15bd91da699cd2bb8ea74aa8feec928d83b9d5991f55a754963</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawAmount</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>a5874fa2c86a7ce40ad659ff5ff1f6a77</anchor>
      <arglist>(int type=CURRENT, double value=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DrawAmount</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>af4fb7b6251a155c9d2bba39b6fad9499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>a04b6adece859a462db94efecf209a4d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>a740752a8a660751f2ec1f45b10060905</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>ab51c4c6ade8a85cd619b9b7e1b521d9a</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>a9c127f41532208d9620d8387bb61c65e</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>a530a066757ba08bce96e3af8994ff827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>value</name>
      <anchorfile>classveins_1_1_draw_amount.html</anchorfile>
      <anchor>a02192889d1388b7d8eda2df67507f87f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Mac1609_4::EDCA</name>
    <filename>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</filename>
    <base protection="private">veins::HasLogProxy</base>
    <class kind="class">veins::Mac1609_4::EDCA::EDCAQueue</class>
    <member kind="function">
      <type></type>
      <name>EDCA</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a2509a4356015a4e261cd57b462f49423</anchor>
      <arglist>(cSimpleModule *owner, ChannelType channelType, int maxQueueLength=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EDCA</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a650d20639fd650d9b290192ad3ac2d25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createQueue</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a884f29fbe784105dff1b99c2593dd432</anchor>
      <arglist>(int aifsn, int cwMin, int cwMax, t_access_category)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queuePacket</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a4cd8b58e20903a8ef2a1bd499b8673c1</anchor>
      <arglist>(t_access_category AC, BaseFrame1609_4 *cmsg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backoff</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>ab94c6c328029a01f40832b54ddc757ad</anchor>
      <arglist>(t_access_category ac)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>startContent</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a5a4e0df1a7ab5239ce63125322a8a889</anchor>
      <arglist>(simtime_t idleSince, bool guardActive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopContent</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a1ae6241b22b64c5f0bd51a288e05c53a</anchor>
      <arglist>(bool allowBackoff, bool generateTxOp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postTransmit</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a10a3c354dd97eb3b7b1d6a374494b2be</anchor>
      <arglist>(t_access_category, BaseFrame1609_4 *wsm, bool useAcks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revokeTxOPs</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>ae04062ff3bd85df50a5067324c419e98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BaseFrame1609_4 *</type>
      <name>initiateTransmit</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a1c53eb91535af54750dc0d5c2345145d</anchor>
      <arglist>(simtime_t idleSince)</arglist>
    </member>
    <member kind="variable">
      <type>cSimpleModule *</type>
      <name>owner</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>acf418db044611ca22d44a02aa8b2a9be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; t_access_category, EDCAQueue &gt;</type>
      <name>myQueues</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>ad29424ef293d9e467edd7b3b7fd6e824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>maxQueueSize</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a6f2b776a026ba1384b12f4642f22c2ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastStart</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a45935d06571734039a8072a5a36eecfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ChannelType</type>
      <name>channelType</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a9a2c2db99cc2c15e9dee1153f52facbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>statsNumInternalContention</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a08cbe05a57265cc8b8eb593017f333cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>statsNumBackoff</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>af154324be9bc0021b5b8dbd82e0218d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>statsSlotsBackoff</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a4b90cb653d981fba772d6b40aa57b00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myId</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a3cc194f9c18a7b663fb3255db13bbfa3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Mac1609_4::EDCA::EDCAQueue</name>
    <filename>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>EDCAQueue</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a594ce11f2814f74640b41202aaa3bc7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EDCAQueue</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>ad2f01c281a4b2bc25e2e7827f6f32dfe</anchor>
      <arglist>(int aifsn, int cwMin, int cwMax, t_access_category ac)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EDCAQueue</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a1e60ee29da4d0c6f5ee6d3095e0ff3e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::queue&lt; BaseFrame1609_4 * &gt;</type>
      <name>queue</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a7e08393471218bedf9c4a803f3cd81f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>aifsn</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>ae83d1bfbb6103de9cf332bce2c3417a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cwMin</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>aaa88a07ecd573c5d504021f3ed7771c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cwMax</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>ad611b92550d802c7e93a52a4477b34db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cwCur</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a5792cbe72505a3c45df53017fcac77bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>currentBackoff</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>ad38b2545d356843ee4d01bd06b34cbc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>txOP</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>afe38f590f95aabd7b78e0b5144b4d6c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ssrc</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a1f6fd6798cef9f54a492411dde8de6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>slrc</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a1321ee5f60ccdf7e8360fea6a8d893d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>waitForAck</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>aa71ede8fad3b20d6ccbd7d6bd6f96597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>waitOnUnicastID</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a31610d7db91aa98a67321293f65a89ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AckTimeOutMessage *</type>
      <name>ackTimeOut</name>
      <anchorfile>classveins_1_1_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a7cdc2760a37454570e3cc024ceb3e56e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::EnumBitset</name>
    <filename>classveins_1_1_enum_bitset.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>EnumBitset</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a3196184bb6e0fcf6143e7d2453ce6a8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumBitset</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>ad5ee0ab46ec028ef8bdda79b31460c20</anchor>
      <arglist>(EnumUnderlyingType val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumBitset</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a26771691d387347bf6f100f5d8a61acb</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumBitset</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>ac34b587f702c9dafe3f70b903dfa0363</anchor>
      <arglist>(std::initializer_list&lt; T &gt; vals)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a9010b5678d7f826f6282a33fe54476e7</anchor>
      <arglist>(const EnumBitset&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a94cdc9dc02a423122f47309cc593e13c</anchor>
      <arglist>(const EnumBitset&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator[]</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>ad3b42c1fa1385b6e6d0d0c16caab4a88</anchor>
      <arglist>(std::size_t pos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>ab721e94b2bf35be3584668f3f932c6d7</anchor>
      <arglist>(T pos) const</arglist>
    </member>
    <member kind="function">
      <type>EnumBitset &amp;</type>
      <name>set</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>ad4bec755de3d49240107cf60175afea9</anchor>
      <arglist>(T pos, bool value=true)</arglist>
    </member>
    <member kind="function">
      <type>EnumBitset &amp;</type>
      <name>flip</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a68fd1c792f6be6d2852f615b6e62f889</anchor>
      <arglist>(T pos)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a20f2b2b39e9e4cf0d6c25248a3758360</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>aabc0c4558793dc22f40ec2e610b9e2a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>to_ullong</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a8e65f2d542765624783de3d98a438cf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>typename std::underlying_type&lt; T &gt;::type</type>
      <name>EnumUnderlyingType</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a49d9ec9b4d13188470b6506a15e2f9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>EnumUnderlyingType</type>
      <name>get_value</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>ab10e47c6b1a3b5718820a7f9a45eac52</anchor>
      <arglist>(T v) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::bitset&lt; static_cast&lt; EnumUnderlyingType &gt;EnumTraits&lt; T &gt;::max)+1 &gt;</type>
      <name>bits</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a855fa4f98d2d5d8aae36083cb064a0a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend EnumBitset&lt; T &gt;</type>
      <name>operator|</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>aff8f25b2ba1d55a1a1547fe4e50fbfcd</anchor>
      <arglist>(EnumBitset&lt; T &gt; lhs, EnumBitset&lt; T &gt; rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnumBitset&lt; VehicleSignal &gt;</name>
    <filename>classveins_1_1_enum_bitset.html</filename>
    <member kind="function">
      <type></type>
      <name>EnumBitset</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a3196184bb6e0fcf6143e7d2453ce6a8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumBitset</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>ad5ee0ab46ec028ef8bdda79b31460c20</anchor>
      <arglist>(EnumUnderlyingType val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumBitset</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a26771691d387347bf6f100f5d8a61acb</anchor>
      <arglist>(VehicleSignal val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumBitset</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>ac34b587f702c9dafe3f70b903dfa0363</anchor>
      <arglist>(std::initializer_list&lt; VehicleSignal &gt; vals)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a9010b5678d7f826f6282a33fe54476e7</anchor>
      <arglist>(const EnumBitset&lt; VehicleSignal &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a94cdc9dc02a423122f47309cc593e13c</anchor>
      <arglist>(const EnumBitset&lt; VehicleSignal &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator[]</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>ad3b42c1fa1385b6e6d0d0c16caab4a88</anchor>
      <arglist>(std::size_t pos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>ab721e94b2bf35be3584668f3f932c6d7</anchor>
      <arglist>(VehicleSignal pos) const</arglist>
    </member>
    <member kind="function">
      <type>EnumBitset &amp;</type>
      <name>set</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>ad4bec755de3d49240107cf60175afea9</anchor>
      <arglist>(VehicleSignal pos, bool value=true)</arglist>
    </member>
    <member kind="function">
      <type>EnumBitset &amp;</type>
      <name>flip</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a68fd1c792f6be6d2852f615b6e62f889</anchor>
      <arglist>(VehicleSignal pos)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a20f2b2b39e9e4cf0d6c25248a3758360</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>aabc0c4558793dc22f40ec2e610b9e2a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>to_ullong</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a8e65f2d542765624783de3d98a438cf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>typename std::underlying_type&lt; VehicleSignal &gt;::type</type>
      <name>EnumUnderlyingType</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a49d9ec9b4d13188470b6506a15e2f9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>EnumUnderlyingType</type>
      <name>get_value</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>ab10e47c6b1a3b5718820a7f9a45eac52</anchor>
      <arglist>(VehicleSignal v) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::bitset&lt; static_cast&lt; EnumUnderlyingType &gt;EnumTraits&lt; VehicleSignal &gt;::max)+1 &gt;</type>
      <name>bits</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>a855fa4f98d2d5d8aae36083cb064a0a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend EnumBitset&lt; VehicleSignal &gt;</type>
      <name>operator|</name>
      <anchorfile>classveins_1_1_enum_bitset.html</anchorfile>
      <anchor>aff8f25b2ba1d55a1a1547fe4e50fbfcd</anchor>
      <arglist>(EnumBitset&lt; VehicleSignal &gt; lhs, EnumBitset&lt; VehicleSignal &gt; rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::EnumTraits&lt; VehicleSignal &gt;</name>
    <filename>structveins_1_1_enum_traits_3_01_vehicle_signal_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const VehicleSignal</type>
      <name>max</name>
      <anchorfile>structveins_1_1_enum_traits_3_01_vehicle_signal_01_4.html</anchorfile>
      <anchor>aa237b554179e69a1ab97b145a0fc9977</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::FindModule</name>
    <filename>classveins_1_1_find_module.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>findSubModule</name>
      <anchorfile>classveins_1_1_find_module.html</anchorfile>
      <anchor>a56591278058cab17db4d776cfde387a5</anchor>
      <arglist>(const cModule *const top)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>findGlobalModule</name>
      <anchorfile>classveins_1_1_find_module.html</anchorfile>
      <anchor>a5235f90b10b3a297c25baeaa8a4194cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cModule *const</type>
      <name>findHost</name>
      <anchorfile>classveins_1_1_find_module.html</anchorfile>
      <anchor>a01accd625bef9763ba8baabc5e9d5eeb</anchor>
      <arglist>(cModule *const m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const cModule *const</type>
      <name>findHost</name>
      <anchorfile>classveins_1_1_find_module.html</anchorfile>
      <anchor>a2b6e450e79fc05b352f89b98279789fd</anchor>
      <arglist>(const cModule *const m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::FWMath</name>
    <filename>classveins_1_1_f_w_math.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mod</name>
      <anchorfile>classveins_1_1_f_w_math.html</anchorfile>
      <anchor>a063b0d50be84d9dca336a3a5ba1d4d9a</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>div</name>
      <anchorfile>classveins_1_1_f_w_math.html</anchorfile>
      <anchor>a097c50200982052a6cda4468b0918d80</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>modulo</name>
      <anchorfile>classveins_1_1_f_w_math.html</anchorfile>
      <anchor>aa66a76d454bf3d91d8ec390c4737a7a1</anchor>
      <arglist>(double a, double n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VEINS_DEPRECATED bool</type>
      <name>close</name>
      <anchorfile>classveins_1_1_f_w_math.html</anchorfile>
      <anchor>afdc40980439c2c322c66eeaa2b46e8b4</anchor>
      <arglist>(double one, double two)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stepfunction</name>
      <anchorfile>classveins_1_1_f_w_math.html</anchorfile>
      <anchor>a9cc269028b6ffdaf6773754cc1f659cc</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sign</name>
      <anchorfile>classveins_1_1_f_w_math.html</anchorfile>
      <anchor>ab276f8f4e68608303454ceb03bd4d7bc</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>round</name>
      <anchorfile>classveins_1_1_f_w_math.html</anchorfile>
      <anchor>a66f5a439c111b840bd2e17a4f108648d</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>floorToZero</name>
      <anchorfile>classveins_1_1_f_w_math.html</anchorfile>
      <anchor>aee189b2a5ff512b672decb1acb1c8e04</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>max</name>
      <anchorfile>classveins_1_1_f_w_math.html</anchorfile>
      <anchor>a8c5f0bd26b722a8064c6f28b4712ec90</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dBm2mW</name>
      <anchorfile>classveins_1_1_f_w_math.html</anchorfile>
      <anchor>acbd7030a6d374a5aada9ce01ab326dd4</anchor>
      <arglist>(double dBm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mW2dBm</name>
      <anchorfile>classveins_1_1_f_w_math.html</anchorfile>
      <anchor>ab5d2d31650c0d51144611f7f57abcf99</anchor>
      <arglist>(double mW)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::SignalUtils::anonymous_namespace{SignalUtils.cc}::greaterByReceptionEnd</name>
    <filename>structveins_1_1_signal_utils_1_1anonymous__namespace_02_signal_utils_8cc_03_1_1greater_by_reception_end.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structveins_1_1_signal_utils_1_1anonymous__namespace_02_signal_utils_8cc_03_1_1greater_by_reception_end.html</anchorfile>
      <anchor>a113fa04752dae6021818adc06f79e9bd</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::BaseConnectionManager::GridCoord</name>
    <filename>classveins_1_1_base_connection_manager_1_1_grid_coord.html</filename>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a3b22af4b9e3ad1a97ed1824fa8432e1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>af2cd97e0f77dd50f42d75b7df07c4280</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a6f588814c66dd9c49a57ef042e31bd13</anchor>
      <arglist>(int x, int y, int z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a6c76fcd796e2893c153fb751cb34d74a</anchor>
      <arglist>(const GridCoord &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a7f59708ab7456290dbd5e2bc70c78689</anchor>
      <arglist>(const Coord &amp;c, const Coord &amp;gridCellSize=Coord(1.0, 1.0, 1.0))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>adae1596e34bb3aa3f56fecb132ec35ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>x</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>ac0118cb5ef402f668b3b9ca4a151b460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>y</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a31b6594bd2972369a7b4490dbd24a18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>z</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>ad233912e607c3ef449399e7fa6030818</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a2b7b149e4419a68dad34a9558f5c3c31</anchor>
      <arglist>(const GridCoord &amp;a, const GridCoord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a8b6fb213ce1ee286ec6c894b7b22cfa5</anchor>
      <arglist>(const GridCoord &amp;a, const GridCoord &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>x</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>ac0118cb5ef402f668b3b9ca4a151b460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>y</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a31b6594bd2972369a7b4490dbd24a18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>z</name>
      <anchorfile>classveins_1_1_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>ad233912e607c3ef449399e7fa6030818</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::AnnotationManager::Group</name>
    <filename>classveins_1_1_annotation_manager_1_1_group.html</filename>
    <member kind="function">
      <type></type>
      <name>Group</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_group.html</anchorfile>
      <anchor>aed54a193bebffa84ec25b4f756d95d10</anchor>
      <arglist>(std::string title)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Group</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_group.html</anchorfile>
      <anchor>a45730c27b36c47f034cb4bbc3e680f5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>title</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_group.html</anchorfile>
      <anchor>a280219033c8e053e3e59cd933c708e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_group.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCICommandInterface::GuiView</name>
    <filename>classveins_1_1_tra_c_i_command_interface_1_1_gui_view.html</filename>
    <base>veins::HasLogProxy</base>
    <member kind="function">
      <type></type>
      <name>GuiView</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_gui_view.html</anchorfile>
      <anchor>afad351ae4fb590f17814aa01461baf9d</anchor>
      <arglist>(TraCICommandInterface *traci, std::string viewId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getScheme</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_gui_view.html</anchorfile>
      <anchor>a33b1874d3de8ab9fbe2fb0291c42451a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScheme</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_gui_view.html</anchorfile>
      <anchor>a9482a2b68e8e3f5c7733b219148d2a72</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZoom</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_gui_view.html</anchorfile>
      <anchor>ae92316af5fbbe44943f179672ff806c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZoom</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_gui_view.html</anchorfile>
      <anchor>a5ca8e7090b41b3f9f2195d24292aa940</anchor>
      <arglist>(double zoom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundary</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_gui_view.html</anchorfile>
      <anchor>abcb08e21017cc5530d6de69ae01a865c</anchor>
      <arglist>(Coord p1, Coord p2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeScreenshot</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_gui_view.html</anchorfile>
      <anchor>a992b3cde419353d6715c81303b3da0ca</anchor>
      <arglist>(std::string filename=&quot;&quot;, int32_t width=-1, int32_t height=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trackVehicle</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_gui_view.html</anchorfile>
      <anchor>aa04f62d8aa866c2afafd584db4ea0da8</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_gui_view.html</anchorfile>
      <anchor>ab743e132476495af6db1044ce3c9d1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_gui_view.html</anchorfile>
      <anchor>ab6ca944f80f9def92cc1170308ad580d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>viewId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_gui_view.html</anchorfile>
      <anchor>a8c0b4fc5253aac9930d52151cc67569b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::HasLogProxy</name>
    <filename>classveins_1_1_has_log_proxy.html</filename>
    <member kind="function">
      <type></type>
      <name>HasLogProxy</name>
      <anchorfile>classveins_1_1_has_log_proxy.html</anchorfile>
      <anchor>aa27826caf83f9947e9badf22acf78dd8</anchor>
      <arglist>(cComponent *owner)</arglist>
    </member>
    <member kind="function">
      <type>const cComponent *</type>
      <name>getThisPtr</name>
      <anchorfile>classveins_1_1_has_log_proxy.html</anchorfile>
      <anchor>a007aefcabff8d6649fcb0a9d2e7c9134</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cComponent *</type>
      <name>owner</name>
      <anchorfile>classveins_1_1_has_log_proxy.html</anchorfile>
      <anchor>a5b7de080259cdc8d83c9486ed9850320</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Heading</name>
    <filename>classveins_1_1_heading.html</filename>
    <member kind="function">
      <type></type>
      <name>Heading</name>
      <anchorfile>classveins_1_1_heading.html</anchorfile>
      <anchor>a9980780b575fe95a0e4667529f89dc1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Heading</name>
      <anchorfile>classveins_1_1_heading.html</anchorfile>
      <anchor>aa889cc9072b4412ecfff0d7fb3abcdda</anchor>
      <arglist>(double rad)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRad</name>
      <anchorfile>classveins_1_1_heading.html</anchorfile>
      <anchor>afe01247cef32e057c6fa54c7f36b46bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNan</name>
      <anchorfile>classveins_1_1_heading.html</anchorfile>
      <anchor>afce3c7c6866896f6ba44776f248d8c07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>toCoord</name>
      <anchorfile>classveins_1_1_heading.html</anchorfile>
      <anchor>ab8b7aeac07a2db68ce07b4074b6cf37d</anchor>
      <arglist>(double length=1) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Heading</type>
      <name>fromCoord</name>
      <anchorfile>classveins_1_1_heading.html</anchorfile>
      <anchor>a9d6cfb66c818140b87edaa53a5aa483e</anchor>
      <arglist>(Coord o)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Heading</type>
      <name>nan</name>
      <anchorfile>classveins_1_1_heading.html</anchorfile>
      <anchor>ace496b3a1776c9b1795fb2ebe7953b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rad</name>
      <anchorfile>classveins_1_1_heading.html</anchorfile>
      <anchor>a0b76910eb4d76f0dd55dfc6102664cb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::HostState</name>
    <filename>classveins_1_1_host_state.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>States</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a443c5f51e4abf0726a9a13591571dfb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTIVE</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a443c5f51e4abf0726a9a13591571dfb2ab935bf0d8c94d74374a4641cdd67be00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a443c5f51e4abf0726a9a13591571dfb2a45384ff8fdc191d14eb5156aec72cb68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a443c5f51e4abf0726a9a13591571dfb2a856bcaef5cf6c70997a3ce6a70c1fa84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEP</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a443c5f51e4abf0726a9a13591571dfb2a692c15174a082445bfcfec49fd6800dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OFF</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a443c5f51e4abf0726a9a13591571dfb2a0e7aab222feeec70aba05c6b9053625b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTIVE</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a443c5f51e4abf0726a9a13591571dfb2ab935bf0d8c94d74374a4641cdd67be00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a443c5f51e4abf0726a9a13591571dfb2a45384ff8fdc191d14eb5156aec72cb68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a443c5f51e4abf0726a9a13591571dfb2a856bcaef5cf6c70997a3ce6a70c1fa84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEP</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a443c5f51e4abf0726a9a13591571dfb2a692c15174a082445bfcfec49fd6800dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OFF</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a443c5f51e4abf0726a9a13591571dfb2a0e7aab222feeec70aba05c6b9053625b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HostState</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a1df94d4d59ea0e934633fdba49748f58</anchor>
      <arglist>(States state=ACTIVE)</arglist>
    </member>
    <member kind="function">
      <type>States</type>
      <name>get</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a18a7e4a0eb1a513b9ad5d863b6ad8d66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>acf75274042ccd02a6c7d5a218c967c6b</anchor>
      <arglist>(States s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a8df497761750f5577b8eb9a94b0558ae</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>States</type>
      <name>state</name>
      <anchorfile>classveins_1_1_host_state.html</anchorfile>
      <anchor>a038f0bf77b39c12a551b72530eeca103</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::ChannelInfo::IntersectionIterator</name>
    <filename>classveins_1_1_channel_info_1_1_intersection_iterator.html</filename>
    <base>BaseIntersectionIterator&lt; AirFrameMatrix, AirFrameMatrix::iterator, AirFrameTimeList::iterator &gt;</base>
    <member kind="function">
      <type></type>
      <name>IntersectionIterator</name>
      <anchorfile>classveins_1_1_channel_info_1_1_intersection_iterator.html</anchorfile>
      <anchor>a16e710ef76e7898965f0e08326359efd</anchor>
      <arglist>(AirFrameMatrix *airFrames, simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseAirFrame</name>
      <anchorfile>classveins_1_1_channel_info_1_1_intersection_iterator.html</anchorfile>
      <anchor>a375fa550d8ff120ec17ace70de51389f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>BaseIntersectionIterator&lt; AirFrameMatrix, AirFrameMatrix::iterator, AirFrameTimeList::iterator &gt;</type>
      <name>Base</name>
      <anchorfile>classveins_1_1_channel_info_1_1_intersection_iterator.html</anchorfile>
      <anchor>a97b065c11b9b8c421b90f37fe860b714</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCICommandInterface::Junction</name>
    <filename>classveins_1_1_tra_c_i_command_interface_1_1_junction.html</filename>
    <member kind="function">
      <type></type>
      <name>Junction</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_junction.html</anchorfile>
      <anchor>a827196dbb61c99e4785153e5c2079652</anchor>
      <arglist>(TraCICommandInterface *traci, std::string junctionId)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>getPosition</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_junction.html</anchorfile>
      <anchor>a82f1f8e5a375dce311752d254ef4432b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_junction.html</anchorfile>
      <anchor>ac3757fdd4d765bcb9c3b1d158d4d17d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_junction.html</anchorfile>
      <anchor>aedecb70983dd9b4eb4ed919ee123132f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>junctionId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_junction.html</anchorfile>
      <anchor>a13f46b088438c582fdd6968bf55037f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::LAddress</name>
    <filename>classveins_1_1_l_address.html</filename>
    <member kind="typedef">
      <type>long</type>
      <name>L2Type</name>
      <anchorfile>classveins_1_1_l_address.html</anchorfile>
      <anchor>a550dbf0446d9afe2fe5797c01f9a4049</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>L3Type</name>
      <anchorfile>classveins_1_1_l_address.html</anchorfile>
      <anchor>ac825f730caa87781a72ba6eb8829e55c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const L2Type &amp;</type>
      <name>L2BROADCAST</name>
      <anchorfile>classveins_1_1_l_address.html</anchorfile>
      <anchor>a563a2292dc181aeaf98dada1c6a84222</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const L2Type &amp;</type>
      <name>L2NULL</name>
      <anchorfile>classveins_1_1_l_address.html</anchorfile>
      <anchor>aa4c72481eb930988da1272c5867ff401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const L3Type &amp;</type>
      <name>L3BROADCAST</name>
      <anchorfile>classveins_1_1_l_address.html</anchorfile>
      <anchor>ac5f48476b52d2795046d7ce404f32610</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const L3Type &amp;</type>
      <name>L3NULL</name>
      <anchorfile>classveins_1_1_l_address.html</anchorfile>
      <anchor>ae44471bab1bf02043a23b341bf10cbb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isL2Broadcast</name>
      <anchorfile>classveins_1_1_l_address.html</anchorfile>
      <anchor>ab57d2608159a88d88eac02a09e4f4a13</anchor>
      <arglist>(const L2Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isL3Broadcast</name>
      <anchorfile>classveins_1_1_l_address.html</anchorfile>
      <anchor>ab572c1e24aecfcd33c2ad3722489f9d2</anchor>
      <arglist>(const L3Type &amp;pSrcAddr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCICommandInterface::Lane</name>
    <filename>classveins_1_1_tra_c_i_command_interface_1_1_lane.html</filename>
    <member kind="function">
      <type></type>
      <name>Lane</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane.html</anchorfile>
      <anchor>a7c8ab94bea14759df895e5550b13c38a</anchor>
      <arglist>(TraCICommandInterface *traci, std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>getShape</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane.html</anchorfile>
      <anchor>a839b9c522fc29ae35584d697e080cbf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRoadId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane.html</anchorfile>
      <anchor>a58ea1606fd7bac5d5e770b3c210f6c99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLength</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane.html</anchorfile>
      <anchor>ad1a3ac6fa8840ed1767b5b690f0e3f20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane.html</anchorfile>
      <anchor>a4937f6594ba0dee506b6d97c37cc1c8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeanSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane.html</anchorfile>
      <anchor>a442fc8e7b4570f353ba4d1516e3c7151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane.html</anchorfile>
      <anchor>a0e88514b1d5e012e2900a05dca2a2633</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane.html</anchorfile>
      <anchor>a85926044165bd797887617aa99eceaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>laneId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane.html</anchorfile>
      <anchor>ac31249e9fe5a652ad7d95586573bd721</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCICommandInterface::LaneAreaDetector</name>
    <filename>classveins_1_1_tra_c_i_command_interface_1_1_lane_area_detector.html</filename>
    <member kind="function">
      <type></type>
      <name>LaneAreaDetector</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane_area_detector.html</anchorfile>
      <anchor>afd789a6c8dc2daa46a463a23c0b891cf</anchor>
      <arglist>(TraCICommandInterface *traci, std::string laneAreaDetectorId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastStepVehicleNumber</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane_area_detector.html</anchorfile>
      <anchor>a1f2b431e934b040ef9c1e036a97130e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane_area_detector.html</anchorfile>
      <anchor>a5b21d0faee5b7a6c4bb5441b57dc52d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane_area_detector.html</anchorfile>
      <anchor>ad2a0af0c52a7f80e07d0165519fac3f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>laneAreaDetectorId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_lane_area_detector.html</anchorfile>
      <anchor>ac16ef6f300f93f41875d497f6fb56494</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::AnnotationManager::Line</name>
    <filename>classveins_1_1_annotation_manager_1_1_line.html</filename>
    <base>veins::AnnotationManager::Annotation</base>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_line.html</anchorfile>
      <anchor>ad3e30f9e30f3c7cd9883ad5df4ddb8f2</anchor>
      <arglist>(Coord p1, Coord p2, std::string color)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Line</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_line.html</anchorfile>
      <anchor>a4894e2403bf8fcce5385476f9bde806b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>p1</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_line.html</anchorfile>
      <anchor>ac7f3ffb5be941af06e7aee86a05ef3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>p2</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_line.html</anchorfile>
      <anchor>a6319c226e85d1481a6677480e7272246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>color</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_line.html</anchorfile>
      <anchor>a15e90c22f6b5ebcac958b1740d9b52f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_line.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::LinearMobility</name>
    <filename>classveins_1_1_linear_mobility.html</filename>
    <base>veins::BaseMobility</base>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_linear_mobility.html</anchorfile>
      <anchor>ac94ebc62ac059949810368634398004b</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>makeMove</name>
      <anchorfile>classveins_1_1_linear_mobility.html</anchorfile>
      <anchor>af310806b2b41572de1428e56474bba56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classveins_1_1_linear_mobility.html</anchorfile>
      <anchor>a506fdc3882892c0fc4427df73736010e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classveins_1_1_linear_mobility.html</anchorfile>
      <anchor>ac15a8403a49ab90e394234758cf94403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>acceleration</name>
      <anchorfile>classveins_1_1_linear_mobility.html</anchorfile>
      <anchor>a6cc58d8afa6f4b72ce1b30bb496b35fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepTarget</name>
      <anchorfile>classveins_1_1_linear_mobility.html</anchorfile>
      <anchor>a777e456e7bb150c0d542aa484ebaccff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::TraCITrafficLightProgram::Logic</name>
    <filename>structveins_1_1_tra_c_i_traffic_light_program_1_1_logic.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>id</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_program_1_1_logic.html</anchorfile>
      <anchor>a23cbe6fced2e5fa68ad08da994cbb6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>currentPhase</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_program_1_1_logic.html</anchorfile>
      <anchor>ad34346050a013d54c8dc002bae59bda7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Phase &gt;</type>
      <name>phases</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_program_1_1_logic.html</anchorfile>
      <anchor>a7b99367b3b5852b8fd222820c2f793e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>type</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_program_1_1_logic.html</anchorfile>
      <anchor>a4e06dd9e3f850df85c59c9e1dbd542c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>parameter</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_program_1_1_logic.html</anchorfile>
      <anchor>aa617c196c0107b7a741bd0dc1475aa8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Mac1609_4</name>
    <filename>classveins_1_1_mac1609__4.html</filename>
    <base>veins::BaseMacLayer</base>
    <base>veins::DemoBaseApplLayerToMac1609_4Interface</base>
    <class kind="class">veins::Mac1609_4::EDCA</class>
    <member kind="enumeration">
      <type></type>
      <name>t_access_category</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a3c543a9997d41cccc9b102680b9b163f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AC_BK</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a3c543a9997d41cccc9b102680b9b163fa2a464b5ad8cf62ba37bdd9be9bc55fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AC_BE</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a3c543a9997d41cccc9b102680b9b163fadf0e63de54f7f6817c5bc5db1ec4173c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AC_VI</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a3c543a9997d41cccc9b102680b9b163fa4d5fbb651f632a0cc987176714ed3fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AC_VO</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a3c543a9997d41cccc9b102680b9b163fa335e8c1a6a972e2bed72d9ec3d1a0a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AC_BK</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a3c543a9997d41cccc9b102680b9b163fa2a464b5ad8cf62ba37bdd9be9bc55fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AC_BE</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a3c543a9997d41cccc9b102680b9b163fadf0e63de54f7f6817c5bc5db1ec4173c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AC_VI</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a3c543a9997d41cccc9b102680b9b163fa4d5fbb651f632a0cc987176714ed3fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AC_VO</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a3c543a9997d41cccc9b102680b9b163fa335e8c1a6a972e2bed72d9ec3d1a0a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mac1609_4</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>adf767520848969c765327f92691e49e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Mac1609_4</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>ab43fd29f05b2463f7468555f14db2192</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannelSwitchingActive</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a432f5ef9eb2bdfc079b2f61d82123926</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getSwitchingInterval</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a0f447f4594aa2bfda0967b4f2fbf482e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCurrentChannelCCH</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a3c0eab3b89af8e56eb320d5b58607ddd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeServiceChannel</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a10d9d54636ddeb247ba3456a658ba00c</anchor>
      <arglist>(Channel channelNumber) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTxPower</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>acffe82751c83884858fef19af65b60a2</anchor>
      <arglist>(double txPower_mW)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMCS</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>acd3326e9c9ea60294de13aaa6d3af81f</anchor>
      <arglist>(MCS mcs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCCAThreshold</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a6255d9c021bb8061459356644b0d5c55</anchor>
      <arglist>(double ccaThreshold_dBm)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignal_t</type>
      <name>sigChannelBusy</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a723e30d0d724fe237b839d108e765a07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignal_t</type>
      <name>sigCollision</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a542e55450a6c3521117eaa2b4a96b941</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a8d43b34c9fb0b918e447343e5fc344d4</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a790d350d2c7c5639f2db5f4cb85d4422</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>aa33e88d786741d77a486617749ddf6d0</anchor>
      <arglist>(cMessage *) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>ad56ebe7dbf4be7aca4d00bfef4cdf412</anchor>
      <arglist>(cMessage *) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUpperControl</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>afafa38ad3bee9e0a7e14158fb45b315f</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a50663c27a2a1782c618309345687e142</anchor>
      <arglist>(cMessage *) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerControl</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a9c988936349c36370a7b6f282227a734</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBroadcast</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a896415761013bb53765f7bf4097f6639</anchor>
      <arglist>(Mac80211Pkt *macPkt, DeciderResult80211 *res)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setActiveChannel</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a2381e5f767525c8620bc1bcd94d05525</anchor>
      <arglist>(ChannelType state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendFrame</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>ae8c4ff04987993a2dfec9d6371b572c8</anchor>
      <arglist>(Mac80211Pkt *frame, omnetpp::simtime_t delay, Channel channelNr, MCS mcs, double txPower_mW)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>timeLeftInSlot</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a6bf2751274f2cdd58cb86a64bfac0a75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>timeLeftTillGuardOver</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>ad225a563914ab5b6f5d19ef168c07122</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>guardActive</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a820e9b04363f6b1a2eddb4082bd9ec14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>attachControlInfo</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a8b4340346aa17cf5d77d3291cf32f452</anchor>
      <arglist>(Mac80211Pkt *mac, Channel channelNr, MCS mcs, double txPower_mW)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>t_access_category</type>
      <name>mapUserPriority</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a1e687e9f5913bd5c619241f1905753ec</anchor>
      <arglist>(int prio)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>channelBusy</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a9f2753889d64a26c7b2cad5d0698573e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>channelBusySelf</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a67e75c8cc468f946f320b82d346a157b</anchor>
      <arglist>(bool generateTxOp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>channelIdle</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a1c6717faaa6b882f1d68153a4a22ae62</anchor>
      <arglist>(bool afterSwitch=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setParametersForBitrate</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a30fbd72a0e286f24dd07bbd14b5c043b</anchor>
      <arglist>(uint64_t bitrate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendAck</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a5d98cfbe6173ce7094c464fcdd3a944d</anchor>
      <arglist>(LAddress::L2Type recpAddress, unsigned long wsmId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUnicast</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>ab30f200fd2432b7b98653e7892f6ebd9</anchor>
      <arglist>(LAddress::L2Type srcAddr, std::unique_ptr&lt; BaseFrame1609_4 &gt; wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAck</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>ab44a1d3c5293f2b15891d5c9f772386d</anchor>
      <arglist>(const Mac80211Ack *ack)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAckTimeOut</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a429c3c17f4a99e763cf9608a85e6b56c</anchor>
      <arglist>(AckTimeOutMessage *ackTimeOutMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRetransmit</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>aa1baba4139ee2996286cca5640b251a5</anchor>
      <arglist>(t_access_category ac)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const LAddress::L2Type &amp;</type>
      <name>getMACAddress</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a7e122cb1f3eb15955be9719897448294</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>nextChannelSwitch</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a5197e4c682dab0242abe3a4c8b2bf7d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>nextMacEvent</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a4884f6b5dbb915c260d0aef78e8f2470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastIdle</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a109710e756951f1e22c9aa999b5212d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastBusy</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a55b015642535cf16b5a972b6908db46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelType</type>
      <name>activeChannel</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a1a89330156be5c3f6075642ab89565d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>t_access_category</type>
      <name>lastAC</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a037b2ef463f7ddb1ca592dde4b7e9aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseFrame1609_4 *</type>
      <name>lastWSM</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>ab13b1e124eaafbdf2e611fa74bed302d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; Mac80211Pkt &gt;</type>
      <name>lastMac</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a8f4009d0e6ff33f40fabf42cb70507a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a30bc3d1b2d2364f6199221d189b7a6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useSCH</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>af14de5d55d094df39235993d34b16353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Channel</type>
      <name>mySCH</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a5ca1150e35628ab93322efd05fc84518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; ChannelType, std::unique_ptr&lt; EDCA &gt; &gt;</type>
      <name>myEDCA</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a709226638dc3cd7aa9546982baf8639a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>idleChannel</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>ae50dfacce32ac523b34bac3468cbabdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsReceivedPackets</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a239e6da4e5d25be463964db5c8ee84f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsReceivedBroadcasts</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a2f56bfba93a7147f6603e595cc2bd7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsSentPackets</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a9666f1838eba56c29aa1f20b4033936c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsSentAcks</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a7ff6e3b9479881ce991232c75881c66c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsTXRXLostPackets</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>aaf718128550b639620afe26d8aac2a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsSNIRLostPackets</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>af496344b365d97c376c67234de5a8d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsDroppedPackets</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>af929094c599e2d5515cff08858b13a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsNumTooLittleTime</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a207032ef59a790b0703f7e7ba4e9fcd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsNumInternalContention</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a11dff8c5081cd5ded99c8093f3715d13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsNumBackoff</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a4186a2ca36d6ca8644f6264ea7ee789f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsSlotsBackoff</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a7c35f12276f4455b4e3cc81af707b6f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>statsTotalBusyTime</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>aafd0503143844331c41acb6656b00146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txPower</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>aa7f8133c54712adebbd2967b5f02601a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MCS</type>
      <name>mcs</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a5c4ce8513bfdb86b9160faaa8d4699de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myId</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a05e7aad5d68c3fdb6214983ab2e63c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useAcks</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a1870c8a8c2474ee8d09cd9256917eafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ackErrorRate</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a35b5001883a171eb1867d93caee051ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dot11RTSThreshold</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>afc324d642e254bf43f61f34771794ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dot11ShortRetryLimit</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a6bd31adeecb616c0b803e38a73f1382c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dot11LongRetryLimit</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>ac83436b149d81bfe52a05b7c1cd4708a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ackLength</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a26c9aa0e25185f2831f20603280b7197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>rxStartIndication</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a8ac2e2e17ee99b0e5675ae9351738e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stopIgnoreChannelStateMsg</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>af31186ca3962c10cd77becdbf4afb90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ignoreChannelState</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a96473186beeae945de62baff427ad91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>waitUntilAckRXorTimeout</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a44fdd0f8e00ad33b5a7742eed3133cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; unsigned long &gt;</type>
      <name>handledUnicastToApp</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>aa7bd39ddada20e05b5954617743ef302</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mac80211pToPhy11pInterface *</type>
      <name>phy11p</name>
      <anchorfile>classveins_1_1_mac1609__4.html</anchorfile>
      <anchor>a7095118fa4f1eed7b58effc8e8d39565</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Mac80211pToPhy11pInterface</name>
    <filename>classveins_1_1_mac80211p_to_phy11p_interface.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>BasePhyMessageKinds</name>
      <anchorfile>classveins_1_1_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>ae66d2531fa5b25582fd4c59e621ff4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHANNEL_IDLE</name>
      <anchorfile>classveins_1_1_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>ae66d2531fa5b25582fd4c59e621ff4cda541c48e65f07f8252a9958b3e08246b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHANNEL_BUSY</name>
      <anchorfile>classveins_1_1_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>ae66d2531fa5b25582fd4c59e621ff4cda02fb014c103401a3122070dfff327d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHANNEL_IDLE</name>
      <anchorfile>classveins_1_1_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>ae66d2531fa5b25582fd4c59e621ff4cda541c48e65f07f8252a9958b3e08246b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHANNEL_BUSY</name>
      <anchorfile>classveins_1_1_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>ae66d2531fa5b25582fd4c59e621ff4cda02fb014c103401a3122070dfff327d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mac80211pToPhy11pInterface</name>
      <anchorfile>classveins_1_1_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>a017297f23d0af231291d913eaff632f1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>changeListeningChannel</name>
      <anchorfile>classveins_1_1_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>a6473f166a232f1626ce2d000c59c894a</anchor>
      <arglist>(Channel channel)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCCAThreshold</name>
      <anchorfile>classveins_1_1_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>a7d90931837eb3629fe0be7c449de0667</anchor>
      <arglist>(double ccaThreshold_dBm)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notifyMacAboutRxStart</name>
      <anchorfile>classveins_1_1_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>ad0c6c359d7a84e7bcc00d0b0137c6c4b</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>requestChannelStatusIfIdle</name>
      <anchorfile>classveins_1_1_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>a8966971313796e433a8ec7915df594cc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>getFrameDuration</name>
      <anchorfile>classveins_1_1_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>a6f6f61e8f9e1129139b1dbb3900f2708</anchor>
      <arglist>(int payloadLengthBits, MCS mcs) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::MacToNetwControlInfo</name>
    <filename>classveins_1_1_mac_to_netw_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>MacToNetwControlInfo</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>a8558d5bdf390a207364c0fc0d4698052</anchor>
      <arglist>(const LAddress::L2Type &amp;lastHop, double ber=0, double rssi=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MacToNetwControlInfo</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>a33a682b006cd7d041a68620c9612a2db</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBitErrorRate</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>a43c1faca5658758aa83e8660a1334173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitErrorRate</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>abb4973339ca8211b4414ec9904410b92</anchor>
      <arglist>(double ber)</arglist>
    </member>
    <member kind="function">
      <type>const LAddress::L2Type &amp;</type>
      <name>getLastHopMac</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>a5b5086160b17b1532f71cc5b7331f62c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastHopMac</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>a2430bef495b159a4a4b0630e91d8321d</anchor>
      <arglist>(const LAddress::L2Type &amp;lastHop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const double</type>
      <name>getRSSI</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>a8ca684be6a4ff60a53b819a8df1bf460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRSSI</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>acc58e21930343eac7f1d07eccd02231b</anchor>
      <arglist>(double _rssi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *const</type>
      <name>setControlInfo</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>abb219489bbd1d6807c88cc3ea57f6741</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L2Type &amp;</type>
      <name>getAddress</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>a6f30eb4121bc40a37517fe7777f2c3bb</anchor>
      <arglist>(cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L2Type &amp;</type>
      <name>getAddressFromControlInfo</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>ab2bbb33d50d1c89ab82065af204f2a4c</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitErrorRate</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>ae39caba8d2a5670f10644402a936e84d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>lastHopMac</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>a26bc0736b9e16b339be02e392cd2d000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rssi</name>
      <anchorfile>classveins_1_1_mac_to_netw_control_info.html</anchorfile>
      <anchor>a293b44193e0223f24d210e659e3d8a3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::MacToPhyControlInfo11p</name>
    <filename>structveins_1_1_mac_to_phy_control_info11p.html</filename>
    <member kind="function">
      <type></type>
      <name>MacToPhyControlInfo11p</name>
      <anchorfile>structveins_1_1_mac_to_phy_control_info11p.html</anchorfile>
      <anchor>a79386347b03ddfa096fff3d740c2bdd6</anchor>
      <arglist>(Channel channelNr, MCS mcs, double txPower_mW)</arglist>
    </member>
    <member kind="variable">
      <type>Channel</type>
      <name>channelNr</name>
      <anchorfile>structveins_1_1_mac_to_phy_control_info11p.html</anchorfile>
      <anchor>a95fa6cd3178700bef5a4bb7a77948d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MCS</type>
      <name>mcs</name>
      <anchorfile>structveins_1_1_mac_to_phy_control_info11p.html</anchorfile>
      <anchor>a111acb1befa509c68d08e35d8c1ef771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>txPower_mW</name>
      <anchorfile>structveins_1_1_mac_to_phy_control_info11p.html</anchorfile>
      <anchor>a12e4204bb9d036ca43543fc8890d43fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::MacToPhyInterface</name>
    <filename>classveins_1_1_mac_to_phy_interface.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>BasePhyMessageKinds</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX_OVER</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6aadb780dab2ecd71b4a72ef6865ae57b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RADIO_SWITCHING_OVER</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6ac08a140498e3b4f22fe97ce40da048d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AIR_FRAME</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6a12e1f7e2d180711c97bf22cff842fb5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PHY_RX_START</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6ab87249c0fcc60ca29f9031dd4500a90c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PHY_RX_END_WITH_SUCCESS</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6abe9205b8d611be3ac9c2d61150620964</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PHY_RX_END_WITH_FAILURE</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6aadbfba41883df79911c46345d2598c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_PHY_KIND</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6a3483eae65d24fd66bb1e5ad1266d34ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX_OVER</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6aadb780dab2ecd71b4a72ef6865ae57b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RADIO_SWITCHING_OVER</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6ac08a140498e3b4f22fe97ce40da048d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AIR_FRAME</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6a12e1f7e2d180711c97bf22cff842fb5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PHY_RX_START</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6ab87249c0fcc60ca29f9031dd4500a90c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PHY_RX_END_WITH_SUCCESS</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6abe9205b8d611be3ac9c2d61150620964</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PHY_RX_END_WITH_FAILURE</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6aadbfba41883df79911c46345d2598c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_PHY_KIND</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>af1ccfeef452f7497a4fbeeba3822a4e6a3483eae65d24fd66bb1e5ad1266d34ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacToPhyInterface</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>a85cba10f0f7ca2eb9b4b2991760c06f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>a418627f51450e9b6eb866eae26c69f14</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>a4d5879fb9c208fe6bad1ee57f2e6d445</anchor>
      <arglist>(int rs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCurrentRadioChannel</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>a7df083be56f6fa877e61ee4c48c12a2a</anchor>
      <arglist>(int newRadioChannel)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>a256f236ba20a88ee1c1dd7fd3b5d3531</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNbRadioChannels</name>
      <anchorfile>classveins_1_1_mac_to_phy_interface.html</anchorfile>
      <anchor>adeaf36c4a8f8f8ab1055fbaccc35682c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::MobileHostObstacle</name>
    <filename>classveins_1_1_mobile_host_obstacle.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; Coord &gt;</type>
      <name>Coords</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>aaf2f68ff629004cf3f12bf056963051a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobileHostObstacle</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>aaec4a2646a936135c49ecd3fa0f40a17</anchor>
      <arglist>(std::vector&lt; AntennaPosition &gt; initialAntennaPositions, BaseMobility *mobility, double length, double hostPositionOffset, double width, double height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMobility</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a1521466a9402e143b68b24b88412b2b8</anchor>
      <arglist>(BaseMobility *mobility)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLength</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a8adf65810a00f83c0e9bfdd5a9195f77</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHostPositionOffset</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>af7ebaddbc6cb12c53a5120b57c141bfa</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a6ec04846c06814cbe320cc8028ca5862</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a862531442e9f2a0059e485712b310747</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; AntennaPosition &gt; &amp;</type>
      <name>getInitialAntennaPositions</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a3b0029cdd189010934f288937f9dff8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BaseMobility *</type>
      <name>getMobility</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a5eebf14224f0bbc91fe86415ed755a1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLength</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a63d7c51d7d85f6c30304f93a2a22292c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getHostPositionOffset</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>ac2e5154efb2c6e0fd0b541ee2ec2864c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWidth</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a536bcf22c33cdfba00338852286934e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getHeight</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>abf4dba0f845d5262528ae32145a7be09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coords</type>
      <name>getShape</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a68f0e2e0e3d53d5f9a0f4dda6d169f3b</anchor>
      <arglist>(simtime_t t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>maybeInBounds</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a917b34fd21a31e610dd2f03cecbe73d8</anchor>
      <arglist>(double x1, double y1, double x2, double y2, simtime_t t) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getIntersectionPoint</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>aed1945c5faca9c93208913d9bf9abf79</anchor>
      <arglist>(const Coord &amp;senderPos, const Coord &amp;receiverPos, simtime_t t) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; AntennaPosition &gt;</type>
      <name>initialAntennaPositions</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a1fad9bd350a7186ca64f8b9229a25d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseMobility *</type>
      <name>mobility</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>aa1672635baad1a0d368e0728df5e1615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>length</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a9f4f1f13e2398da64cdc059c80b69f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>hostPositionOffset</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a95bfee1ac1d7ddac2b1073a0641cadbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>width</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>a075d9117d94026905cf1c17b9b04a61f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>height</name>
      <anchorfile>classveins_1_1_mobile_host_obstacle.html</anchorfile>
      <anchor>aaeab03850e8aedd8088eb4f098bb570e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Move</name>
    <filename>classveins_1_1_move.html</filename>
    <member kind="function">
      <type></type>
      <name>Move</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>ad9661a35f9d1f2e658aa1ea95cc4fe1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Move</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a482bd11f9cd4a83285a0df94a5ffc5db</anchor>
      <arglist>(const Move &amp;mSrc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSpeed</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a983899326db64c24fef47811e88c0216</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a51a6f1befe0836b69a794efe32af2e22</anchor>
      <arglist>(double speed)</arglist>
    </member>
    <member kind="function">
      <type>const Coord &amp;</type>
      <name>getStartPos</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a72b382a849acc025fc1391c29e90b4e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getStartTime</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a826dea89c416d925c3d1fca2cae08d21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>ae7135773d10fdf52bec4e5c9a398a092</anchor>
      <arglist>(const Coord &amp;startPos, simtime_t_cref startTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>ac0d25d2efa46e72cacc26e5db105e5f2</anchor>
      <arglist>(const Coord &amp;startPos)</arglist>
    </member>
    <member kind="function">
      <type>const Coord &amp;</type>
      <name>getDirection</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a4b6924bf3edee91cb30397b832a84436</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Coord &amp;</type>
      <name>getOrientation</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a4964ba2446c15664192067c88f3157c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientationByVector</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>aef8fd825481c69e09785d096daa6f3fe</anchor>
      <arglist>(const Coord &amp;orientation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectionByVector</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>ae583b55d97cf1f59cbb000a584efb67d</anchor>
      <arglist>(const Coord &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectionByTarget</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a44d6e37f77b89e7891cb4c805e3c3959</anchor>
      <arglist>(const Coord &amp;target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getPositionAt</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a2d86d39dfd7dedf10af25f1e42863d09</anchor>
      <arglist>(simtime_t_cref actualTime=simTime()) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getStartPosition</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>ab9075d204ed7563bdc8118efe377f4c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a5ef4232ea4ce638ddd70227131c0050f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>startPos</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>ab2ab592c1424032932fc35a1111408cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lastPos</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a5e3a19068368c8fcacf44e83782425f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>af3b2f9fe057fdcf07c00896e99d1552b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>orientation</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a0debc23e70ef21b7a46650dc381bc163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>direction</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>aeda09403edb4661fbb26c0342761f796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classveins_1_1_move.html</anchorfile>
      <anchor>a42fd5c2fcd56315781015aeec7434fbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::MyVeinsApp</name>
    <filename>classveins_1_1_my_veins_app.html</filename>
    <base>veins::DemoBaseApplLayer</base>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_my_veins_app.html</anchorfile>
      <anchor>a73f5b68ba9bb4b66b2a3fecf875be114</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_my_veins_app.html</anchorfile>
      <anchor>a207b9ec043afb8516433afe5bf34529a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onBSM</name>
      <anchorfile>classveins_1_1_my_veins_app.html</anchorfile>
      <anchor>aee1b6b6fc8473c7631e0aa4109be2dc3</anchor>
      <arglist>(DemoSafetyMessage *bsm) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onWSM</name>
      <anchorfile>classveins_1_1_my_veins_app.html</anchorfile>
      <anchor>a9d3d36ea3dc4b0c6971ab739dc49262f</anchor>
      <arglist>(BaseFrame1609_4 *wsm) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onWSA</name>
      <anchorfile>classveins_1_1_my_veins_app.html</anchorfile>
      <anchor>a92d3d5cb1a8e058d45e695da894d2e57</anchor>
      <arglist>(DemoServiceAdvertisment *wsa) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_my_veins_app.html</anchorfile>
      <anchor>aa3e39be56f1316a986b039fc4e2002df</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classveins_1_1_my_veins_app.html</anchorfile>
      <anchor>aa22adfb8dcb4f499757e59c7412b4c9f</anchor>
      <arglist>(cObject *obj) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::NakagamiFading</name>
    <filename>classveins_1_1_nakagami_fading.html</filename>
    <base>veins::AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>NakagamiFading</name>
      <anchorfile>classveins_1_1_nakagami_fading.html</anchorfile>
      <anchor>ad39b3c4d4a8df15217eacadf6f9de725</anchor>
      <arglist>(cComponent *owner, bool constM, double m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NakagamiFading</name>
      <anchorfile>classveins_1_1_nakagami_fading.html</anchorfile>
      <anchor>aded06e65be5739ec8f8a433d9a16676b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterSignal</name>
      <anchorfile>classveins_1_1_nakagami_fading.html</anchorfile>
      <anchor>a630ff5ca1212baf8d9afac0d017229da</anchor>
      <arglist>(Signal *signal) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>constM</name>
      <anchorfile>classveins_1_1_nakagami_fading.html</anchorfile>
      <anchor>a1708923548ce57818db0787f4d652d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m</name>
      <anchorfile>classveins_1_1_nakagami_fading.html</anchorfile>
      <anchor>aabf6107100390e2ff30ffff5f7d0515a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::NetwToMacControlInfo</name>
    <filename>classveins_1_1_netw_to_mac_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>NetwToMacControlInfo</name>
      <anchorfile>classveins_1_1_netw_to_mac_control_info.html</anchorfile>
      <anchor>a527e46b14a5b24a12f7bfea02d2bcdb4</anchor>
      <arglist>(const LAddress::L2Type &amp;addr=LAddress::L2NULL())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NetwToMacControlInfo</name>
      <anchorfile>classveins_1_1_netw_to_mac_control_info.html</anchorfile>
      <anchor>a66eaaec8ec84f024e83957d8f322ad7d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getNextHopMac</name>
      <anchorfile>classveins_1_1_netw_to_mac_control_info.html</anchorfile>
      <anchor>ae030fd89a148995e91badb4e2cf29972</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getDest</name>
      <anchorfile>classveins_1_1_netw_to_mac_control_info.html</anchorfile>
      <anchor>a3883819e19c0a72e762ade4b78615515</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopMac</name>
      <anchorfile>classveins_1_1_netw_to_mac_control_info.html</anchorfile>
      <anchor>a2c96239f446cf2eb952c6bbacc74d951</anchor>
      <arglist>(const LAddress::L2Type &amp;addr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDest</name>
      <anchorfile>classveins_1_1_netw_to_mac_control_info.html</anchorfile>
      <anchor>a54eb7f6a3e18d649c812be0b6a8335a7</anchor>
      <arglist>(const LAddress::L2Type &amp;addr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *const</type>
      <name>setControlInfo</name>
      <anchorfile>classveins_1_1_netw_to_mac_control_info.html</anchorfile>
      <anchor>a4a0d5e1cdc823606fab99b915a96263e</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pDestAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L2Type &amp;</type>
      <name>getDestFromControlInfo</name>
      <anchorfile>classveins_1_1_netw_to_mac_control_info.html</anchorfile>
      <anchor>add42e098a1af72c3fbc8be746d04b27f</anchor>
      <arglist>(const cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>nextHopMac</name>
      <anchorfile>classveins_1_1_netw_to_mac_control_info.html</anchorfile>
      <anchor>a3c8a0e0704b01cce7bf673d03cd343d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::NicEntry</name>
    <filename>classveins_1_1_nic_entry.html</filename>
    <base>veins::HasLogProxy</base>
    <class kind="class">veins::NicEntry::NicEntryComparator</class>
    <member kind="typedef">
      <type>std::map&lt; const NicEntry *, cGate *, NicEntryComparator &gt;</type>
      <name>GateList</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>a1b07b487f78d7e975a30c96f871a84f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NicEntry</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>a79fa09d46b9b6d54d8558080f8008eef</anchor>
      <arglist>(cComponent *owner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntry</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>a2076d00aa2e76fae00d8c8ec09619bd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>ae9aaafa024225be75600a1112bb8f603</anchor>
      <arglist>(NicEntry *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>a34b11cdcfdc126c8a91dd599a6db4416</anchor>
      <arglist>(NicEntry *)=0</arglist>
    </member>
    <member kind="function">
      <type>const GateList &amp;</type>
      <name>getGateList</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>a8f4a0017b7cf84a7ebfaa760f9f8a49d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>a6cad6d9251bcc1892198b10b8c7d1956</anchor>
      <arglist>(const NicEntry *other)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>getOutGateTo</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>a15b81ba7b224e525eb3b2fcbef0588bd</anchor>
      <arglist>(const NicEntry *to)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nicId</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>abf45252d0cdb2be5e5971a9b7d4cab82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>nicPtr</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>a9ebf11efc744958cf76e230d4462d5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hostId</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>a2bcb857665462025a375d8019a904f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>pos</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>ab55c4147fd2af97cafb479e279de09b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Heading</type>
      <name>heading</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>a29b725f9678cc7587d99c9dafbedcd41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ChannelAccess *</type>
      <name>chAccess</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>ab619b74c27d789eee1a2aebb9e7393c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateList</type>
      <name>outConns</name>
      <anchorfile>classveins_1_1_nic_entry.html</anchorfile>
      <anchor>a6226b49a7fcb4aaa20fd16409857c7b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::NicEntry::NicEntryComparator</name>
    <filename>classveins_1_1_nic_entry_1_1_nic_entry_comparator.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classveins_1_1_nic_entry_1_1_nic_entry_comparator.html</anchorfile>
      <anchor>a148113020e06da0835b76dfea4ffd0b4</anchor>
      <arglist>(const NicEntry *nic1, const NicEntry *nic2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::NicEntryDebug</name>
    <filename>classveins_1_1_nic_entry_debug.html</filename>
    <base>veins::NicEntry</base>
    <member kind="function">
      <type></type>
      <name>NicEntryDebug</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>a748472124d7a8319b6d5c2d1c16400bf</anchor>
      <arglist>(cComponent *owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NicEntryDebug</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>aeb00c13b7af8e82cedc5c301294f1607</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectTo</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>aaf32efb647f62b055f65198bba49c535</anchor>
      <arglist>(NicEntry *other) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnectFrom</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>a612304e98ae081a4cdc7f4e936d657e3</anchor>
      <arglist>(NicEntry *other) override</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; cGate * &gt;</type>
      <name>GateStack</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>aa9eb1d777603368090e6c1084554cd3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>requestInGate</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>aa028678e801ba669ad47a6588b2ad90a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>requestOutGate</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>ad601c375fa2fd737f88b3a475a06ff45</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>collectGates</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>ae4c6e480d8b2f3fc4199a7a8314ab2df</anchor>
      <arglist>(const char *pattern, GateStack &amp;gates)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectFreeGates</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>aac3b943e56b211541596a73f6437608a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inCnt</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>a28a3c6cc0abacf229b2924b7de81996c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>outCnt</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>a8ad5fe1d13c7423f70ea51d9b7b23c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>checkFreeGates</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>a46e2f71a24f3d2ec5ecf4190eda6b407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateStack</type>
      <name>freeInGates</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>a9e49247dc3892b2622b8e3314885533a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateStack</type>
      <name>freeOutGates</name>
      <anchorfile>classveins_1_1_nic_entry_debug.html</anchorfile>
      <anchor>a47365728cec85a674b92e1fc0a9ba1ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::NicEntryDirect</name>
    <filename>classveins_1_1_nic_entry_direct.html</filename>
    <base>veins::NicEntry</base>
    <member kind="function">
      <type></type>
      <name>NicEntryDirect</name>
      <anchorfile>classveins_1_1_nic_entry_direct.html</anchorfile>
      <anchor>aeb9969d881ee3ccd5234a433598186c3</anchor>
      <arglist>(cComponent *owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NicEntryDirect</name>
      <anchorfile>classveins_1_1_nic_entry_direct.html</anchorfile>
      <anchor>a655d7e81efbfdf8ba9794cc298b847a3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectTo</name>
      <anchorfile>classveins_1_1_nic_entry_direct.html</anchorfile>
      <anchor>ab1557da6035ee6a67c77a353e34a62fd</anchor>
      <arglist>(NicEntry *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnectFrom</name>
      <anchorfile>classveins_1_1_nic_entry_direct.html</anchorfile>
      <anchor>ac1b759625ce6e80c6d5947188addb227</anchor>
      <arglist>(NicEntry *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::NistErrorRate</name>
    <filename>classveins_1_1_nist_error_rate.html</filename>
    <member kind="function">
      <type></type>
      <name>NistErrorRate</name>
      <anchorfile>classveins_1_1_nist_error_rate.html</anchorfile>
      <anchor>aa481af6d7089b110a529357eb7d9e50d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getChunkSuccessRate</name>
      <anchorfile>classveins_1_1_nist_error_rate.html</anchorfile>
      <anchor>a25b315284a666a5065540f8f1da1cbe5</anchor>
      <arglist>(unsigned int datarate, enum Bandwidth bw, double snr_mW, uint32_t nbits)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>calculatePe</name>
      <anchorfile>classveins_1_1_nist_error_rate.html</anchorfile>
      <anchor>aa2df206d0e5cc31a3c3587438c7d5b74</anchor>
      <arglist>(double p, uint32_t bValue)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>getBpskBer</name>
      <anchorfile>classveins_1_1_nist_error_rate.html</anchorfile>
      <anchor>a18175d82399d69438e554cb95c7604a3</anchor>
      <arglist>(double snr)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>getQpskBer</name>
      <anchorfile>classveins_1_1_nist_error_rate.html</anchorfile>
      <anchor>ab94ccc90f9c0e35de2dd00563f0e5032</anchor>
      <arglist>(double snr)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>get16QamBer</name>
      <anchorfile>classveins_1_1_nist_error_rate.html</anchorfile>
      <anchor>a1808f09736f8a581305d5ff4a58e2555</anchor>
      <arglist>(double snr)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>get64QamBer</name>
      <anchorfile>classveins_1_1_nist_error_rate.html</anchorfile>
      <anchor>aeeb73f566759330ab5b9f3c39beb1b86</anchor>
      <arglist>(double snr)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>getFecBpskBer</name>
      <anchorfile>classveins_1_1_nist_error_rate.html</anchorfile>
      <anchor>a03eb0d0c7cc0a63f450ea688ddb65117</anchor>
      <arglist>(double snr, uint32_t nbits, uint32_t bValue)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>getFecQpskBer</name>
      <anchorfile>classveins_1_1_nist_error_rate.html</anchorfile>
      <anchor>a5814e5bd473a3127bf659d82edfd97fa</anchor>
      <arglist>(double snr, uint32_t nbits, uint32_t bValue)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>getFec16QamBer</name>
      <anchorfile>classveins_1_1_nist_error_rate.html</anchorfile>
      <anchor>a457f142bf69a3b9d28e8a5a37e48f1a7</anchor>
      <arglist>(double snr, uint32_t nbits, uint32_t bValue)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>getFec64QamBer</name>
      <anchorfile>classveins_1_1_nist_error_rate.html</anchorfile>
      <anchor>ac41a5562bd3d9b5b50352301af0f1189</anchor>
      <arglist>(double snr, uint32_t nbits, uint32_t bValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Obstacle</name>
    <filename>classveins_1_1_obstacle.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; Coord &gt;</type>
      <name>Coords</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>aef7623fe7b0a2890dd53f782dbed1a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Obstacle</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>ab36739aab4aa9c4850dbf1e0a764b831</anchor>
      <arglist>(std::string id, std::string type, double attenuationPerCut, double attenuationPerMeter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShape</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>a805aed4d3b239e0163f06aa70bfb0b73</anchor>
      <arglist>(Coords shape)</arglist>
    </member>
    <member kind="function">
      <type>const Coords &amp;</type>
      <name>getShape</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>a6e4559fb9e1dcf379cf347b8378fc6b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Coord</type>
      <name>getBboxP1</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>ab3d959327b9230a4cd4569e5355c4257</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Coord</type>
      <name>getBboxP2</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>aea98995df713a70e46a917b765a692e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>a3c29c3bd90ea0e05d70090a121d9df9f</anchor>
      <arglist>(Coord Point) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getType</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>ae441a661c1828835c521b48629527afc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getId</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>ab8adf87f2ace62d1bcad515ad6870aa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAttenuationPerCut</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>a069a2d39bad2a1fdc1f19737e8efa0d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAttenuationPerMeter</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>abe498da78af5d92585b4333df680e79a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getIntersections</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>a9362992355ee44e8306f88de8fe06542</anchor>
      <arglist>(const Coord &amp;senderPos, const Coord &amp;receiverPos) const</arglist>
    </member>
    <member kind="variable">
      <type>AnnotationManager::Annotation *</type>
      <name>visualRepresentation</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>acbca76ee386622403786473f87fb92d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>id</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>a9d04d3da08c2d50b4a74f308642e7a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>ac4857bb39654281923b1754111964e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>attenuationPerCut</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>af6b412486fd7d07febba12269d56b024</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>attenuationPerMeter</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>ab25a374c8db2ec8d1896fbf912a24fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coords</type>
      <name>coords</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>a53b62c7a694f7734c4e590ec247c2c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>bboxP1</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>a5d038c8c718e7c193b859c1d97f7dcf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>bboxP2</name>
      <anchorfile>classveins_1_1_obstacle.html</anchorfile>
      <anchor>aba35d0d554f87a9e969386fb469eb043</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::ObstacleControl</name>
    <filename>classveins_1_1_obstacle_control.html</filename>
    <class kind="struct">veins::ObstacleControl::CacheKey</class>
    <member kind="function">
      <type></type>
      <name>~ObstacleControl</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a552e7c4a2c1a63ef1dae11bf763da2bd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>adffe1ace6d536aa9a27402006707962f</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>abc008189140324e7a61061b0a6ebec58</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>afd6b8fb9e0d1fee9e9390bd34f89ca96</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a8e70bcdbca0061b5d8320ceb3be8f45d</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>ae44772f7d064e31ab18301a0df6f2bd5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFromXml</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a1e5fceb8e8d9616622cc12551231c9d3</anchor>
      <arglist>(cXMLElement *xml)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFromTypeAndShape</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a5854911238d0af091d44f155bb768437</anchor>
      <arglist>(std::string id, std::string typeId, std::vector&lt; Coord &gt; shape)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a206a6e9155d1b201841d0718e65ed30f</anchor>
      <arglist>(Obstacle obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a3c5fb281ac00c947afe86d5e4bf99759</anchor>
      <arglist>(const Obstacle *obstacle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTypeSupported</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>ac366713391101982a192cd13d983997e</anchor>
      <arglist>(std::string type)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAttenuationPerCut</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a0f7d19e7e419e086c046586b5741adc8</anchor>
      <arglist>(std::string type)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAttenuationPerMeter</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>ab596fc592faec7888953baf1772995cc</anchor>
      <arglist>(std::string type)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; Obstacle *, std::vector&lt; double &gt; &gt; &gt;</type>
      <name>getIntersections</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a7bb694941ec27d078605e730c78644af</anchor>
      <arglist>(const Coord &amp;senderPos, const Coord &amp;receiverPos) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calculateAttenuation</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a2605967770f04849d9319757e66305bf</anchor>
      <arglist>(const Coord &amp;senderPos, const Coord &amp;receiverPos) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; CacheKey, double &gt;</type>
      <name>CacheEntries</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a7e0fa91907d81f6285e2001e2aa8c174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>obstaclesXml</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>aafc6dfb87b9ff3c975aed94f0d93a86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>gridCellSize</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>ad85e4aa9ff41aaca6e53aa789d1c2cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::unique_ptr&lt; Obstacle &gt; &gt;</type>
      <name>obstacleOwner</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a36f06a8f4c0ec26e0c1ffaa3911c5dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>ad3d38a456f75d59a02dc63521c079570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager::Group *</type>
      <name>annotationGroup</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a909dc17792a6e551c7008bf01eb81013</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>perCut</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>ac100443b1eff7c2d7a3002bf5e50bcec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>perMeter</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a8c9d332af925d6dceeb823e9369a87f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CacheEntries</type>
      <name>cacheEntries</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a2f1fe7406e2b0448d90574f17f408565</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BBoxLookup</type>
      <name>bboxLookup</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a281f2ae0ed4486eb54af93b53ea2a98e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isBboxLookupDirty</name>
      <anchorfile>classveins_1_1_obstacle_control.html</anchorfile>
      <anchor>a05cdb41ead46d7a92db5d7fd3157a67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::ObstacleControlAccess</name>
    <filename>classveins_1_1_obstacle_control_access.html</filename>
    <member kind="function">
      <type></type>
      <name>ObstacleControlAccess</name>
      <anchorfile>classveins_1_1_obstacle_control_access.html</anchorfile>
      <anchor>ab9d03b890b6b38d47883e4d8df5461cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObstacleControl *</type>
      <name>getIfExists</name>
      <anchorfile>classveins_1_1_obstacle_control_access.html</anchorfile>
      <anchor>a835e99d76a4f98090ea3be8f57fd2003</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::ParBuffer</name>
    <filename>classveins_1_1_par_buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>ParBuffer</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>acc4dd7f95e35874d813c36c050d2e7ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParBuffer</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>a929b5b02f9e0536bfa57f909b4916b98</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>ParBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>a910fe8aea7e633757c59349e56d49cfe</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>next</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>a80cbd0beb51c533aa81d19518ddebfd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>afc1d1f8c2fcb4969f539578cbdf585e9</anchor>
      <arglist>(double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ParBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>abf511badae3746728888a7689c077858</anchor>
      <arglist>(int &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ParBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>a04a93050df03209c075337bb15c3fcba</anchor>
      <arglist>(std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>af7729af507addeead174df36dd92d10b</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>ae1a85ffa6aadb80cb1dc2c104ae141d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>a9e4a834038eaedade0d3f67db8b56ffb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char</type>
      <name>SEP</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>a121ac7a03f1c13aa8828e8984019df00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::stringstream</type>
      <name>outBuffer</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>adba16fe3baf731dddd0a839d590d5249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>inBuffer</name>
      <anchorfile>classveins_1_1_par_buffer.html</anchorfile>
      <anchor>a29e1aab5c7393834226cf4f3f6bdd702</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::PassedMessage</name>
    <filename>classveins_1_1_passed_message.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>gates_t</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>ad62a053981881961066aa7ab593763f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER_DATA</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>ad62a053981881961066aa7ab593763f4a50768b2c6bfa0ce1155cc44d61a80dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER_CONTROL</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>ad62a053981881961066aa7ab593763f4a05f73d6eb344f40693da43fc384d476f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER_DATA</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>ad62a053981881961066aa7ab593763f4a743342ee12de2c92564ce9a2250c2f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER_CONTROL</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>ad62a053981881961066aa7ab593763f4ad56a3c1db89fd5891048b886aa7ce398</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>direction_t</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>aad998fef6b11f7e6f36b00afe1704055</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCOMING</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>aad998fef6b11f7e6f36b00afe1704055a88c0c34de297657572a4ac0dd076284e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTGOING</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>aad998fef6b11f7e6f36b00afe1704055af397cb5176390851b090655d9d5e2c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER_DATA</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>ad62a053981881961066aa7ab593763f4a50768b2c6bfa0ce1155cc44d61a80dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER_CONTROL</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>ad62a053981881961066aa7ab593763f4a05f73d6eb344f40693da43fc384d476f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER_DATA</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>ad62a053981881961066aa7ab593763f4a743342ee12de2c92564ce9a2250c2f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER_CONTROL</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>ad62a053981881961066aa7ab593763f4ad56a3c1db89fd5891048b886aa7ce398</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCOMING</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>aad998fef6b11f7e6f36b00afe1704055a88c0c34de297657572a4ac0dd076284e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTGOING</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>aad998fef6b11f7e6f36b00afe1704055af397cb5176390851b090655d9d5e2c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>gateToString</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>ab094ae65d99ba4f88dcad94d4062f26a</anchor>
      <arglist>(gates_t g)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fromModule</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>ab641edf252b926d59f77ec6eeb73c461</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gates_t</type>
      <name>gateType</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>aff7bccbd6b02572d6522e1910b8b06cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>direction_t</type>
      <name>direction</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>ac9c44c1890086520b3693f35d94d6663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>kind</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>a5f322ac3c49a550d1d86b96106fc4686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>classveins_1_1_passed_message.html</anchorfile>
      <anchor>a58608b3883bc269f5b5f3526c711a351</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::PERModel</name>
    <filename>classveins_1_1_p_e_r_model.html</filename>
    <base>veins::AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>PERModel</name>
      <anchorfile>classveins_1_1_p_e_r_model.html</anchorfile>
      <anchor>af09ff455cad6de89ab1a3a3db8a5a968</anchor>
      <arglist>(cComponent *owner, double per)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterSignal</name>
      <anchorfile>classveins_1_1_p_e_r_model.html</anchorfile>
      <anchor>adb563a9e10232d935d4489869ffb5ad3</anchor>
      <arglist>(Signal *) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>packetErrorRate</name>
      <anchorfile>classveins_1_1_p_e_r_model.html</anchorfile>
      <anchor>a626ff361772c7609ae8fc967ed801d8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::TraCITrafficLightProgram::Phase</name>
    <filename>structveins_1_1_tra_c_i_traffic_light_program_1_1_phase.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isGreenPhase</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_program_1_1_phase.html</anchorfile>
      <anchor>a8e4c8925fbf71afa56be95a829c56eeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>duration</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_program_1_1_phase.html</anchorfile>
      <anchor>a7f48bdf6364ddce69d01fc7df1d9c82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>state</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_program_1_1_phase.html</anchorfile>
      <anchor>a9e5d13acfdc961e5fd70035b2da43e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>minDuration</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_program_1_1_phase.html</anchorfile>
      <anchor>abb3ae1c540e58098d0e438616a20d16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxDuration</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_program_1_1_phase.html</anchorfile>
      <anchor>aa584f51f00498bc427309b522b30ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int32_t &gt;</type>
      <name>next</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_program_1_1_phase.html</anchorfile>
      <anchor>a50815f8fa06ac4508118f83692571f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_program_1_1_phase.html</anchorfile>
      <anchor>a672512be381fbeea3ba643a06e3f2d61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::PhyLayer80211p</name>
    <filename>classveins_1_1_phy_layer80211p.html</filename>
    <base>veins::BasePhyLayer</base>
    <base>veins::Mac80211pToPhy11pInterface</base>
    <base>veins::Decider80211pToPhy80211pInterface</base>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>abdd1c62986d1fd220eb5e51d4458811a</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCCAThreshold</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a25b22bb2ebf223a188fd2df7e136b2ed</anchor>
      <arglist>(double ccaThreshold_dBm) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCCAThreshold</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>ac968284a581471b8a4af04051b0adf68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notifyMacAboutRxStart</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a33784911a639c9158a730803684e651b</anchor>
      <arglist>(bool enable) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestChannelStatusIfIdle</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a6851aaac3c59b66568847e75691ba3e5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>ProtocolIds</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a419745f4760e70d0c7c4ffd7452f6caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IEEE_80211</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a419745f4760e70d0c7c4ffd7452f6caaabf4d6aee83d2b1c6d62df12fcc9456c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IEEE_80211</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a419745f4760e70d0c7c4ffd7452f6caaabf4d6aee83d2b1c6d62df12fcc9456c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; AnalogueModel &gt;</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>ae9a4ddccf5652f8376aee93c2be56730</anchor>
      <arglist>(std::string name, ParameterMap &amp;params) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; AnalogueModel &gt;</type>
      <name>initializeSimplePathlossModel</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a39de6f5df5de6de9c720edc8744d7fc9</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; AnalogueModel &gt;</type>
      <name>initializeAntennaModel</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a2f235c378a9a32a6bb0234262ebaa872</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; AnalogueModel &gt;</type>
      <name>initializeBreakpointPathlossModel</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a382ee7b30a3ab1670cc2cca0b433446d</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; AnalogueModel &gt;</type>
      <name>initializeSimpleObstacleShadowing</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a59691cd6e2658d2a6ec8eb41423591f9</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; AnalogueModel &gt;</type>
      <name>initializeVehicleObstacleShadowing</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>aa801ec3c38ba886d90b1889480f9aac0</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; AnalogueModel &gt;</type>
      <name>initializePERModel</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>aa180d8748bbcc7b915065a51e4c924ac</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; AnalogueModel &gt;</type>
      <name>initializeTwoRayInterferenceModel</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a25aee87153fffc8a415d3d38e55c8c00</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; AnalogueModel &gt;</type>
      <name>initializeNakagamiFading</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a1ffc33ad38689037c99848f90c29ec6b</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; Decider &gt;</type>
      <name>getDeciderFromName</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a2c50b013088841608612b0a7c8b92799</anchor>
      <arglist>(std::string name, ParameterMap &amp;params) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; Decider &gt;</type>
      <name>initializeDecider80211p</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>ae62c1c399fe19bde81152c617fc5a38b</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; AirFrame &gt;</type>
      <name>createAirFrame</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a220c7a218c48b5e59d98ddee5fab7bd3</anchor>
      <arglist>(cPacket *macPkt) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>attachSignal</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a1d1b85c74e35e6b7dd8a906a290e559c</anchor>
      <arglist>(AirFrame *airFrame, cObject *ctrlInfo) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changeListeningChannel</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a0abed02aba6f921368db786339294cc7</anchor>
      <arglist>(Channel channel) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getFrameDuration</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>acb436445ef368188f4338fb2f197aaf9</anchor>
      <arglist>(int payloadLengthBits, MCS mcs) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMessage</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a020601bba0e334a622dc8e193c5946b0</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getRadioState</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>ab49f5c73ab56d3ef2eeea9dbedbb5482</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a5d9eccb7ec311b0d1add0ccd0e69fcde</anchor>
      <arglist>(int rs) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ccaThreshold</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a7f33ca8a1b9f3d44ac9477f40ef97a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>collectCollisionStatistics</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>a1bbf635a72b7ec75a73d30d9e72b5b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>allowTxDuringRx</name>
      <anchorfile>classveins_1_1_phy_layer80211p.html</anchorfile>
      <anchor>ada1d7d0c4ca4a1f1ff35e6f1b2a3780f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::PhyToMacControlInfo</name>
    <filename>classveins_1_1_phy_to_mac_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>PhyToMacControlInfo</name>
      <anchorfile>classveins_1_1_phy_to_mac_control_info.html</anchorfile>
      <anchor>a15eb248ff91326d9e0ec483830810631</anchor>
      <arglist>(DeciderResult *result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PhyToMacControlInfo</name>
      <anchorfile>classveins_1_1_phy_to_mac_control_info.html</anchorfile>
      <anchor>ab0a91cab0a6e050bad5acc9aa6dbda0e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>DeciderResult *</type>
      <name>getDeciderResult</name>
      <anchorfile>classveins_1_1_phy_to_mac_control_info.html</anchorfile>
      <anchor>aaf6576c40e08fb0c868752c71adf577e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *const</type>
      <name>setControlInfo</name>
      <anchorfile>classveins_1_1_phy_to_mac_control_info.html</anchorfile>
      <anchor>a3d55b47974737aa4515abb3bbd3af4c7</anchor>
      <arglist>(cMessage *const pMsg, DeciderResult *const pDeciderResult)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DeciderResult *const</type>
      <name>getDeciderResult</name>
      <anchorfile>classveins_1_1_phy_to_mac_control_info.html</anchorfile>
      <anchor>a17e7e2f02e606fae2a6f609a5510438a</anchor>
      <arglist>(cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DeciderResult *const</type>
      <name>getDeciderResultFromControlInfo</name>
      <anchorfile>classveins_1_1_phy_to_mac_control_info.html</anchorfile>
      <anchor>a184023bbdfeb6a47f8fcb559c065bcb1</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeciderResult *</type>
      <name>result</name>
      <anchorfile>classveins_1_1_phy_to_mac_control_info.html</anchorfile>
      <anchor>a3add087b8ff211952e246b608e18f9d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::POA</name>
    <filename>classveins_1_1_p_o_a.html</filename>
    <member kind="function">
      <type></type>
      <name>POA</name>
      <anchorfile>classveins_1_1_p_o_a.html</anchorfile>
      <anchor>a003efa3a2095d323aa9581e1307d8181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>POA</name>
      <anchorfile>classveins_1_1_p_o_a.html</anchorfile>
      <anchor>a48917f9f2e72d65ec201727272a2e155</anchor>
      <arglist>(AntennaPosition pos, Coord orientation, std::shared_ptr&lt; Antenna &gt; antenna)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~POA</name>
      <anchorfile>classveins_1_1_p_o_a.html</anchorfile>
      <anchor>afed9af79065c53e17b750275aa0a7250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>AntennaPosition</type>
      <name>pos</name>
      <anchorfile>classveins_1_1_p_o_a.html</anchorfile>
      <anchor>a13de3d4727816763e0dd7c0aa5d37a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>orientation</name>
      <anchorfile>classveins_1_1_p_o_a.html</anchorfile>
      <anchor>a3afb897386ca462df66732c23bdb68f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; Antenna &gt;</type>
      <name>antenna</name>
      <anchorfile>classveins_1_1_p_o_a.html</anchorfile>
      <anchor>ad5c1f27bec23b6c7e6327966f19fd740</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCICommandInterface::Poi</name>
    <filename>classveins_1_1_tra_c_i_command_interface_1_1_poi.html</filename>
    <member kind="function">
      <type></type>
      <name>Poi</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_poi.html</anchorfile>
      <anchor>a75d31a2aa3a7bc6d9f03a145917c0a83</anchor>
      <arglist>(TraCICommandInterface *traci, std::string poiId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_poi.html</anchorfile>
      <anchor>a3fc376c9ae1099eb08232c7f576d861f</anchor>
      <arglist>(int32_t layer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_poi.html</anchorfile>
      <anchor>abb115d73eca30736488c09803610c175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_poi.html</anchorfile>
      <anchor>a8a0e6c391e4199bd078b84d1b8dddc28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>poiId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_poi.html</anchorfile>
      <anchor>a7861265d07c49e322910e32648e1a9d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::AnnotationManager::Point</name>
    <filename>classveins_1_1_annotation_manager_1_1_point.html</filename>
    <base>veins::AnnotationManager::Annotation</base>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_point.html</anchorfile>
      <anchor>a7b04c89adbbe11fa313adf4c50a5eebd</anchor>
      <arglist>(Coord pos, std::string color, std::string text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Point</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_point.html</anchorfile>
      <anchor>a6fb115fa72d9d76365eb98f36454c79e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>pos</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_point.html</anchorfile>
      <anchor>a22eb7f896ae0f05d7350bebf21347e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>color</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_point.html</anchorfile>
      <anchor>a033e816946d5fb573eb47b9fabdfcec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>text</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_point.html</anchorfile>
      <anchor>a12d8e22e191b95e5a1228fd637143b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_point.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::BBoxLookup::Point</name>
    <filename>structveins_1_1_b_box_lookup_1_1_point.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>structveins_1_1_b_box_lookup_1_1_point.html</anchorfile>
      <anchor>acf3790f99f42bb0ac040ee0149bd50e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>structveins_1_1_b_box_lookup_1_1_point.html</anchorfile>
      <anchor>a57203d1ba2c3723e2825e2e6e8e3be25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCICommandInterface::Polygon</name>
    <filename>classveins_1_1_tra_c_i_command_interface_1_1_polygon.html</filename>
    <member kind="function">
      <type></type>
      <name>Polygon</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_polygon.html</anchorfile>
      <anchor>a9ab197776d1c5506e7ad75c4fcd4e0fd</anchor>
      <arglist>(TraCICommandInterface *traci, std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_polygon.html</anchorfile>
      <anchor>a9e62fd6c4ff4bc633a46d96630104e9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>getShape</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_polygon.html</anchorfile>
      <anchor>adcfb7801fc96078f79e4e4e4298bf8be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShape</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_polygon.html</anchorfile>
      <anchor>a3893975063adb73be8e51ff0b9485dd0</anchor>
      <arglist>(const std::list&lt; Coord &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_polygon.html</anchorfile>
      <anchor>a18608df17590d21fad5b186c6c3802c7</anchor>
      <arglist>(int32_t layer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_polygon.html</anchorfile>
      <anchor>a31a3be2780ac411cdde3acfde71b6d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_polygon.html</anchorfile>
      <anchor>afe6bbe72a8751817c0180f3f107e70c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>polyId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_polygon.html</anchorfile>
      <anchor>af48c1df85ff3fecc493c2ff849d11822</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::AnnotationManager::Polygon</name>
    <filename>classveins_1_1_annotation_manager_1_1_polygon.html</filename>
    <base>veins::AnnotationManager::Annotation</base>
    <member kind="function">
      <type></type>
      <name>Polygon</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_polygon.html</anchorfile>
      <anchor>af594d1a6f8b1ae13f3445aa860201388</anchor>
      <arglist>(std::list&lt; Coord &gt; coords, std::string color)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Polygon</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_polygon.html</anchorfile>
      <anchor>aadbbc7fba1830e4b1e65ed52fb486085</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; Coord &gt;</type>
      <name>coords</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_polygon.html</anchorfile>
      <anchor>aaf7645c4683c6c6d87da7005afbfe36b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>color</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_polygon.html</anchorfile>
      <anchor>ab2326f758d8728db856e2e8bc704b742</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>classveins_1_1_annotation_manager_1_1_polygon.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Radio</name>
    <filename>classveins_1_1_radio.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>RadioState</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ab5e91763a5b2aa290b0931b3e33f7832</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RX</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ab5e91763a5b2aa290b0931b3e33f7832ab094f151a0582f8d0e2e6f76a6c1f674</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ab5e91763a5b2aa290b0931b3e33f7832a95c03b76618ff5b0cf84bb6819deb41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEP</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ab5e91763a5b2aa290b0931b3e33f7832ac2cf3f817a3ac1a3446cc0d5f5644c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SWITCHING</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ab5e91763a5b2aa290b0931b3e33f7832a964507bdf9435c6c7897e042d83c06e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_RADIO_STATES</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ab5e91763a5b2aa290b0931b3e33f7832ac3b231fdf5d8ee9bf15b113487cd7caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RX</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ab5e91763a5b2aa290b0931b3e33f7832ab094f151a0582f8d0e2e6f76a6c1f674</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ab5e91763a5b2aa290b0931b3e33f7832a95c03b76618ff5b0cf84bb6819deb41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEP</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ab5e91763a5b2aa290b0931b3e33f7832ac2cf3f817a3ac1a3446cc0d5f5644c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SWITCHING</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ab5e91763a5b2aa290b0931b3e33f7832a964507bdf9435c6c7897e042d83c06e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_RADIO_STATES</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ab5e91763a5b2aa290b0931b3e33f7832ac3b231fdf5d8ee9bf15b113487cd7caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Radio</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>a9fb63e8ebc78c18b4eb5a8040d684174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>switchTo</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>aab434b342c42f1dbfa1df3640afbb4b0</anchor>
      <arglist>(int newState, simtime_t_cref now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwitchTime</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>aed80922c736427067f27669c87aaf4f8</anchor>
      <arglist>(int from, int to, simtime_t_cref time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCurrentState</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>a44e27dcc777db9f54f3eae6db25828bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endSwitch</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>aceb966be7e36e87068ae3424de8a5928</anchor>
      <arglist>(simtime_t_cref now)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentChannel</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>a4c6c3a456698bf745a2026cdcdbcbe45</anchor>
      <arglist>(int newChannel)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentChannel</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>a7f0617d02200225e431bce46cdbbfada</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Radio &gt;</type>
      <name>createNewRadio</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>adb1662dfad80b70f1983faaa6689a25b</anchor>
      <arglist>(bool recordStats=false, int initialState=RX, int currentChannel=0, int nbChannels=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Radio</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>aed3489d8285268d1b5e81fa0d0e0627a</anchor>
      <arglist>(int numRadioStates, bool recordStats, int initialState=RX, int currentChannel=0, int nbChannels=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>radioStates</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>a0c0f2303d123437959ce7b03819e0670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>radioChannels</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>a10733a03cb680a3d9aadbe8e874e0964</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>a5b08b8d424440a4468ba44b336670d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nextState</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>a21792d45593225344811786e6abeccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>numRadioStates</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ada701a050ddbf8de3e89622efdc42a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t **</type>
      <name>swTimes</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>ae93e97917d63d4599322a2f4e66e5086</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>currentChannel</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>a93e92b8c18b01e2d175954af237659c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nbChannels</name>
      <anchorfile>classveins_1_1_radio.html</anchorfile>
      <anchor>a3d2d47697e7a9150e6490acb1c996826</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>anonymous_namespace{BBoxLookup.cc}::Ray</name>
    <filename>structanonymous__namespace_02_b_box_lookup_8cc_03_1_1_ray.html</filename>
    <member kind="variable">
      <type>Point</type>
      <name>origin</name>
      <anchorfile>structanonymous__namespace_02_b_box_lookup_8cc_03_1_1_ray.html</anchorfile>
      <anchor>a80e82bb3f37bd0b36149dffc3c264fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>destination</name>
      <anchorfile>structanonymous__namespace_02_b_box_lookup_8cc_03_1_1_ray.html</anchorfile>
      <anchor>a94ac52b83e49310f7a59609ac1b39bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>direction</name>
      <anchorfile>structanonymous__namespace_02_b_box_lookup_8cc_03_1_1_ray.html</anchorfile>
      <anchor>a5f4d8bc974948c6d4e0195bad9a8f707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>invDirection</name>
      <anchorfile>structanonymous__namespace_02_b_box_lookup_8cc_03_1_1_ray.html</anchorfile>
      <anchor>a989e5c4bcd1ebc912d2556e2d4aba346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>x</name>
      <anchorfile>structanonymous__namespace_02_b_box_lookup_8cc_03_1_1_ray.html</anchorfile>
      <anchor>af8af0b365a2419f4d31ce549d3131767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>y</name>
      <anchorfile>structanonymous__namespace_02_b_box_lookup_8cc_03_1_1_ray.html</anchorfile>
      <anchor>a520578a09c7bf3068f0d6e3f0c3df19a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct anonymous_namespace{BBoxLookup.cc}::Ray::@0</type>
      <name>sign</name>
      <anchorfile>structanonymous__namespace_02_b_box_lookup_8cc_03_1_1_ray.html</anchorfile>
      <anchor>ac66a6db0ec64697df9913661683e4fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>length</name>
      <anchorfile>structanonymous__namespace_02_b_box_lookup_8cc_03_1_1_ray.html</anchorfile>
      <anchor>a2ea643a489cdd49f0573408240556b43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIConnection::Result</name>
    <filename>classveins_1_1_tra_c_i_connection_1_1_result.html</filename>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>classveins_1_1_tra_c_i_connection_1_1_result.html</anchorfile>
      <anchor>a585b154e034ab63c6f82c54feec547d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>classveins_1_1_tra_c_i_connection_1_1_result.html</anchorfile>
      <anchor>acfef0aacc67d1686d87b86888ddb3b99</anchor>
      <arglist>(bool success, bool not_impl, std::string message)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>success</name>
      <anchorfile>classveins_1_1_tra_c_i_connection_1_1_result.html</anchorfile>
      <anchor>aa3b0605cecd1bea1b28c073bfd1d1497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>not_impl</name>
      <anchorfile>classveins_1_1_tra_c_i_connection_1_1_result.html</anchorfile>
      <anchor>afa6ce12d6e0cf359941ac79e8fd323cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>message</name>
      <anchorfile>classveins_1_1_tra_c_i_connection_1_1_result.html</anchorfile>
      <anchor>aaa91219096b1a56b3df18885c8492df0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCICommandInterface::Road</name>
    <filename>classveins_1_1_tra_c_i_command_interface_1_1_road.html</filename>
    <member kind="function">
      <type></type>
      <name>Road</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_road.html</anchorfile>
      <anchor>a2f43f9080d29be7cea88fd19db4c15af</anchor>
      <arglist>(TraCICommandInterface *traci, std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentTravelTime</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_road.html</anchorfile>
      <anchor>a7cf40405e3eb2553d42dd6176cd7401e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeanSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_road.html</anchorfile>
      <anchor>ae8d5fcbc17394ddedad38bc0d9515119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_road.html</anchorfile>
      <anchor>ae9cd4ae5a1dfdd29b992606afe2d20d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_road.html</anchorfile>
      <anchor>a3bfc427c2601e43ecb5e8a932984063d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>roadId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_road.html</anchorfile>
      <anchor>aba0cf8023bafe3b84281ff7217b33eb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCICommandInterface::Route</name>
    <filename>classveins_1_1_tra_c_i_command_interface_1_1_route.html</filename>
    <member kind="function">
      <type></type>
      <name>Route</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_route.html</anchorfile>
      <anchor>a1591e7192bc87a205191964f5b8b59e6</anchor>
      <arglist>(TraCICommandInterface *traci, std::string routeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getRoadIds</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_route.html</anchorfile>
      <anchor>a33966816061cb79330bdb56854ece992</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_route.html</anchorfile>
      <anchor>a4a0177972ede474c22960e29b25eab4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_route.html</anchorfile>
      <anchor>a97b2c4d31fd4fddb631f78cfbb1d7508</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>routeId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_route.html</anchorfile>
      <anchor>ada0d59b9aa5dcf70194f8072deeea08e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::SampledAntenna1D</name>
    <filename>classveins_1_1_sampled_antenna1_d.html</filename>
    <base>veins::Antenna</base>
    <member kind="function">
      <type></type>
      <name>SampledAntenna1D</name>
      <anchorfile>classveins_1_1_sampled_antenna1_d.html</anchorfile>
      <anchor>a5b67b034680287a0cc838a7542c72dbe</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;values, std::string offsetType, std::vector&lt; double &gt; &amp;offsetParams, std::string rotationType, std::vector&lt; double &gt; &amp;rotationParams, cRNG *rng)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SampledAntenna1D</name>
      <anchorfile>classveins_1_1_sampled_antenna1_d.html</anchorfile>
      <anchor>a5324f1ed3657ef508d2714a0f829a4f0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGain</name>
      <anchorfile>classveins_1_1_sampled_antenna1_d.html</anchorfile>
      <anchor>a3bc51368d1d6c6402c46a3cf6e7fc554</anchor>
      <arglist>(Coord ownPos, Coord ownOrient, Coord otherPos) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLastAngle</name>
      <anchorfile>classveins_1_1_sampled_antenna1_d.html</anchorfile>
      <anchor>a4deca6f34b8317da34f04171c79f615f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>antennaGains</name>
      <anchorfile>classveins_1_1_sampled_antenna1_d.html</anchorfile>
      <anchor>a454486810d1c740d6e9471e72e026585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classveins_1_1_sampled_antenna1_d.html</anchorfile>
      <anchor>a25efce724e7aee05d90a91a3271ab035</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rotation</name>
      <anchorfile>classveins_1_1_sampled_antenna1_d.html</anchorfile>
      <anchor>aed28fadcb4fb3245532ee38ac0a565f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>lastAngle</name>
      <anchorfile>classveins_1_1_sampled_antenna1_d.html</anchorfile>
      <anchor>a670fe483f60e602774b31b920108fdc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Signal</name>
    <filename>classveins_1_1_signal.html</filename>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a6843ada68dfb314e57a4689b25b5af7a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a1c3f0b36c73cf086f96a5e42ea451202</anchor>
      <arglist>(const Signal &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>acf598aa7e1810657d6c67c3a684542d6</anchor>
      <arglist>(Spectrum spec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>aab82b872d330787aab08af41d8715535</anchor>
      <arglist>(Spectrum spec, simtime_t start, simtime_t duration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Signal</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ab7144309c1cf03e772b5a828f87b86c6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const Spectrum &amp;</type>
      <name>getSpectrum</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ac9b8c5004d4d0eaa4f5f6656dec9c7ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a0ceae2b64ce6b44bf9fdc7b59fa0b8ca</anchor>
      <arglist>(const double value)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ac678bd99ea970d0135330ccaa8458736</anchor>
      <arglist>(const Signal &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>at</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ae0890d174875e1a543f334165b0748c7</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>at</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a02c8ab4e1b55257c1f8b018eadbe0530</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>atFrequency</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ae509571a223362564f5d72027d1a0f11</anchor>
      <arglist>(double freq)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>atFrequency</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a9349f2d7513ad7774171173b9728a62f</anchor>
      <arglist>(double freq) const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValues</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a892b65838aee943fef8fc16bfa4ce1ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumValues</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a87104706e2aecffa1146fe6b115e8450</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMax</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a23e6d424de9fcb0841a95cce50d4f0c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>dataAt</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a7b95db4ddf8fefe721fa16b81ff2efce</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>dataAt</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a7c105a0f81ed15b75c77cc3480f1af48</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataStart</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>adc0e2696a4b55b43cad28ed824f98d33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataEnd</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5ee277c44c11df19b2df5dc38dd29770</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getDataValues</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a872363e8b10ceaa288a14edcf64de33d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumDataValues</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ac4093c5015ae08e668ed521659706a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataOffset</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a1ec3ce50715006bcf440be743b1a1da4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDataMin</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5e13430a9a561b1614d6ae4d4f649e74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDataMax</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a8f734318dd434fe99a19e3791765c5af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataStart</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a1c4dfcf7ecd2ecba44cef30f603ea68d</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataEnd</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>addfd235698dd534e0d972ec762ae6d43</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataNumValues</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>af4c1efb88d5de47de78233b16689590e</anchor>
      <arglist>(size_t num)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getCenterFrequencyIndex</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a4a75ce4e3f10923d9fbabc8e3fbe6723</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAtCenterFrequency</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a4c81e8207ce2ad21b8795687b63fc524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenterFrequencyIndex</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>af89772fce12fd81475a0ecaacbaafd90</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>greaterAtCenterFrequency</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>af1a784cf3c1ec0e3a528f4d0dbf03874</anchor>
      <arglist>(double threshold)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>smallerAtCenterFrequency</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5b04c5bff8b97069757714875c18eaac</anchor>
      <arglist>(double threshold)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getNumAnalogueModelsApplied</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ae321b29b18c416a62f4a657ddfb9f49b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AnalogueModelList *</type>
      <name>getAnalogueModelList</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a1955a75de66cc15338fa79d06b011675</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAnalogueModelList</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a076f3041b7d3ffe462a12e5f9626521c</anchor>
      <arglist>(AnalogueModelList *list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAnalogueModel</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>afa7120d39b7491615df08fef52f30063</anchor>
      <arglist>(uint16_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAllAnalogueModels</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a2c69e37bf5331a38c6557a75d715cdde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>POA</type>
      <name>getSenderPoa</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a3110835239b852cf44bd59356be3fcc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>POA</type>
      <name>getReceiverPoa</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a42a8f0fb95c9ea08ff0a6a16df37ae14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenderPoa</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5ae9df5dc12815b88e60e3358bfb6630</anchor>
      <arglist>(const POA &amp;poa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReceiverPoa</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a14400bcd9d4ab51a2a0f44444fb628a4</anchor>
      <arglist>(const POA &amp;poa)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSendingStart</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>aa3bcd9ab71e4e5875148183d92ba272d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getSendingEnd</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a7da4b831571f23ec1fbbca3be1db07cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getReceptionStart</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a303d43bda1cdcde066aa9c15acf52c4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getReceptionEnd</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ade8a1576fbeea65ad1a7eff31618c3b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getDuration</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>afabbef1186e68d78d823798b028703e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getPropagationDelay</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a6c3d4d90a0a37737d678455401bdb48a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTiming</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>af304e6fb649a7dab4768e5b784d656a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPropagationDelay</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5e48dc3cce926b99eefefed3b24f5713</anchor>
      <arglist>(simtime_t_cref delay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTiming</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5a7680d0861334fb5d5692bdf31c717f</anchor>
      <arglist>(simtime_t start, simtime_t duration)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator+=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a32d59d8693b93ce78a52affa2b08d7b8</anchor>
      <arglist>(const Signal &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator+=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>aab26a534fa87479df89f045101a0e216</anchor>
      <arglist>(const double value)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator-=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ab1c20df0e42eba2a401d862e623bb2fb</anchor>
      <arglist>(const Signal &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator-=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a2fa6fa05bfc53b39fe747e7c302c639c</anchor>
      <arglist>(const double value)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator*=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5aefae5041d4818b454f2dd438c9ede6</anchor>
      <arglist>(const Signal &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator*=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>af3160b5c58c88ff98b8e0e48014241f4</anchor>
      <arglist>(const double value)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator/=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>adc7e81655a7305b89bf78ab742e549a2</anchor>
      <arglist>(const Signal &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator/=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>abb71511f12ac4dee193bc0078e49e55f</anchor>
      <arglist>(const double value)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>getMinInRange</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a67f4a96520a33ca8fb6907b06531c93f</anchor>
      <arglist>(size_t freqIndexLow, size_t freqIndexHigh) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>getMaxInRange</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a82ce6ba105e0e32a1e01a09ac669ef28</anchor>
      <arglist>(size_t freqIndexLow, size_t freqIndexHigh) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Spectrum</type>
      <name>spectrum</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>aa84f56183517e49ac8d6d3cbac77a44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>values</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a4b4388ee6644f8fa05d8344a0c96f970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>numDataValues</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a8c2eded42190f84d40892c506fdc3985</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>dataOffset</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>adcb71d545f50926a80e9fe545570c7ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>centerFrequencyIndex</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ad7ad19baa56be82e1fb6c0612860bcfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>timingUsed</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>aa80625a72b54060b9ab331554e93dbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>sendingStart</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a095a3d21d068ee411689fa0f2039b1df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>duration</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>acd6e65793bf20d7436fd04050c8b7476</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>propagationDelay</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a4f0fcca1321c315952bf02f17918c824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AnalogueModelList *</type>
      <name>analogueModelList</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a07e21290f562a9c02f22cf1d3a5aa58b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint16_t</type>
      <name>numAnalogueModelsApplied</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>af0b0a0fac974141dc29aa6b821cb2ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>POA</type>
      <name>senderPoa</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>aad948d9e87f583964ef977f47c2c4295</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>POA</type>
      <name>receiverPoa</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>aca8eda1320562a46f100c486dee21fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>aeb1081f93717f9db4e63ca556112c4de</anchor>
      <arglist>(std::ostream &amp;os, const Signal &amp;s)</arglist>
    </member>
    <member kind="friend">
      <type>friend simtime_t</type>
      <name>calculateStart</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a51b2c0e58fb31429335653724220a69f</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ac8478f7a557d06a693e0c5d7c086e55f</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>at</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ae0890d174875e1a543f334165b0748c7</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>at</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a02c8ab4e1b55257c1f8b018eadbe0530</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>atFrequency</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ae509571a223362564f5d72027d1a0f11</anchor>
      <arglist>(double freq)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>atFrequency</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a9349f2d7513ad7774171173b9728a62f</anchor>
      <arglist>(double freq) const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValues</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a892b65838aee943fef8fc16bfa4ce1ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumValues</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a87104706e2aecffa1146fe6b115e8450</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMax</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a23e6d424de9fcb0841a95cce50d4f0c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>dataAt</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a7b95db4ddf8fefe721fa16b81ff2efce</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>dataAt</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a7c105a0f81ed15b75c77cc3480f1af48</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataStart</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>adc0e2696a4b55b43cad28ed824f98d33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataEnd</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5ee277c44c11df19b2df5dc38dd29770</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getDataValues</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a872363e8b10ceaa288a14edcf64de33d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumDataValues</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ac4093c5015ae08e668ed521659706a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataOffset</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a1ec3ce50715006bcf440be743b1a1da4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDataMin</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5e13430a9a561b1614d6ae4d4f649e74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDataMax</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a8f734318dd434fe99a19e3791765c5af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataStart</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a1c4dfcf7ecd2ecba44cef30f603ea68d</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataEnd</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>addfd235698dd534e0d972ec762ae6d43</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataNumValues</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>af4c1efb88d5de47de78233b16689590e</anchor>
      <arglist>(size_t num)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getCenterFrequencyIndex</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a4a75ce4e3f10923d9fbabc8e3fbe6723</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAtCenterFrequency</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a4c81e8207ce2ad21b8795687b63fc524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenterFrequencyIndex</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>af89772fce12fd81475a0ecaacbaafd90</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>greaterAtCenterFrequency</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>af1a784cf3c1ec0e3a528f4d0dbf03874</anchor>
      <arglist>(double threshold)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>smallerAtCenterFrequency</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5b04c5bff8b97069757714875c18eaac</anchor>
      <arglist>(double threshold)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getNumAnalogueModelsApplied</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ae321b29b18c416a62f4a657ddfb9f49b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AnalogueModelList *</type>
      <name>getAnalogueModelList</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a1955a75de66cc15338fa79d06b011675</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAnalogueModelList</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a076f3041b7d3ffe462a12e5f9626521c</anchor>
      <arglist>(AnalogueModelList *list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAnalogueModel</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>afa7120d39b7491615df08fef52f30063</anchor>
      <arglist>(uint16_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAllAnalogueModels</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a2c69e37bf5331a38c6557a75d715cdde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>POA</type>
      <name>getSenderPoa</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a3110835239b852cf44bd59356be3fcc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>POA</type>
      <name>getReceiverPoa</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a42a8f0fb95c9ea08ff0a6a16df37ae14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenderPoa</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5ae9df5dc12815b88e60e3358bfb6630</anchor>
      <arglist>(const POA &amp;poa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReceiverPoa</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a14400bcd9d4ab51a2a0f44444fb628a4</anchor>
      <arglist>(const POA &amp;poa)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSendingStart</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>aa3bcd9ab71e4e5875148183d92ba272d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getSendingEnd</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a7da4b831571f23ec1fbbca3be1db07cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getReceptionStart</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a303d43bda1cdcde066aa9c15acf52c4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getReceptionEnd</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ade8a1576fbeea65ad1a7eff31618c3b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getDuration</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>afabbef1186e68d78d823798b028703e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getPropagationDelay</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a6c3d4d90a0a37737d678455401bdb48a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTiming</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>af304e6fb649a7dab4768e5b784d656a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPropagationDelay</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5e48dc3cce926b99eefefed3b24f5713</anchor>
      <arglist>(simtime_t_cref delay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTiming</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5a7680d0861334fb5d5692bdf31c717f</anchor>
      <arglist>(simtime_t start, simtime_t duration)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator+=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a32d59d8693b93ce78a52affa2b08d7b8</anchor>
      <arglist>(const Signal &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator+=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>aab26a534fa87479df89f045101a0e216</anchor>
      <arglist>(const double value)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator-=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>ab1c20df0e42eba2a401d862e623bb2fb</anchor>
      <arglist>(const Signal &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator-=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a2fa6fa05bfc53b39fe747e7c302c639c</anchor>
      <arglist>(const double value)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator*=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>a5aefae5041d4818b454f2dd438c9ede6</anchor>
      <arglist>(const Signal &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator*=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>af3160b5c58c88ff98b8e0e48014241f4</anchor>
      <arglist>(const double value)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator/=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>adc7e81655a7305b89bf78ab742e549a2</anchor>
      <arglist>(const Signal &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator/=</name>
      <anchorfile>classveins_1_1_signal.html</anchorfile>
      <anchor>abb71511f12ac4dee193bc0078e49e55f</anchor>
      <arglist>(const double value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::SignalCallbackListener</name>
    <filename>classveins_1_1_signal_callback_listener.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::function&lt; void(SignalPayload&lt; Payload &gt;)&gt;</type>
      <name>Callback</name>
      <anchorfile>classveins_1_1_signal_callback_listener.html</anchorfile>
      <anchor>a48733951d9b768ea47c54f1fa3b1efe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalCallbackListener</name>
      <anchorfile>classveins_1_1_signal_callback_listener.html</anchorfile>
      <anchor>a205dab0edcd7b7d4a9e80b0efc685086</anchor>
      <arglist>(Callback callback, cModule *receptor, simsignal_t signal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SignalCallbackListener</name>
      <anchorfile>classveins_1_1_signal_callback_listener.html</anchorfile>
      <anchor>ad5bba65392d60bd0b3bfe141c6995935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receiveSignal</name>
      <anchorfile>classveins_1_1_signal_callback_listener.html</anchorfile>
      <anchor>a2e301416a0e10b5e21f2230e23bce68b</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, Payload p, cObject *details) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Callback</type>
      <name>callback</name>
      <anchorfile>classveins_1_1_signal_callback_listener.html</anchorfile>
      <anchor>a92ad7bbdb788d31d3fc07eb7043edaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cModule *const</type>
      <name>receptor</name>
      <anchorfile>classveins_1_1_signal_callback_listener.html</anchorfile>
      <anchor>a001c279d2d38fe6d32fa429f418a7c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const simsignal_t</type>
      <name>signal</name>
      <anchorfile>classveins_1_1_signal_callback_listener.html</anchorfile>
      <anchor>a5371e0fef5f69fe2a4914ecc6f95bc44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::SignalManager</name>
    <filename>classveins_1_1_signal_manager.html</filename>
    <member kind="function">
      <type>void</type>
      <name>subscribeCallback</name>
      <anchorfile>classveins_1_1_signal_manager.html</anchorfile>
      <anchor>ac90327dda47ad1f06728adca7478ae96</anchor>
      <arglist>(cModule *receptor, simsignal_t signal, const std::function&lt; void(SignalPayload&lt; bool &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subscribeCallback</name>
      <anchorfile>classveins_1_1_signal_manager.html</anchorfile>
      <anchor>afe02b888a4f72e7abf4e612068502c58</anchor>
      <arglist>(cModule *receptor, simsignal_t signal, const std::function&lt; void(SignalPayload&lt; long &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subscribeCallback</name>
      <anchorfile>classveins_1_1_signal_manager.html</anchorfile>
      <anchor>a8a0c3517822defd7f074600a4d6c5d19</anchor>
      <arglist>(cModule *receptor, simsignal_t signal, const std::function&lt; void(SignalPayload&lt; unsigned long &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subscribeCallback</name>
      <anchorfile>classveins_1_1_signal_manager.html</anchorfile>
      <anchor>a681c4b6097b8569eb231598b80870997</anchor>
      <arglist>(cModule *receptor, simsignal_t signal, const std::function&lt; void(SignalPayload&lt; double &gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subscribeCallback</name>
      <anchorfile>classveins_1_1_signal_manager.html</anchorfile>
      <anchor>acb6b6bdfa2eba7ddaf4be0c873cfe557</anchor>
      <arglist>(cModule *receptor, simsignal_t signal, const std::function&lt; void(SignalPayload&lt; const SimTime &amp;&gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subscribeCallback</name>
      <anchorfile>classveins_1_1_signal_manager.html</anchorfile>
      <anchor>a5399d49642c3017ec8955477dcbcaed2</anchor>
      <arglist>(cModule *receptor, simsignal_t signal, const std::function&lt; void(SignalPayload&lt; const char *&gt;)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subscribeCallback</name>
      <anchorfile>classveins_1_1_signal_manager.html</anchorfile>
      <anchor>add40100efe9dab8e691a55f5d3aaf901</anchor>
      <arglist>(cModule *receptor, simsignal_t signal, const std::function&lt; void(SignalPayload&lt; cObject *&gt;)&gt; callback)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::unique_ptr&lt; cListener &gt; &gt;</type>
      <name>callbacks</name>
      <anchorfile>classveins_1_1_signal_manager.html</anchorfile>
      <anchor>ac14a3176c8b29d8f67c956141284b2f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::SignalPayload</name>
    <filename>structveins_1_1_signal_payload.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>cComponent *</type>
      <name>source</name>
      <anchorfile>structveins_1_1_signal_payload.html</anchorfile>
      <anchor>a3f5e8a2770e28d152513ef39a1c8c664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simsignal_t</type>
      <name>signalID</name>
      <anchorfile>structveins_1_1_signal_payload.html</anchorfile>
      <anchor>aad08e6af9e4bf18c3143aa25771c531d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Payload</type>
      <name>p</name>
      <anchorfile>structveins_1_1_signal_payload.html</anchorfile>
      <anchor>a5737da8d4600e10c44cff6fbd939a300</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cObject *</type>
      <name>details</name>
      <anchorfile>structveins_1_1_signal_payload.html</anchorfile>
      <anchor>ab1914e7dfdf99b79511dacea38ce0bad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::SimpleObstacleShadowing</name>
    <filename>classveins_1_1_simple_obstacle_shadowing.html</filename>
    <base>veins::AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>SimpleObstacleShadowing</name>
      <anchorfile>classveins_1_1_simple_obstacle_shadowing.html</anchorfile>
      <anchor>a464a08307755aca88a398e23b3a393ea</anchor>
      <arglist>(cComponent *owner, ObstacleControl &amp;obstacleControl, bool useTorus, const Coord &amp;playgroundSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterSignal</name>
      <anchorfile>classveins_1_1_simple_obstacle_shadowing.html</anchorfile>
      <anchor>a232c35993ba999b86d6e700d2152c98a</anchor>
      <arglist>(Signal *signal) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neverIncreasesPower</name>
      <anchorfile>classveins_1_1_simple_obstacle_shadowing.html</anchorfile>
      <anchor>a1d5f8dd0a3401016706865671d1de34d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObstacleControl &amp;</type>
      <name>obstacleControl</name>
      <anchorfile>classveins_1_1_simple_obstacle_shadowing.html</anchorfile>
      <anchor>a69eec4e5f097367b14d363089747d48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>useTorus</name>
      <anchorfile>classveins_1_1_simple_obstacle_shadowing.html</anchorfile>
      <anchor>a324f373684bab689a2ea4f0baeb0fdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord &amp;</type>
      <name>playgroundSize</name>
      <anchorfile>classveins_1_1_simple_obstacle_shadowing.html</anchorfile>
      <anchor>ac918d0f579fb4c252e91837d335eb47f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::SimplePathlossModel</name>
    <filename>classveins_1_1_simple_pathloss_model.html</filename>
    <base>veins::AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>SimplePathlossModel</name>
      <anchorfile>classveins_1_1_simple_pathloss_model.html</anchorfile>
      <anchor>abf24c48a8dd8920a0b42ffef8e973dc8</anchor>
      <arglist>(cComponent *owner, double alpha, bool useTorus, const Coord &amp;playgroundSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterSignal</name>
      <anchorfile>classveins_1_1_simple_pathloss_model.html</anchorfile>
      <anchor>a71783f3a91bb7178629fa58aadf793e4</anchor>
      <arglist>(Signal *) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neverIncreasesPower</name>
      <anchorfile>classveins_1_1_simple_pathloss_model.html</anchorfile>
      <anchor>a43a5895c374b3f55ce35f46cb315b84d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pathLossAlphaHalf</name>
      <anchorfile>classveins_1_1_simple_pathloss_model.html</anchorfile>
      <anchor>afbf14b057d9668b9185097425fdc50f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>useTorus</name>
      <anchorfile>classveins_1_1_simple_pathloss_model.html</anchorfile>
      <anchor>a1010ff00c3feb34b4d00e701b210d122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord &amp;</type>
      <name>playgroundSize</name>
      <anchorfile>classveins_1_1_simple_pathloss_model.html</anchorfile>
      <anchor>acf74b17f047e739f33a48d071633e61c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::Spectrum</name>
    <filename>classveins_1_1_spectrum.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Frequency</name>
      <anchorfile>classveins_1_1_spectrum.html</anchorfile>
      <anchor>ae79d48493a1fd8a352d9eb15cff1e9f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Frequency &gt;</type>
      <name>Frequencies</name>
      <anchorfile>classveins_1_1_spectrum.html</anchorfile>
      <anchor>a76dd1ba21f6372dc8f87a857e337c502</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Spectrum</name>
      <anchorfile>classveins_1_1_spectrum.html</anchorfile>
      <anchor>a13d19697b1413672a6c0af54d01ecd33</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Spectrum</name>
      <anchorfile>classveins_1_1_spectrum.html</anchorfile>
      <anchor>a58c3f232a14694106949ee8e919bc02c</anchor>
      <arglist>(Frequencies freqs)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classveins_1_1_spectrum.html</anchorfile>
      <anchor>a3c889213b331b900d6f7a886622fb421</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumFreqs</name>
      <anchorfile>classveins_1_1_spectrum.html</anchorfile>
      <anchor>a8d88a83804fcc6fec561a64398fe99b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>indexOf</name>
      <anchorfile>classveins_1_1_spectrum.html</anchorfile>
      <anchor>a5c315bfce918bdc7896ef94a35ee9d7c</anchor>
      <arglist>(double freq) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>freqAt</name>
      <anchorfile>classveins_1_1_spectrum.html</anchorfile>
      <anchor>a17aa50791a5cd216f435169bf68f98b9</anchor>
      <arglist>(size_t freqIndex) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Frequencies</type>
      <name>frequencies</name>
      <anchorfile>classveins_1_1_spectrum.html</anchorfile>
      <anchor>a74f0420a879f9ef3de4a6eb8fcba74db</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool VEINS_API</type>
      <name>operator==</name>
      <anchorfile>classveins_1_1_spectrum.html</anchorfile>
      <anchor>aa3ab5ec729b9657b97c41a8102c7fc6e</anchor>
      <arglist>(const Spectrum &amp;lhs, const Spectrum &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;VEINS_API</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classveins_1_1_spectrum.html</anchorfile>
      <anchor>a059318a6b7f9cf804555d0248d0edd18</anchor>
      <arglist>(std::ostream &amp;os, const Spectrum &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIMobility::Statistics</name>
    <filename>classveins_1_1_tra_c_i_mobility_1_1_statistics.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a85d464690436867cd9b877aaad2d3aeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>watch</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a091df9b48ee304cfe9cfbba7af0f7e96</anchor>
      <arglist>(cSimpleModule &amp;module)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalars</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a063d5799a5ff7686056398d91a85f872</anchor>
      <arglist>(cSimpleModule &amp;module)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>firstRoadNumber</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a3e7e7426330ab86224410ba9f39520b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a79fa7bd32bd5cfc079c96d704dde3a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>totalTime</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>ad47a9436f177c2ad499a46f1c50cac1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>stopTime</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a76f21545a382224982f1febf82a634cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>ab0e825c9675294d6012de300a9cb5119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>ad1655766a89abc12c3a3b4c01ce0d421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalDistance</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a0ebfb08ef93f0952cfbd790dacc52455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalCO2Emission</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a4028590461ccca8b465e3bd9c3000d0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TimerManager</name>
    <filename>classveins_1_1_timer_manager.html</filename>
    <member kind="typedef">
      <type>long</type>
      <name>TimerHandle</name>
      <anchorfile>classveins_1_1_timer_manager.html</anchorfile>
      <anchor>a73ff5f20f89a7ec4038a933f38a40122</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; TimerMessage *, const TimerSpecification &gt;</type>
      <name>TimerList</name>
      <anchorfile>classveins_1_1_timer_manager.html</anchorfile>
      <anchor>a2ba5fd9aef6cc7038a3f75daf0377859</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimerManager</name>
      <anchorfile>classveins_1_1_timer_manager.html</anchorfile>
      <anchor>afd3934b685b7aeba5db486f1d2e8db0b</anchor>
      <arglist>(omnetpp::cSimpleModule *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimerManager</name>
      <anchorfile>classveins_1_1_timer_manager.html</anchorfile>
      <anchor>ae9676f2b9a1ed9b1ffd63f204eeccec6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleMessage</name>
      <anchorfile>classveins_1_1_timer_manager.html</anchorfile>
      <anchor>a2ae39de41dbf73cc83f02d467c0b5a88</anchor>
      <arglist>(omnetpp::cMessage *message)</arglist>
    </member>
    <member kind="function">
      <type>TimerHandle</type>
      <name>create</name>
      <anchorfile>classveins_1_1_timer_manager.html</anchorfile>
      <anchor>ab053af5f5100836508fe8e71936f3e10</anchor>
      <arglist>(TimerSpecification timerSpecification, std::string name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>classveins_1_1_timer_manager.html</anchorfile>
      <anchor>a3b7907d8fc13fcedfc1058a7cb3b9c63</anchor>
      <arglist>(TimerHandle handle)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TimerList</type>
      <name>timers_</name>
      <anchorfile>classveins_1_1_timer_manager.html</anchorfile>
      <anchor>a8b946893c9db707bf57242448c15ddcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>omnetpp::cSimpleModule *const</type>
      <name>parent_</name>
      <anchorfile>classveins_1_1_timer_manager.html</anchorfile>
      <anchor>af95942aa4c775d6d95af3d2084d8cec1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::TimerMessage</name>
    <filename>structveins_1_1_timer_message.html</filename>
    <member kind="function">
      <type></type>
      <name>TimerMessage</name>
      <anchorfile>structveins_1_1_timer_message.html</anchorfile>
      <anchor>aaa8483941303e9b84cda6b6e751bf65b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::TimerSpecification</name>
    <filename>structveins_1_1_timer_specification.html</filename>
    <member kind="function">
      <type></type>
      <name>TimerSpecification</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a61fee676a9a7799fa2a760b3b4d120ae</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>TimerSpecification &amp;</type>
      <name>interval</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a1fe5a58cbf8ce66a7c96b1dde3053700</anchor>
      <arglist>(omnetpp::simtime_t interval)</arglist>
    </member>
    <member kind="function">
      <type>TimerSpecification &amp;</type>
      <name>repetitions</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a2beb07e9b7c0666ca340196b62477ea2</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>TimerSpecification &amp;</type>
      <name>relativeStart</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a36c499d395102241763b9340ae8d0675</anchor>
      <arglist>(omnetpp::simtime_t start)</arglist>
    </member>
    <member kind="function">
      <type>TimerSpecification &amp;</type>
      <name>absoluteStart</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a12615dc627d46ce524b68491dc4e3ed2</anchor>
      <arglist>(omnetpp::simtime_t start)</arglist>
    </member>
    <member kind="function">
      <type>TimerSpecification &amp;</type>
      <name>relativeEnd</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>acc1f84d9e464171678f681aafa4f73ca</anchor>
      <arglist>(omnetpp::simtime_t end)</arglist>
    </member>
    <member kind="function">
      <type>TimerSpecification &amp;</type>
      <name>absoluteEnd</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>aacf9ddb518dbc37cdec64187db3037aa</anchor>
      <arglist>(omnetpp::simtime_t end)</arglist>
    </member>
    <member kind="function">
      <type>TimerSpecification &amp;</type>
      <name>openEnd</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>ae11220be0270a922ff8b5c19b71603a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TimerSpecification &amp;</type>
      <name>oneshotIn</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>af679b95d5ec42458ad29a9eaa5427fad</anchor>
      <arglist>(omnetpp::simtime_t in)</arglist>
    </member>
    <member kind="function">
      <type>TimerSpecification &amp;</type>
      <name>oneshotAt</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>ac0b5f3e0f52575833abc0a879940df86</anchor>
      <arglist>(omnetpp::simtime_t at)</arglist>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>StartMode</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a437dd1701cb3e1d1d3f194b2fa81588e</anchor>
      <arglist></arglist>
      <enumvalue file="structveins_1_1_timer_specification.html" anchor="a437dd1701cb3e1d1d3f194b2fa81588ea99c483e1d11b1a279a2a1a3960528487">relative</enumvalue>
      <enumvalue file="structveins_1_1_timer_specification.html" anchor="a437dd1701cb3e1d1d3f194b2fa81588eadc4d53aa0d117d8b189b36d161af4e96">absolute</enumvalue>
      <enumvalue file="structveins_1_1_timer_specification.html" anchor="a437dd1701cb3e1d1d3f194b2fa81588ea516ff1e73f558b0ae701ae4561a63e2c">immediate</enumvalue>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>EndMode</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a826b5c352b412e968c048925cf41d42b</anchor>
      <arglist></arglist>
      <enumvalue file="structveins_1_1_timer_specification.html" anchor="a826b5c352b412e968c048925cf41d42ba99c483e1d11b1a279a2a1a3960528487">relative</enumvalue>
      <enumvalue file="structveins_1_1_timer_specification.html" anchor="a826b5c352b412e968c048925cf41d42badc4d53aa0d117d8b189b36d161af4e96">absolute</enumvalue>
      <enumvalue file="structveins_1_1_timer_specification.html" anchor="a826b5c352b412e968c048925cf41d42ba6d786dc72762835027312be990412a9e">repetition</enumvalue>
      <enumvalue file="structveins_1_1_timer_specification.html" anchor="a826b5c352b412e968c048925cf41d42ba7cef8a734855777c2a9d0caf42666e69">open</enumvalue>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a50bab2e5ee6dfa1c92f5e185d582dd8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>ab34fe79fb10681681beea5fd3bb99423</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>validOccurence</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>ac5d6a3404618f08ea750f960e18334ef</anchor>
      <arglist>(omnetpp::simtime_t time) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>friend</type>
      <name>TimerManager</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a5b271730b435f9b91eb2380de89269a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StartMode</type>
      <name>start_mode_</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>ad3cce97943e1daa19761bc00154281d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>omnetpp::simtime_t</type>
      <name>start_</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a1df22ef482c7db3a4685aca95ce6affe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EndMode</type>
      <name>end_mode_</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>ab3f1660c4e2171c54a10ef860839119a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>end_count_</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a02eade5a5e1cd72da82937fd3bbe251a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>omnetpp::simtime_t</type>
      <name>end_time_</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a41e26063c894bcc74596ce19a10e9f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>omnetpp::simtime_t</type>
      <name>period_</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>a01f97846be0d7df78dddd402a98a0be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::function&lt; void()&gt;</type>
      <name>callback_</name>
      <anchorfile>structveins_1_1_timer_specification.html</anchorfile>
      <anchor>aff82f3acbe4f1dc87e3a73132e756069</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::traci2omnet_functor</name>
    <filename>structveins_1_1traci2omnet__functor.html</filename>
    <member kind="function">
      <type></type>
      <name>traci2omnet_functor</name>
      <anchorfile>structveins_1_1traci2omnet__functor.html</anchorfile>
      <anchor>a14601b2064b0deaf5c1c9a0360fd2866</anchor>
      <arglist>(const TraCIConnection &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator()</name>
      <anchorfile>structveins_1_1traci2omnet__functor.html</anchorfile>
      <anchor>ad1896ac1e4b6eb35eeccfaa7ff9919b6</anchor>
      <arglist>(const TraCICoord &amp;coord) const</arglist>
    </member>
    <member kind="variable">
      <type>const TraCIConnection &amp;</type>
      <name>owner</name>
      <anchorfile>structveins_1_1traci2omnet__functor.html</anchorfile>
      <anchor>af08a32366551ab364e0dddcd0233bcd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIBuffer</name>
    <filename>classveins_1_1_tra_c_i_buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCIBuffer</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a2fa650feecbe13e3756c2624d237d065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCIBuffer</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a8d6d7d4ebc47e74d2796889cd46f9260</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>abc98d94cf263c416bdd8cb46116fbbb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>aa7e7eb4fc90b1047e7d960cd4ca944fa</anchor>
      <arglist>(T inv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readBuffer</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a69c48113761defe554a285f69661d7d3</anchor>
      <arglist>(unsigned char *buffer, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a319438cbc7e3e001d9619da443d9366a</anchor>
      <arglist>(T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>TraCIBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>adefe1f07ccf5905690e101d124886351</anchor>
      <arglist>(T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>TraCIBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a0e6fbfe3b8da4ed1d15f1f9da767f1cf</anchor>
      <arglist>(const T &amp;inv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readTypeChecked</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a8d4f6fca299bfcc926a39eab5080c266</anchor>
      <arglist>(int expectedTraCIType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a636065a78d254fb480905d0bd0fb7b07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>ae6f2ecda96eae1ec978bfd39eebbb2ca</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a2a0a099717c563bcc38b67efeb48efaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>ad05f91f4550a6e3c45042c1fc5811e94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>hexStr</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a7f1681cd5f495183128a9f09a05ffc2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>readTypeChecked</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a1f927beb0dc3345dd01fde0a36474556</anchor>
      <arglist>(int expectedTraCIType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a3316678276ed02ebcf46706e2e22bfa1</anchor>
      <arglist>(std::string inv)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a9f514b33d03904c232c8fb9972aedea1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>ad98664a05c72f5204dd555f3f30b167e</anchor>
      <arglist>(TraCICoord inv)</arglist>
    </member>
    <member kind="function">
      <type>TraCICoord</type>
      <name>read</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a972cf8cc17c692d23735d73ef6b5eea1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a7d7885099b8ed266d4a73cc238664429</anchor>
      <arglist>(simtime_t o)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>read</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a656647f96c5f138957f393e2f3eed187</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void VEINS_API</type>
      <name>write</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a9ee46c57160b7259ad466f73aa3a7fd4</anchor>
      <arglist>(std::string inv)</arglist>
    </member>
    <member kind="function">
      <type>std::string VEINS_API</type>
      <name>read</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a2c97c4543f780afa435513b5a1eb2568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTimeType</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>aa675fde83057576e640064abc446a2d8</anchor>
      <arglist>(uint8_t val)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>buf</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a8eb5495083908db16f4395944234644a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>buf_index</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a4d3d1958cb1707bb03044a016adf6d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static bool</type>
      <name>timeAsDouble</name>
      <anchorfile>classveins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a77aaabae2597ba75d064c5e3fbda2271</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIColor</name>
    <filename>classveins_1_1_tra_c_i_color.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCIColor</name>
      <anchorfile>classveins_1_1_tra_c_i_color.html</anchorfile>
      <anchor>aed4c0a7c62bb97cd300b23f3f932e6e7</anchor>
      <arglist>(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TraCIColor</type>
      <name>fromTkColor</name>
      <anchorfile>classveins_1_1_tra_c_i_color.html</anchorfile>
      <anchor>a298f34374f0c11021d65018040152c98</anchor>
      <arglist>(std::string tkColorName)</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>red</name>
      <anchorfile>classveins_1_1_tra_c_i_color.html</anchorfile>
      <anchor>a22807ffd4a188e20e82f429c6a3d7b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>green</name>
      <anchorfile>classveins_1_1_tra_c_i_color.html</anchorfile>
      <anchor>a251cbfb0396d99bc18b7cbe308468052</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>blue</name>
      <anchorfile>classveins_1_1_tra_c_i_color.html</anchorfile>
      <anchor>af5cb498ef88f8d5639a835467ce16888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>alpha</name>
      <anchorfile>classveins_1_1_tra_c_i_color.html</anchorfile>
      <anchor>a0b1cdaaadf94c2b227a4241e81d94d12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCICommandInterface</name>
    <filename>classveins_1_1_tra_c_i_command_interface.html</filename>
    <base>veins::HasLogProxy</base>
    <class kind="class">veins::TraCICommandInterface::GuiView</class>
    <class kind="class">veins::TraCICommandInterface::Junction</class>
    <class kind="class">veins::TraCICommandInterface::Lane</class>
    <class kind="class">veins::TraCICommandInterface::LaneAreaDetector</class>
    <class kind="class">veins::TraCICommandInterface::Poi</class>
    <class kind="class">veins::TraCICommandInterface::Polygon</class>
    <class kind="class">veins::TraCICommandInterface::Road</class>
    <class kind="class">veins::TraCICommandInterface::Route</class>
    <class kind="class">veins::TraCICommandInterface::Trafficlight</class>
    <class kind="class">veins::TraCICommandInterface::Vehicle</class>
    <class kind="struct">veins::TraCICommandInterface::VersionConfig</class>
    <member kind="enumeration">
      <type></type>
      <name>DepartTime</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a073c752221a635c5224b7affedb750fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_TIME_TRIGGERED</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a073c752221a635c5224b7affedb750fca82c3b756955bed801a882aa751f1d87d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_TIME_CONTAINER_TRIGGERED</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a073c752221a635c5224b7affedb750fca627ba74e7744a59d303aaa3bad4d03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_TIME_NOW</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a073c752221a635c5224b7affedb750fca5fe47af44e240bbdcca93373b86c1f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DepartSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>aa34e6d844b4c0fb50b554a8efb5adbc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_SPEED_RANDOM</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>aa34e6d844b4c0fb50b554a8efb5adbc1ad4d88269d295620e431a73d2277d0b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_SPEED_MAX</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>aa34e6d844b4c0fb50b554a8efb5adbc1a595f949d96fd61bf1ca4ae608cf60b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DepartPosition</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adcc7f975f1382c0854c7fe5cd8fa0e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_POSITION_RANDOM</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adcc7f975f1382c0854c7fe5cd8fa0e49ad379a999a1198b918dcaf4c2828dbf66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_POSITION_FREE</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adcc7f975f1382c0854c7fe5cd8fa0e49a58cbed7e5111e5953dcade5aef62db08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_POSITION_BASE</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adcc7f975f1382c0854c7fe5cd8fa0e49a86e489b7629d6190c3cc20c9d58e765b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_POSITION_LAST</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adcc7f975f1382c0854c7fe5cd8fa0e49a3fdc028d44a90f4f5d67614f650cb527</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_POSITION_RANDOM_FREE</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adcc7f975f1382c0854c7fe5cd8fa0e49a3104f7ca8646c548ff7e3c0a21eb70bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DepartLane</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6b6430675ec33004d843098236aaaef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_LANE_RANDOM</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6b6430675ec33004d843098236aaaef1a740fbab8ef85e4c717cbdbefc39516ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_LANE_FREE</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6b6430675ec33004d843098236aaaef1a987fe0405fc3eb1cf1c7bc2bc3b013c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_LANE_ALLOWED</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6b6430675ec33004d843098236aaaef1a5cc84a6fc4958c87db80c8c9530faae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_LANE_BEST</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6b6430675ec33004d843098236aaaef1a8dc800d15d2e10c2e9ca27b12b6f8bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_LANE_FIRST</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6b6430675ec33004d843098236aaaef1a832c0638e4812cfb754de0e4c2d89555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_TIME_TRIGGERED</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a073c752221a635c5224b7affedb750fca82c3b756955bed801a882aa751f1d87d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_TIME_CONTAINER_TRIGGERED</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a073c752221a635c5224b7affedb750fca627ba74e7744a59d303aaa3bad4d03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_TIME_NOW</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a073c752221a635c5224b7affedb750fca5fe47af44e240bbdcca93373b86c1f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_SPEED_RANDOM</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>aa34e6d844b4c0fb50b554a8efb5adbc1ad4d88269d295620e431a73d2277d0b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_SPEED_MAX</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>aa34e6d844b4c0fb50b554a8efb5adbc1a595f949d96fd61bf1ca4ae608cf60b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_POSITION_RANDOM</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adcc7f975f1382c0854c7fe5cd8fa0e49ad379a999a1198b918dcaf4c2828dbf66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_POSITION_FREE</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adcc7f975f1382c0854c7fe5cd8fa0e49a58cbed7e5111e5953dcade5aef62db08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_POSITION_BASE</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adcc7f975f1382c0854c7fe5cd8fa0e49a86e489b7629d6190c3cc20c9d58e765b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_POSITION_LAST</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adcc7f975f1382c0854c7fe5cd8fa0e49a3fdc028d44a90f4f5d67614f650cb527</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_POSITION_RANDOM_FREE</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adcc7f975f1382c0854c7fe5cd8fa0e49a3104f7ca8646c548ff7e3c0a21eb70bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_LANE_RANDOM</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6b6430675ec33004d843098236aaaef1a740fbab8ef85e4c717cbdbefc39516ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_LANE_FREE</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6b6430675ec33004d843098236aaaef1a987fe0405fc3eb1cf1c7bc2bc3b013c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_LANE_ALLOWED</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6b6430675ec33004d843098236aaaef1a5cc84a6fc4958c87db80c8c9530faae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_LANE_BEST</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6b6430675ec33004d843098236aaaef1a8dc800d15d2e10c2e9ca27b12b6f8bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPART_LANE_FIRST</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6b6430675ec33004d843098236aaaef1a832c0638e4812cfb754de0e4c2d89555</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCICommandInterface</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a7247dea16ea8b0434e9dbfcddac5fffc</anchor>
      <arglist>(cComponent *owner, TraCIConnection &amp;c, bool ignoreGuiCommands)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIgnoringGuiCommands</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a14f9a3666602834dc5b61b3c1c669410</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; uint32_t, std::string &gt;</type>
      <name>getVersion</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ad0c2e9daaf9cc954e1c5b96304d913ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApiVersion</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a1f9c5cc4aed73591258d696f5a3a8087</anchor>
      <arglist>(uint32_t apiVersion)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>getLonLat</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6616ffc201974b0a2f399e825d190134</anchor>
      <arglist>(const Coord &amp;)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getApiVersion</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a58f4f995ce174518cab2980b14547203</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getTimeType</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a34a8d888b777481ef9273aebdd96e6d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getNetBoundaryType</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a52a41b6021e88664876d04ac31f86a59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getTimeStepCmd</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a8e731be5c3ad674955e081fddb707047</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; TraCICoord, TraCICoord &gt;</type>
      <name>initNetworkBoundaries</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a60c61fd2e948db73f6237ad8906811b5</anchor>
      <arglist>(int margin)</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; std::string, double, uint8_t &gt;</type>
      <name>getRoadMapPos</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a3865e24f9fbd92005c46e5576d628945</anchor>
      <arglist>(const Coord &amp;coord)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistance</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a85043c2302f508377932c5ae6fe516b0</anchor>
      <arglist>(const Coord &amp;position1, const Coord &amp;position2, bool returnDrivingDistance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addVehicle</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a1f7ae67bfc7c7aee1e221e26724ce026</anchor>
      <arglist>(std::string vehicleId, std::string vehicleTypeId, std::string routeId, simtime_t emitTime_st=DEPART_TIME_TRIGGERED, double emitPosition=DEPART_POSITION_BASE, double emitSpeed=DEPART_SPEED_MAX, int8_t emitLane=DEPART_LANE_BEST)</arglist>
    </member>
    <member kind="function">
      <type>Vehicle</type>
      <name>vehicle</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ab8fa85f253f76d3edc64c3cf02b00d0f</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getRoadIds</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a15d2f7196c24d7b0c8ad1833d5857885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Road</type>
      <name>road</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a73139cfea14d48b6a06a1a7e61780d2e</anchor>
      <arglist>(std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getLaneIds</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a46c9ef680a7b910b7f8d74b0d1d2e392</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Lane</type>
      <name>lane</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a81c20d089401100e343726a16a73c029</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getTrafficlightIds</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6902f1c5bc693fa46cf2bf9175173a8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Trafficlight</type>
      <name>trafficlight</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a537737f1054f05e77f431a3659cb5e84</anchor>
      <arglist>(std::string trafficLightId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getLaneAreaDetectorIds</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a342d0a4cd83cf5f2e3ffc70716ad054f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LaneAreaDetector</type>
      <name>laneAreaDetector</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>aabe03ee736851ffe5999c9672584c3a3</anchor>
      <arglist>(std::string laneAreaDetectorId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getPolygonIds</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6089e8b0f413375119dfc40b6e465924</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPolygon</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a1d528260cf5344fffba0a59127881d1d</anchor>
      <arglist>(std::string polyId, std::string polyType, const TraCIColor &amp;color, bool filled, int32_t layer, const std::list&lt; Coord &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>Polygon</type>
      <name>polygon</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>af84efc08b64c51d7e6f8d9b2bc542781</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getPoiIds</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>afbe7efb75d1c9f7cf60cb7d25c5af4b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoi</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ac993f428c814e092e6d7326e2af150eb</anchor>
      <arglist>(std::string poiId, std::string poiType, const TraCIColor &amp;color, int32_t layer, const Coord &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>Poi</type>
      <name>poi</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a7d00809be36c763a8bfb96a86e985315</anchor>
      <arglist>(std::string poiId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getJunctionIds</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a741694ecfe031e264b0d364c9306520c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Junction</type>
      <name>junction</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>aabb9f6ae2a022beba1edde3570b3ee8c</anchor>
      <arglist>(std::string junctionId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getRouteIds</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a34c0d649240f6d6043532467cd1fb3f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Route</type>
      <name>route</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6e50e3b359d4725271262b6be29c2519</anchor>
      <arglist>(std::string routeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getVehicleTypeIds</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a02760d51aeac1fc198f12fe0fd70d596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getGuiViewIds</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ae4f3edcecb046a56f4c8ac73999f0569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GuiView</type>
      <name>guiView</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ab3a7b14041726358076ca611f2f6aff6</anchor>
      <arglist>(std::string viewId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>genericGetString</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a2c4fd212793ec76df154cd326d38a328</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId, TraCIConnection::Result *result=nullptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Coord</type>
      <name>genericGetCoord</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a7e859f8c0e52898b3a7c4a672c77799c</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId, TraCIConnection::Result *result=nullptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>genericGetDouble</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6027162d237a5867d919722cfe2dc73e</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId, TraCIConnection::Result *result=nullptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>simtime_t</type>
      <name>genericGetTime</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a2d25773a1c4caaf427fea411f6f54175</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId, TraCIConnection::Result *result=nullptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int32_t</type>
      <name>genericGetInt</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a7bdc87301e7f33d47a380aaaf81f30b4</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId, TraCIConnection::Result *result=nullptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::list&lt; std::string &gt;</type>
      <name>genericGetStringList</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>af544e901f18e872a684a0b1279f60f45</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId, TraCIConnection::Result *result=nullptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::list&lt; Coord &gt;</type>
      <name>genericGetCoordList</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>aa7e8c7a184c23c51461230c8d3e6ba24</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId, TraCIConnection::Result *result=nullptr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TraCIConnection &amp;</type>
      <name>connection</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a95a1dd4f0ab8cc9616854a232941b242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ignoreGuiCommands</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ac5e97bb9877dffce21dd38cf3e27be0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VersionConfig</type>
      <name>versionConfig</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>af9268faf9029e37ead95e8838bbb6ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::map&lt; uint32_t, VersionConfig &gt;</type>
      <name>versionConfigs</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a26f0f7d4d61d59aedc5ad2a8e9e8d5e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIConnection</name>
    <filename>classveins_1_1_tra_c_i_connection.html</filename>
    <base>veins::HasLogProxy</base>
    <class kind="class">veins::TraCIConnection::Result</class>
    <member kind="function">
      <type>void</type>
      <name>setNetbounds</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a71e44478c142d5fa9b3e51f898ceef1f</anchor>
      <arglist>(TraCICoord netbounds1, TraCICoord netbounds2, int margin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraCIConnection</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>aa7892cc48ded4b9bba78c9d7c653bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TraCIBuffer</type>
      <name>query</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>aaf49494fd564d7e88f1c539d9fd8aff8</anchor>
      <arglist>(uint8_t commandId, const TraCIBuffer &amp;buf=TraCIBuffer(), Result *result=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>ae9525e27e903007d2fb3382e790a748a</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>receiveMessage</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>abec53685d1816f11e2ab2797bdc467fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Heading</type>
      <name>traci2omnetHeading</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>af08fbfb6cc9cecd7ab9262a139731db8</anchor>
      <arglist>(double heading) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>omnet2traciHeading</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a4602b0271cb2a84756c23be3f1bba06c</anchor>
      <arglist>(Heading heading) const</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>traci2omnet</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a77156751db8d0f5727e98c14d612f432</anchor>
      <arglist>(TraCICoord coord) const</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>traci2omnet</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a14df8ccc7b9bd85186323a27fe32b8a7</anchor>
      <arglist>(const std::list&lt; TraCICoord &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>TraCICoord</type>
      <name>omnet2traci</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a43b793beb2e8c60243db24af72951e59</anchor>
      <arglist>(Coord coord) const</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; TraCICoord &gt;</type>
      <name>omnet2traci</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a0a160b8b2ee70f79d80391a342fa965d</anchor>
      <arglist>(const std::list&lt; Coord &gt; &amp;) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TraCIConnection *</type>
      <name>connect</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a877f117bb16b8c6097fd1419058b1e2f</anchor>
      <arglist>(cComponent *owner, const char *host, int port)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TraCIConnection</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a1badb01eb868aff2a9cf3954a3489f23</anchor>
      <arglist>(cComponent *owner, void *ptr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>socketPtr</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>aa793be6efc96186b9393bb08c20c81f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; TraCICoordinateTransformation &gt;</type>
      <name>coordinateTransformation</name>
      <anchorfile>classveins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a5bd4e4ba28fbdab179e0151dd13ac89c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::TraCICoord</name>
    <filename>structveins_1_1_tra_c_i_coord.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCICoord</name>
      <anchorfile>structveins_1_1_tra_c_i_coord.html</anchorfile>
      <anchor>a482928ad9e88cff64359e167f1e13703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCICoord</name>
      <anchorfile>structveins_1_1_tra_c_i_coord.html</anchorfile>
      <anchor>a583fefffc3e3d41befbef8d86a3e2012</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>structveins_1_1_tra_c_i_coord.html</anchorfile>
      <anchor>a912ba59b07287a96a71df0908da65c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>structveins_1_1_tra_c_i_coord.html</anchorfile>
      <anchor>af937d67136809335570376b86da1475a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCICoordinateTransformation</name>
    <filename>classveins_1_1_tra_c_i_coordinate_transformation.html</filename>
    <member kind="typedef">
      <type>Coord</type>
      <name>OmnetCoord</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>ae3b0f39812e4348879aaaa57c87bfbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; OmnetCoord &gt;</type>
      <name>OmnetCoordList</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>a0ca4977002569072aac620ba4b2744fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; TraCICoord &gt;</type>
      <name>TraCICoordList</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>a584f789e720846d1812d57bac1229924</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>TraCIHeading</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>a7e59308f377e98d07d76a5f3ac162d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Heading</type>
      <name>OmnetHeading</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>a3b189c85b048ecbca87f4abaef7c7ff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCICoordinateTransformation</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>af26b1a4b6f065ce9cf6622f2a2a6b6d3</anchor>
      <arglist>(TraCICoord topleft, TraCICoord bottomright, float margin)</arglist>
    </member>
    <member kind="function">
      <type>TraCICoord</type>
      <name>omnet2traci</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>a33012a07f646e20ffbd26c9136703064</anchor>
      <arglist>(const OmnetCoord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>TraCICoordList</type>
      <name>omnet2traci</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>a7a04433f0fd78eaa76a7aa3c6c90552e</anchor>
      <arglist>(const OmnetCoordList &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>TraCIHeading</type>
      <name>omnet2traciHeading</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>a592db5b7a7b7e4ed397609076f04ad1f</anchor>
      <arglist>(OmnetHeading heading) const</arglist>
    </member>
    <member kind="function">
      <type>OmnetCoord</type>
      <name>traci2omnet</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>a3d4bdeb688e31f679f870fe0b53087e2</anchor>
      <arglist>(const TraCICoord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>OmnetCoordList</type>
      <name>traci2omnet</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>ac0d91ccdf10fd3961d1df0707fe4545a</anchor>
      <arglist>(const TraCICoordList &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>OmnetHeading</type>
      <name>traci2omnetHeading</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>a3eaacbf46edf49462579454c1c36ba63</anchor>
      <arglist>(TraCIHeading heading) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TraCICoord</type>
      <name>dimensions</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>aee00f037136e4a2d211028bd3fb50f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TraCICoord</type>
      <name>topleft</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>a18b18fbb9730c7be519e24bf9e3caad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TraCICoord</type>
      <name>bottomright</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>a382be41592b0b1fc2cf097125234de54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>margin</name>
      <anchorfile>classveins_1_1_tra_c_i_coordinate_transformation.html</anchorfile>
      <anchor>ab0c9fd2efba756255a7f4c6b2b190d7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIDemo11p</name>
    <filename>classveins_1_1_tra_c_i_demo11p.html</filename>
    <base>veins::DemoBaseApplLayer</base>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_tra_c_i_demo11p.html</anchorfile>
      <anchor>ac52eef213e4579f7d5f671385b506b78</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onWSM</name>
      <anchorfile>classveins_1_1_tra_c_i_demo11p.html</anchorfile>
      <anchor>a3014dadc6ab101fa734eeb151df3567f</anchor>
      <arglist>(BaseFrame1609_4 *wsm) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onWSA</name>
      <anchorfile>classveins_1_1_tra_c_i_demo11p.html</anchorfile>
      <anchor>ab99a43052e88c2727b77da730e776c1b</anchor>
      <arglist>(DemoServiceAdvertisment *wsa) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_tra_c_i_demo11p.html</anchorfile>
      <anchor>a3ee2d9b315e56cddbedbc6bdcf8ddd00</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classveins_1_1_tra_c_i_demo11p.html</anchorfile>
      <anchor>aae2d2ce4ddead5bf4fdacf8fe00ba7e8</anchor>
      <arglist>(cObject *obj) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastDroveAt</name>
      <anchorfile>classveins_1_1_tra_c_i_demo11p.html</anchorfile>
      <anchor>a053f1f6550fa6fd8b12f7459e9d94dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classveins_1_1_tra_c_i_demo11p.html</anchorfile>
      <anchor>a381a6c72e9d730551e193d586dc11c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>currentSubscribedServiceId</name>
      <anchorfile>classveins_1_1_tra_c_i_demo11p.html</anchorfile>
      <anchor>aacd377e36e88fb24cd3e9d39aec307e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIDemoRSU11p</name>
    <filename>classveins_1_1_tra_c_i_demo_r_s_u11p.html</filename>
    <base>veins::DemoBaseApplLayer</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onWSM</name>
      <anchorfile>classveins_1_1_tra_c_i_demo_r_s_u11p.html</anchorfile>
      <anchor>a55d725edd6bedb4730afa73d734d6e74</anchor>
      <arglist>(BaseFrame1609_4 *wsm) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onWSA</name>
      <anchorfile>classveins_1_1_tra_c_i_demo_r_s_u11p.html</anchorfile>
      <anchor>ac9492fce14de082cccb9b581e90643f0</anchor>
      <arglist>(DemoServiceAdvertisment *wsa) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCILauncher</name>
    <filename>classveins_1_1_tra_c_i_launcher.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCILauncher</name>
      <anchorfile>classveins_1_1_tra_c_i_launcher.html</anchorfile>
      <anchor>aa04d837b3bf22fbce25e586cc18937fe</anchor>
      <arglist>(std::string commandLine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraCILauncher</name>
      <anchorfile>classveins_1_1_tra_c_i_launcher.html</anchorfile>
      <anchor>a323d0fbc1e752d140f9d5e1cd690ff90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>pid_t</type>
      <name>pid</name>
      <anchorfile>classveins_1_1_tra_c_i_launcher.html</anchorfile>
      <anchor>a8e1036fba4643dba6b18c4440b3a19fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIMobility</name>
    <filename>classveins_1_1_tra_c_i_mobility.html</filename>
    <base>veins::BaseMobility</base>
    <class kind="class">veins::TraCIMobility::Statistics</class>
    <member kind="function">
      <type></type>
      <name>TraCIMobility</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>adbe81e2feaa4d2418148233d5ca0de71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraCIMobility</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a4b41f76222e6d57a7b9716ed4d378cfb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a9945ece48d11a01a7973f991b467e848</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a8b2054efb318984c9bbb97909e4bcf73</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>aa1f9009fe55066959ba341d50818374b</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preInitialize</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a678634249e120d1e2614a628d20006f6</anchor>
      <arglist>(std::string external_id, const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, Heading heading=Heading::nan)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextPosition</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ae53642be0d88b9f146cf55a5d990f1a2</anchor>
      <arglist>(const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, Heading heading=Heading::nan, VehicleSignalSet signals={VehicleSignal::undefined})</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changePosition</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a3137899bb330551c9823c40b4ed8b8fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changeParkingState</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>add18338b0358fd50ff570922ab39c0e6</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalId</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a69e4c6b763d17b22409fb6eac1d87759</anchor>
      <arglist>(std::string external_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getExternalId</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a03be7f2dea11bdd7c89399290800deb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getHostPositionOffset</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a42bf6e1d9039a63726b520fb40878ce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getParkingState</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>aedb0d434725c9a1f5363a1f2409f6d2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRoadId</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ab52d2871b0ac179a2f34b8846ea1ea53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ae7c680f6f0bc1a3826f726a607c66bc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VehicleSignalSet</type>
      <name>getSignals</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>abf77b93a22d80fecf79f3d165774b063</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Heading</type>
      <name>getHeading</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a9abb81188ecd6cb9831f3af0fb462ba0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCIScenarioManager *</type>
      <name>getManager</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>afd1a0cc6ab4d26ff380b67e544ebfcbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCICommandInterface *</type>
      <name>getCommandInterface</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a65e65af2ffd59fdddc841ab7c5a383c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCICommandInterface::Vehicle *</type>
      <name>getVehicleCommandInterface</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a6eab92e98c45232e1c0d0b32aec2f127</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>getHostSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a536d0ddea4aed31d6281a8752ccb223b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignal_t</type>
      <name>parkingStateChangedSignal</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>afb8947869442c29e538fb9111df5eb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a4fa20054882e4a7fb5b03a13576311c3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateCO2emission</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a663c7cf7d4024b5ca29ab78234ac3bba</anchor>
      <arglist>(double v, double a) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>calculateHostPosition</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a0a85e6eecb5f12e6f027d5fa4c46700e</anchor>
      <arglist>(const Coord &amp;vehiclePos) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ad6be6b3f578a4402f4f7dfefe0b89d31</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>accidentCount</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ab58676e2d5c11365acd97b2be1d880fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentPosXVec</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a46607dc29197945d300117298eab2797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentPosYVec</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ab965614e9b3aeea1192dd31878707987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentSpeedVec</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ae89972c2a8d6fa76d7bfacd79636d85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentAccelerationVec</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>aee9b740ded477643e38cffa5b71ef43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentCO2EmissionVec</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a22bf56365c6edd15b511cca3f51b5d5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Statistics</type>
      <name>statistics</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a242a0c8a251d3cb863f647da220446a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isPreInitialized</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a0fc660f70b0def5d664afcb651c729dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>external_id</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>abdf3fa675b9a0a4c26ed59a0cd16b3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>hostPositionOffset</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a8482c300b0cdffd7cea34ff5ac9929a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>setHostSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a4b6041ea57bc1ff01271c8bbe3993cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastUpdate</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ab07c31172a4656dc27e088cddd60d395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>roadPosition</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>af8242c4456b31d013392f31f7735cf79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>road_id</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a2b49dd3b7a30138e569c963e6821cccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a8e402d9ab211c38f08fae19cb6388502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Heading</type>
      <name>heading</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a00dd4963f99ba0b979d85a91932c102c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VehicleSignalSet</type>
      <name>signals</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ab01ddc1e1c0fc12a2c764ca0f24992b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>startAccidentMsg</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>afe77dbc3db8dc70499bf6b3d3742c82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stopAccidentMsg</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a6dc0a26a68a4cd412bd8f429b6f1a116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIScenarioManager *</type>
      <name>manager</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>aca527041b79ad41fa18f793b2337fac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>commandInterface</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>acbd7af0e3a1a2da67edb25fc996288d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface::Vehicle *</type>
      <name>vehicleCommandInterface</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a51377bedfe3e20286653eb325748384a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>last_speed</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a542ddb36c3f67fd5e7cf37a6a2bfab81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isParking</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a6d3d6d6147f650dcb07e62197ae55247</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIMobilityAccess</name>
    <filename>classveins_1_1_tra_c_i_mobility_access.html</filename>
    <member kind="function">
      <type>TraCIMobility *</type>
      <name>get</name>
      <anchorfile>classveins_1_1_tra_c_i_mobility_access.html</anchorfile>
      <anchor>a3a9a7cb34fa5b8bd351a61bfe783dc52</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIRegionOfInterest</name>
    <filename>classveins_1_1_tra_c_i_region_of_interest.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ConstraintResult</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>ac17d8a9b0025ad379323aec875f6653c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>ac17d8a9b0025ad379323aec875f6653caef745e936d3bdf430b719d23c9ee43a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SATISFY</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>ac17d8a9b0025ad379323aec875f6653caa430f19d3964c9091e0664d6b827a1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BREAK</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>ac17d8a9b0025ad379323aec875f6653ca3d43b19b7368e6b435a69be85dd25cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>ac17d8a9b0025ad379323aec875f6653caef745e936d3bdf430b719d23c9ee43a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SATISFY</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>ac17d8a9b0025ad379323aec875f6653caa430f19d3964c9091e0664d6b827a1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BREAK</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>ac17d8a9b0025ad379323aec875f6653ca3d43b19b7368e6b435a69be85dd25cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCIRegionOfInterest</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>a2f86cd627a328f3698b9a68518d82810</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRoads</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>ae2bf4df47c7a3674ee200b26ecd39846</anchor>
      <arglist>(const std::string &amp;roads)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRectangles</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>ab117030ff1f84dc9739c084aca782c91</anchor>
      <arglist>(const std::string &amp;rects)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>a80b878563f3c841063e1fffdba95f185</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>onAnyRectangle</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>a05255cae33b5f5cd72bee5f779748d13</anchor>
      <arglist>(const TraCICoord &amp;pos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>partOfRoads</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>a5c0f659275d615793e96798c97f42f83</anchor>
      <arglist>(const std::string &amp;road_id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasConstraints</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>ad29cc28eeb1dbd6b3766cb82e764f4cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::list&lt; std::pair&lt; TraCICoord, TraCICoord &gt; &gt; &amp;</type>
      <name>getRectangles</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>a31165adb248057d7e3b22186312ec0be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; std::string &gt;</type>
      <name>roiRoads</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>ab5611646d9f77ba0047c682efdcd1fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; std::pair&lt; TraCICoord, TraCICoord &gt; &gt;</type>
      <name>roiRects</name>
      <anchorfile>classveins_1_1_tra_c_i_region_of_interest.html</anchorfile>
      <anchor>a678455f8566e42777fbf15d28b6112fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIScenarioManager</name>
    <filename>classveins_1_1_tra_c_i_scenario_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCIScenarioManager</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a54a7ac1f30470a59a6bf661499621ac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraCIScenarioManager</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a2eee2b891e19bffe0d0601ca5361780b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a45dbb175f71a9d918a2aac860e529b01</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a6060adf2e942f6e7343ee26091193341</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ad7a61cb680779283e019b961eb567fad</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ac66ce95372a25d1860ad24748363090d</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a86a0b91aab8823c087c33b99f3a06b1f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>aaef11461dfdc93229532a56fdca3e5df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TraCICommandInterface *</type>
      <name>getCommandInterface</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a9a82c8a0f6af08586d17d122431e98e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TraCIConnection *</type>
      <name>getConnection</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a3d4e6d86b43b91faac02a81f9b827275</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAutoShutdownTriggered</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ae5b626ba66648591abfa42b621fe7a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, cModule * &gt; &amp;</type>
      <name>getManagedHosts</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a5a41943277b447e3bd5f0ef0827803be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsable</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ad12fcbfa9c0bc826b6d56def59518306</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignal_t</type>
      <name>traciInitializedSignal</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a780e4e5af6398822ba91437cd7b29e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignal_t</type>
      <name>traciModuleAddedSignal</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a0c9645a2188cc66373e794b51bb8f389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignal_t</type>
      <name>traciModuleRemovedSignal</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a58febba15084cd8e45340817a41c6dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignal_t</type>
      <name>traciTimestepBeginSignal</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>aba22db6e9b82e1dd7b2a28082339ddd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignal_t</type>
      <name>traciTimestepEndSignal</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>aef30ec623c6e7752e7b56408600861b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>TypeMapping</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a8c7296e0da931feaafcdb558f1b5853c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>executeOneTimestep</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a84ebe9fb50441189bd39f949f2593115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_traci</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a5389f3fc889b1fe3fd126c33a7d9ae36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preInitializeModule</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a13264243f55481b3adacd7d9b2d331b4</anchor>
      <arglist>(cModule *mod, const std::string &amp;nodeId, const Coord &amp;position, const std::string &amp;road_id, double speed, Heading heading, VehicleSignalSet signals)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateModulePosition</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a39d363ab0a50b1bd7efd7797701c00bb</anchor>
      <arglist>(cModule *mod, const Coord &amp;p, const std::string &amp;edge, double speed, Heading heading, VehicleSignalSet signals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addModule</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>adb6c935127d87d82ed5510174d28915f</anchor>
      <arglist>(std::string nodeId, std::string type, std::string name, std::string displayString, const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, Heading heading=Heading::nan, VehicleSignalSet signals={VehicleSignal::undefined}, double length=0, double height=0, double width=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>getManagedModule</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a600d697200c9ed997ed6551cbc8e81d3</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteManagedModule</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>aaeb2994f7103a8710de44e1475345855</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isModuleUnequipped</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a52691baec11c32dfe08f2cc721751075</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>subscribeToVehicleVariables</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a999d945fca20d45532a24b492430d742</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unsubscribeFromVehicleVariables</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a53c90abb9587bfef622c410ea9ca31ae</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSimSubscription</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a1dba6b09e84d2d3d91c552bc9172119f</anchor>
      <arglist>(std::string objectId, TraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processVehicleSubscription</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a4b6aa1aa798b245ff323c5759a3b848e</anchor>
      <arglist>(std::string objectId, TraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSubcriptionResult</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a2f149bc15c3119ab19850b6960689eeb</anchor>
      <arglist>(TraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>subscribeToTrafficLightVariables</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a9aff5d4c2403fdc11846bbb27f32fd04</anchor>
      <arglist>(std::string tlId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unsubscribeFromTrafficLightVariables</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a5ca4055ef74f5f9c81a4943d09624088</anchor>
      <arglist>(std::string tlId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processTrafficLightSubscription</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>add02cc9cb92d43c6d9ed80ecae664063</anchor>
      <arglist>(std::string objectId, TraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parseModuleTypes</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a45673008abaef567b3c5c0241ff4392f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TypeMapping</type>
      <name>parseMappings</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a2078c66faf6fa4efd7cf245f4b4ca88e</anchor>
      <arglist>(std::string parameter, std::string parameterName, bool allowEmpty=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getPortNumber</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a59880f7110ff80a99c4549a04426df76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>traciInitialized</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a9cf13e72c586b9c2381aa1ed3d50af02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>connectAt</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a46734b0fe69a2850cacaffdc6de98c51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>firstStepAt</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa601ec3ad3f7ca0461ffe36b1344712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a1f4165010ade9356314aff81d04558fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TypeMapping</type>
      <name>moduleType</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ab73f12258127c73019d25591effa3136</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TypeMapping</type>
      <name>moduleName</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a25982a6fda885a24edd7b85193a479a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TypeMapping</type>
      <name>moduleDisplayString</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a6dfb5905e469f2bf5bad563fcad7ecf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>host</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ac7dd3c886ffeac95320da723a73343c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>port</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a48cfa3bf0a35c07bdb356bee15939e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>trafficLightModuleType</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ae24d7e07f6266f84ec72c21d9987f281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>trafficLightModuleName</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a92cb044cb3b54a3e9080d0ed01c0b673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>trafficLightModuleDisplayString</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ade6e3d6720c1821ef612121703db7037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>trafficLightModuleIds</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a2242b61381f3e26503ba0c6648eec711</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoShutdown</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ae7578430079c9fe7432992b895c8b29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>penetrationRate</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a38c2b208148ddaa9fa485006441612de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ignoreGuiCommands</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a6901672054f7d05b1e32796dc0dafc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIRegionOfInterest</type>
      <name>roi</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a3f5027f9624222416024c868b63e034d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>areaSum</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a64eeeb953ca5d7e2aa147c00e54ac514</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a265b5328e12f4fede5996de9bfa779d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; TraCIConnection &gt;</type>
      <name>connection</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a3ffa49a8060aaf03459fb66f37617e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; TraCICommandInterface &gt;</type>
      <name>commandIfc</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a7ecc8585851d317186662e316fc758d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nextNodeVectorIndex</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a4630499f6c595b74d85afc262de970e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, cModule * &gt;</type>
      <name>hosts</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>aaa883099f1b93cc8217502d9649a7958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>unEquippedHosts</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a2014b32288295a368755cdb2b4fc4134</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>subscribedVehicles</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ab2dbc259d522f393d657dec2535ec55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, cModule * &gt;</type>
      <name>trafficLights</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a711955a227e008dd51565594c812757a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>activeVehicleCount</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a2fcb0e8dfe1923edeff2acf17f7ad512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>parkingVehicleCount</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a0e4b5e4c4aa7719d75ac624e1311d48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>drivingVehicleCount</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>acc828c3110b0a6de67d30f4a2253ddb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoShutdownTriggered</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ab0d6797ba2533aa02fac7c50a17ef33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>connectAndStartTrigger</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a84ecd8c475d00a8265afec5f9874705f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>executeOneTimestepTrigger</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a137f853e4490707b671d3d7f77083983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a3cad7ae35d0895588ac95dc4fe8af008</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; const BaseMobility *, const MobileHostObstacle * &gt;</type>
      <name>vehicleObstacles</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a4bc49d092197225c9c4d8121f98da35b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VehicleObstacleControl *</type>
      <name>vehicleObstacleControl</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>adf4ccbf22ae2f1f09312efe3ff1836d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIScenarioManagerAccess</name>
    <filename>classveins_1_1_tra_c_i_scenario_manager_access.html</filename>
    <member kind="function">
      <type>TraCIScenarioManager *</type>
      <name>get</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_access.html</anchorfile>
      <anchor>a327aea423a1acd13027a591fbae8b4c5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIScenarioManagerForker</name>
    <filename>classveins_1_1_tra_c_i_scenario_manager_forker.html</filename>
    <base>veins::TraCIScenarioManager</base>
    <member kind="function">
      <type></type>
      <name>TraCIScenarioManagerForker</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker.html</anchorfile>
      <anchor>a57023808e9df90184fc08e28928a76c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraCIScenarioManagerForker</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker.html</anchorfile>
      <anchor>a9f887f67898178f4f4d4d6655252a3e5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker.html</anchorfile>
      <anchor>a952e624950eb8aa1d856c850c574a4e9</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker.html</anchorfile>
      <anchor>a1147312387230b2e19e7f8848e3062de</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startServer</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker.html</anchorfile>
      <anchor>a40b91fb5a4d7f828f456ac9d48c9ef6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>killServer</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker.html</anchorfile>
      <anchor>a1283a00830ff63144a1c9551495b086e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getPortNumber</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker.html</anchorfile>
      <anchor>a7144d9f143ab51906797efbe4f4b0684</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>commandLine</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker.html</anchorfile>
      <anchor>a723113df4ab94a55d366e5e344dd3de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>command</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker.html</anchorfile>
      <anchor>a60ea028be5aed43c92db921364661003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>configFile</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker.html</anchorfile>
      <anchor>a95c80afaf3a1f89cd43827db308174eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seed</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker.html</anchorfile>
      <anchor>adaa747c9c3cfa896606e2f73435422cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCILauncher *</type>
      <name>server</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker.html</anchorfile>
      <anchor>ac5b2556591faaf2c657885c15716fc57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIScenarioManagerForkerAccess</name>
    <filename>classveins_1_1_tra_c_i_scenario_manager_forker_access.html</filename>
    <member kind="function">
      <type>TraCIScenarioManagerForker *</type>
      <name>get</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_forker_access.html</anchorfile>
      <anchor>a09fcc4989a8974c52151a4cb44224520</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIScenarioManagerLaunchd</name>
    <filename>classveins_1_1_tra_c_i_scenario_manager_launchd.html</filename>
    <base>veins::TraCIScenarioManager</base>
    <member kind="function">
      <type></type>
      <name>~TraCIScenarioManagerLaunchd</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_launchd.html</anchorfile>
      <anchor>a598ac4b69cc28eeef8356c3f8b0ac985</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_launchd.html</anchorfile>
      <anchor>afb429edf2aaebebc1895151be0fadbca</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_launchd.html</anchorfile>
      <anchor>a86c86040460c611532239a6f079f6d9b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_traci</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_launchd.html</anchorfile>
      <anchor>a5547124fea3c83e5492a9cdb029948c9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>launchConfig</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_launchd.html</anchorfile>
      <anchor>a559d93c0e1133a8e4268d9931bd7745b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seed</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_launchd.html</anchorfile>
      <anchor>a39d4a4b6d3cbcb1e410f60eb97b85a66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIScenarioManagerLaunchdAccess</name>
    <filename>classveins_1_1_tra_c_i_scenario_manager_launchd_access.html</filename>
    <member kind="function">
      <type>TraCIScenarioManagerLaunchd *</type>
      <name>get</name>
      <anchorfile>classveins_1_1_tra_c_i_scenario_manager_launchd_access.html</anchorfile>
      <anchor>a2b36cce62500f2fa6c11a239df87c7ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIScreenRecorder</name>
    <filename>classveins_1_1_tra_c_i_screen_recorder.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_tra_c_i_screen_recorder.html</anchorfile>
      <anchor>acc53bed9f31ff07229e2af11aaa04870</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classveins_1_1_tra_c_i_screen_recorder.html</anchorfile>
      <anchor>a1f31f2e84760580383d6d5dcae19fa47</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_tra_c_i_screen_recorder.html</anchorfile>
      <anchor>a54200c2f49b95b25b3cdd067b58e4481</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>takeScreenshot</name>
      <anchorfile>classveins_1_1_tra_c_i_screen_recorder.html</anchorfile>
      <anchor>a7c04281f53906dab3daf57a0e6e8ed82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCITrafficLightAbstractLogic</name>
    <filename>classveins_1_1_tra_c_i_traffic_light_abstract_logic.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCITrafficLightAbstractLogic</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_abstract_logic.html</anchorfile>
      <anchor>aceec53566cdeee659bfceef31175d794</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraCITrafficLightAbstractLogic</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_abstract_logic.html</anchorfile>
      <anchor>a0768b1e5f872f552c807f4ee0087f5f4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_abstract_logic.html</anchorfile>
      <anchor>a9871f1c2ff6d4f079c8cd058d8baa7f6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_abstract_logic.html</anchorfile>
      <anchor>a58b0dbca3fdb2e5fc85f4118a4690944</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_abstract_logic.html</anchorfile>
      <anchor>a6dce36ca63205546a946683f27a99efa</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleApplMsg</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_abstract_logic.html</anchorfile>
      <anchor>aaaf540a598b7d374c30a23517b20a043</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleTlIfMsg</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_abstract_logic.html</anchorfile>
      <anchor>a269945dcb0e43fb9f9e8967ee7eeb61c</anchor>
      <arglist>(TraCITrafficLightMessage *tlMsg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handlePossibleSwitch</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_abstract_logic.html</anchorfile>
      <anchor>a31a2445f131d294ba545084e995b8818</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>switchTimer</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_abstract_logic.html</anchorfile>
      <anchor>a5ad52565719dc71001627d68ea771b11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCITrafficLightInterface</name>
    <filename>classveins_1_1_tra_c_i_traffic_light_interface.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCITrafficLightInterface</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>af9d907ad684d48eaaf009ac5a7fab63d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraCITrafficLightInterface</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a1f77091842cc67835f4f13dc7c83ffe0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preInitialize</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a1982aa38012302c8e0175d11ff0feec5</anchor>
      <arglist>(const std::string &amp;external_id, const Coord &amp;position, const simtime_t &amp;updateInterval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalId</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>aef4445819684cb5d7c020548d053330e</anchor>
      <arglist>(const std::string &amp;external_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getExternalId</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>aad39158cbc0e1ab702c7589e321c1719</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCIScenarioManager *</type>
      <name>getManager</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a8611fc2146bcdaf81c20619f6f5bfb16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCICommandInterface *</type>
      <name>getCommandInterface</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a7c5d886c9a2f20ca92294901ed9f8a67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCICommandInterface::Trafficlight *</type>
      <name>getTlCommandInterface</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a9847258e132057e8ded600dd076c8daa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::list&lt; std::list&lt; TraCITrafficLightLink &gt; &gt;</type>
      <name>getControlledLinks</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a118d918705f50d855a1625dd2ec06cba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getPosition</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a4acf641e5b475ee396504cba43dc27a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCITrafficLightProgram::Logic</type>
      <name>getCurrentLogic</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a8129dc298f48be082c042b30a70e3383</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getCurrentLogicId</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>ad811ca1531b41808a3bb65d87d9c2323</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCurrentPhaseId</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a4c3bdfc0f21d1a008b192b364a984bfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCITrafficLightProgram::Phase</type>
      <name>getCurrentPhase</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a5c1b2e812da541d6212ecdfebdab5f34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getAssumedNextSwitch</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>aed34686ef87c312c909e7cdd9192de35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getRemainingDuration</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a506f03d82d7d1af9cb13f71b17febd84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getCurrentState</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a6f10a76eb908bd9e9b203738948e53a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInOnlineSignalState</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a5a078d8b5041f4e5072056e6f7cf52c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProgramDefinition</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a10132851c827649749cece8aec7263d6</anchor>
      <arglist>(const TraCITrafficLightProgram &amp;programDefinition)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setControlledLinks</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a4c8228ed99c41d09dc2649d796b04874</anchor>
      <arglist>(const std::list&lt; std::list&lt; TraCITrafficLightLink &gt;&gt; &amp;controlledLinks)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentLogicById</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a02ae7efc223ff2a4ac1fa74a52e6409e</anchor>
      <arglist>(const std::string &amp;logicId, bool setSumo=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentPhaseByNr</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a44cf7ae2ea56d79cd51017da1c92696f</anchor>
      <arglist>(const unsigned int phaseNr, bool setSumo=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentState</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a56222ccb6427fd3996db5117e0f766b8</anchor>
      <arglist>(const std::string &amp;state, bool setSumo=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextSwitch</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>ada896b2e872d54253ea1f3f24bb8dd63</anchor>
      <arglist>(const simtime_t &amp;newNextSwitch, bool setSumo=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemainingDuration</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a1160a12ff8cd727c6e6077014397b689</anchor>
      <arglist>(const simtime_t &amp;timeTillSwitch, bool setSumo=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a687295ba284dbc1b500e9d830286b591</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a04bf7b95b3007906095ccfddb9d830a8</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleChangeCommandMessage</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a21e6f2a1be4ab8952cd2c2ea4e43d712</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendChangeMsg</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a654311f0959b73350d27c2838bec623c</anchor>
      <arglist>(int changedAttribute, const std::string newValue, const std::string oldValue)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isPreInitialized</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a49a129b8486905cc233a057bca394736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>aa3a495783cf345ae263101180f66608c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIScenarioManager *</type>
      <name>manager</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>aa1aa147a876d52ec036ee4179b89961e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>commandInterface</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a8099dd233f8b9c6fd60c201d925be250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface::Trafficlight *</type>
      <name>tlCommandInterface</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a3d07444119fe75c21976385dbb6d427a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>external_id</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a3ac1acdf795b7d509d6856e0355ac547</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>position</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>aebefab4335a0d604c52dd19003aaacc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCITrafficLightProgram</type>
      <name>programDefinition</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a97ea673efc482c412766a15d73be9ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::list&lt; TraCITrafficLightLink &gt; &gt;</type>
      <name>controlledLinks</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a71f57b0d9a090715fee6fe21cd045082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>currentLogicId</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a95e0a95799323a8b14dacab088e288de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>currentPhaseNr</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a8d371511aa7be0308ba6725cb1b264ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>nextSwitchTime</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a37093a29b5192c248dca6a2299577733</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>currentSignalState</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a720e9f4a95347581264c58a88dbaeac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inOnlineSignalState</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface.html</anchorfile>
      <anchor>a0f3deeeb10e9d35f8f0ad170dd7fe517</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCITrafficLightInterfaceAccess</name>
    <filename>classveins_1_1_tra_c_i_traffic_light_interface_access.html</filename>
    <member kind="function">
      <type>TraCITrafficLightInterface *</type>
      <name>get</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_interface_access.html</anchorfile>
      <anchor>adf1668e60ad100193c3bfb5b2daec586</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::TraCITrafficLightLink</name>
    <filename>structveins_1_1_tra_c_i_traffic_light_link.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>incoming</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_link.html</anchorfile>
      <anchor>a33ed4be184eb9389deb740e47cb159e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>outgoing</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_link.html</anchorfile>
      <anchor>a9ed0ba936dfb5ef3b0a8b052ccbcd83b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>internal</name>
      <anchorfile>structveins_1_1_tra_c_i_traffic_light_link.html</anchorfile>
      <anchor>a65b9ba51a63af15744997e8abe2db46e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCITrafficLightProgram</name>
    <filename>classveins_1_1_tra_c_i_traffic_light_program.html</filename>
    <class kind="struct">veins::TraCITrafficLightProgram::Logic</class>
    <class kind="struct">veins::TraCITrafficLightProgram::Phase</class>
    <member kind="function">
      <type></type>
      <name>TraCITrafficLightProgram</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_program.html</anchorfile>
      <anchor>af285913eda55462a7b08815aac61faf3</anchor>
      <arglist>(std::string id=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLogic</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_program.html</anchorfile>
      <anchor>a3e7dfa9d1383c656ba365741dfc5ffa1</anchor>
      <arglist>(const Logic &amp;logic)</arglist>
    </member>
    <member kind="function">
      <type>TraCITrafficLightProgram::Logic</type>
      <name>getLogic</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_program.html</anchorfile>
      <anchor>a6f38d0a06779aac269572bba80901079</anchor>
      <arglist>(const std::string &amp;lid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLogic</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_program.html</anchorfile>
      <anchor>a50b776761eaae30242297c0fe16bbee6</anchor>
      <arglist>(const std::string &amp;lid) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>id</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_program.html</anchorfile>
      <anchor>a89db9248d11e4cc2a88fa52e8d7b45e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, TraCITrafficLightProgram::Logic &gt;</type>
      <name>logics</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_program.html</anchorfile>
      <anchor>aa7eb2f5a0082e20cbc2d5725a9db529d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCITrafficLightSimpleLogic</name>
    <filename>classveins_1_1_tra_c_i_traffic_light_simple_logic.html</filename>
    <base>veins::TraCITrafficLightAbstractLogic</base>
    <member kind="typedef">
      <type>std::string</type>
      <name>signalScheme</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_simple_logic.html</anchorfile>
      <anchor>a92ac2a9b7c471ace697ae5d0c4d387c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleApplMsg</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_simple_logic.html</anchorfile>
      <anchor>aba38369e0451ca17741f027403a78f3c</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTlIfMsg</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_simple_logic.html</anchorfile>
      <anchor>a11d6e0fc8bff8c680fe06c40e76b0038</anchor>
      <arglist>(TraCITrafficLightMessage *tlMsg) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePossibleSwitch</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_simple_logic.html</anchorfile>
      <anchor>ae9a97ba7e63a428f7b980c758ab52119</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCITrafficLightSimpleLogicAccess</name>
    <filename>classveins_1_1_tra_c_i_traffic_light_simple_logic_access.html</filename>
    <member kind="function">
      <type>TraCITrafficLightSimpleLogic *</type>
      <name>get</name>
      <anchorfile>classveins_1_1_tra_c_i_traffic_light_simple_logic_access.html</anchorfile>
      <anchor>a31d0ed99a73ef065a5d9512da5925544</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCIVehicleInserter</name>
    <filename>classveins_1_1_tra_c_i_vehicle_inserter.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCIVehicleInserter</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>a4997fd506bf3e729f098878207abef7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraCIVehicleInserter</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>ab9af5c18d979194e96de8bbf3cf133e3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>a82090d9f29e4a9e8c7258f443c6c4970</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>a529bd0ef5bcfc0a42b6e88853b1e3b1d</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>acc9e92041955e6319ffbe79599a59726</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>a5edb5dda8d71d2374f4919bcf9d10bce</anchor>
      <arglist>(cComponent *component, simsignal_t signalID) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>ac4d000853fde770438cea7215955f0ba</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receiveSignal</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>a79f76754271168a751ae0275c840176e</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj, cObject *details) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receiveSignal</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>a556643617ac2a26a96baebed9ece0595</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const SimTime &amp;t, cObject *details) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertNewVehicle</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>a5a650650045c4b633ab797df1c4ea5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertVehicles</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>ade9a60eea81690b0dc5ac6803b0c478f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>vehicleRngIndex</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>acb32212c292caec75cf222f5efcd13b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numVehicles</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>adfb8b5593e0360c326122b33fc0a4c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIScenarioManager *</type>
      <name>manager</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>aaf5fe7c5f448c841dec51acac01a1592</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cRNG *</type>
      <name>mobRng</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>a7ab755ea96a67dab98696c1f177c27cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, std::queue&lt; std::string &gt; &gt;</type>
      <name>vehicleInsertQueue</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>a82e2b2aa12c639b13215f16d32cafe4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>queuedVehicles</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>ac86bffc905fa5c2aefb3814640d97e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>routeIds</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>a27ccf273961815a743570112e7ecbf24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>vehicleNameCounter</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>a0c663003a1370681f207a29a41f7f793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>vehicleTypeIds</name>
      <anchorfile>classveins_1_1_tra_c_i_vehicle_inserter.html</anchorfile>
      <anchor>a39bd77b7d1af91eee27f577678f66cb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCICommandInterface::Trafficlight</name>
    <filename>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</filename>
    <member kind="function">
      <type></type>
      <name>Trafficlight</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a4755a8a8beb72a7be870c81c4b30e8f5</anchor>
      <arglist>(TraCICommandInterface *traci, std::string trafficLightId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCurrentState</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a68d154971923ce65475f505d11194572</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getDefaultCurrentPhaseDuration</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>aa7312fbac98cfd6d2929c0ecaaa96c78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getControlledLanes</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a940445f214edfaef293201f644a7809f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::list&lt; TraCITrafficLightLink &gt; &gt;</type>
      <name>getControlledLinks</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a20fabd5d6ea59b96f3cb983f83ab5e16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getCurrentPhaseIndex</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a7f67ace6e2a4be1861233172c0f844c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCurrentProgramID</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a2be8360f3674d1da474bbb3d2f510e78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TraCITrafficLightProgram</type>
      <name>getProgramDefinition</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a78c7adc5c1214c0ae5c2490ba48bb7ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getAssumedNextSwitchTime</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a9f9be2433847af1116b9a282eb2e2659</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProgram</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a768a9e37549d8310a2babd9f4acfe253</anchor>
      <arglist>(std::string program)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhaseIndex</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a8a5741253182df0e722ccea5d35da143</anchor>
      <arglist>(int32_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a1e4f21fc7ceea26318f434152efa8de3</anchor>
      <arglist>(std::string state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhaseDuration</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a3827a3ce907ba8581bca8e87641940c3</anchor>
      <arglist>(simtime_t duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProgramDefinition</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a0bd49e647303f6e6098ea8ddace83a2e</anchor>
      <arglist>(TraCITrafficLightProgram::Logic program, int32_t programNr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>aa26fe47ca56f220d6e79f7072aaff082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>a8fe7f6f52516dc730fbafa9d69109a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>trafficLightId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_trafficlight.html</anchorfile>
      <anchor>ab8c0f5dde7517931624afe2fed90dcec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TwoRayInterferenceModel</name>
    <filename>classveins_1_1_two_ray_interference_model.html</filename>
    <base>veins::AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>TwoRayInterferenceModel</name>
      <anchorfile>classveins_1_1_two_ray_interference_model.html</anchorfile>
      <anchor>a3bfc6c452bfccd37e2263ba90b06cc65</anchor>
      <arglist>(cComponent *owner, double dielectricConstant)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoRayInterferenceModel</name>
      <anchorfile>classveins_1_1_two_ray_interference_model.html</anchorfile>
      <anchor>a4327b6a2e881997c712739923dbb294b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterSignal</name>
      <anchorfile>classveins_1_1_two_ray_interference_model.html</anchorfile>
      <anchor>a4c322a29e4987d2021bee9234a0ad0b9</anchor>
      <arglist>(Signal *signal) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>epsilon_r</name>
      <anchorfile>classveins_1_1_two_ray_interference_model.html</anchorfile>
      <anchor>a47853bcfa4f3eb715d950146cb4038ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::TraCICommandInterface::Vehicle</name>
    <filename>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</filename>
    <member kind="function">
      <type></type>
      <name>Vehicle</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a912b048710decb43dac5cdc132489c3d</anchor>
      <arglist>(TraCICommandInterface *traci, std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeedMode</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>abb86fc986f3f2a7c48954aed90c61797</anchor>
      <arglist>(int32_t bitset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a1b192191c6d63935c3fecbb02c8e7adb</anchor>
      <arglist>(double speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>ac0b794bbedbd83c66ec82bdfad25c106</anchor>
      <arglist>(double speed)</arglist>
    </member>
    <member kind="function">
      <type>TraCIColor</type>
      <name>getColor</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a4712aa46a29d0cbf598fd594956f5bb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a3ebaa43d799efaf8c0272024a30fd404</anchor>
      <arglist>(const TraCIColor &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>slowDown</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a801e74420132d1d8535e5c7072e400b7</anchor>
      <arglist>(double speed, simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newRoute</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a8c50fda5efda9bc379ef86573bd3bd50</anchor>
      <arglist>(std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParking</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a5dab3648e41254614d22dedbe88588f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRoadId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a1983ab1972267459250e7ceb7a0269cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLaneId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a3f4ca8ca2f69b149e8d0c705386cd8ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxSpeed</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>aea68da3c1ebfaae72c32e4813b8d2a8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLanePosition</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>ab41dda38cee7a0ac59acb2d0e2d20079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getPlannedRoadIds</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a6e23227bb46bd7f9e0434ded33dd87f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRouteId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>af9de7b68fd470606ec0c0fe5152639ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeRoute</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a20cdfcef89ebb3d4609e42d64c4c3a66</anchor>
      <arglist>(std::string roadId, simtime_t travelTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopAt</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a73ee92ee98196feb6dfc8e7e1249503c</anchor>
      <arglist>(std::string roadId, double pos, uint8_t laneid, double radius, simtime_t waittime)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getLaneIndex</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a4be8f7c75bf5031e6ea79b1f16f90991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTypeId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a2ba892fbcf7348a3fdba9d2ca6219778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeVehicleRoute</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a21e9c36ca8383916392d392f31d39ea2</anchor>
      <arglist>(const std::list&lt; std::string &gt; &amp;roads)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLength</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a11f532a61632969163da1ee74eaf3644</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWidth</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>aea1fdcadcc0227a6ae98f3e04f53219f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getHeight</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a7c5cec00d0b168534f143f307673a0f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAccel</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a001e9bc5a5d488ded8b2d2d00d594ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDeccel</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>aa153668dc9ee8d87ad73b55840c42aa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>aacb62beca8930605925bc2d621b9d92d</anchor>
      <arglist>(const std::string &amp;parameter, int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>add95a8906537bbd3bb00fc3c08c32b45</anchor>
      <arglist>(const std::string &amp;parameter, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a88d5b550f61de6778e5c678a27326915</anchor>
      <arglist>(const std::string &amp;parameter, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParameter</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a15b65fcf721163c67249a423fefb493d</anchor>
      <arglist>(const std::string &amp;parameter, int &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParameter</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>ade1ebc238d075bedd110423052b2b61b</anchor>
      <arglist>(const std::string &amp;parameter, double &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParameter</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a7271d6d0865ab0cec3d7c533e0ca4ed1</anchor>
      <arglist>(const std::string &amp;parameter, std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getVType</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a5f22cbb7c98290cb9fe46ff81ff4d325</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCO2Emissions</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a65145117943f0c797eccef9916155cf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCOEmissions</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a8d5bc46f9ac7d148f26b6bf1b2bd5586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getHCEmissions</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a4abf82616983e86e38935053441461b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPMxEmissions</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a42f668e72d574427aa32c16c61a5a6b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNOxEmissions</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>ab0e0c2fe8a4aec1b5e1b3065bb435dae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFuelConsumption</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>adde2a550b99f31ffaa80ad2328631a30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNoiseEmission</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a62e2774b5f6cab96a3b970ad88758912</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getElectricityConsumption</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>af0a4d6fab647ec450d31592d335c1f72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWaitingTime</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>aaf04600aa5ddf116ef1fe657f14012ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAccumulatedWaitingTime</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>a4dc89f6fa2e651bd49b48e3cf18cc774</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>ab31ac6c87648f4533df6fdc2e7297a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>af514e8ded5cf193881ecb976d33a7a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>nodeId</name>
      <anchorfile>classveins_1_1_tra_c_i_command_interface_1_1_vehicle.html</anchorfile>
      <anchor>ab50259c419ca65c4f60a8f514da48e70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::VehicleObstacleControl</name>
    <filename>classveins_1_1_vehicle_obstacle_control.html</filename>
    <member kind="function">
      <type></type>
      <name>~VehicleObstacleControl</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>aa1ad423946f64337ebb31fd92300093f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>a1083ae0d4c821658c2d6c6140c33f28f</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>a8633437ef7d45232342f9b48b1991ed2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>af30277875d1e23ec943ce468f663f29d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>a22ff3d8315dc73283f638dd474f5db26</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>a1827b69dde1b00dc98bfe14c935ced0c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>const MobileHostObstacle *</type>
      <name>add</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>a351c4c46ca9a2e994f6be6405273b2be</anchor>
      <arglist>(MobileHostObstacle obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>a10824f43b0e015c6e68a9292113ea3ff</anchor>
      <arglist>(const MobileHostObstacle *obstacle)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; double, double &gt; &gt;</type>
      <name>getPotentialObstacles</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>acbf5a8114d47f9d0708c93a9c788dd47</anchor>
      <arglist>(const AntennaPosition &amp;senderPos, const AntennaPosition &amp;receiverPos, const Signal &amp;s) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal</type>
      <name>getVehicleAttenuationSingle</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>aba9a4a4986cd0141c6bd5404069f9460</anchor>
      <arglist>(double h1, double h2, double h, double d, double d1, Signal attenuationPrototype)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal</type>
      <name>getVehicleAttenuationDZ</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>adf2407d9dcb0830d99775342e3304f15</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, double &gt;&gt; &amp;dz_vec, Signal attenuationPrototype)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; MobileHostObstacle * &gt;</type>
      <name>VehicleObstacles</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>a4b126868b2476ed355472aa75440a361</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drawVehicleObstacles</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>a35472d1c0051dbf451f1dd30ac2c708f</anchor>
      <arglist>(const simtime_t &amp;t) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>af45586edf8cc85fedd4a6adb24b14119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VehicleObstacles</type>
      <name>vehicleObstacles</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>a459e41da8944a5c426a8f196350b4987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager::Group *</type>
      <name>vehicleAnnotationGroup</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control.html</anchorfile>
      <anchor>ad976d6df407821e93e383e73de6fda3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::VehicleObstacleControlAccess</name>
    <filename>classveins_1_1_vehicle_obstacle_control_access.html</filename>
    <member kind="function">
      <type></type>
      <name>VehicleObstacleControlAccess</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control_access.html</anchorfile>
      <anchor>a5ffc62a46d5ca7ebeabba9236e928f31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VehicleObstacleControl *</type>
      <name>getIfExists</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_control_access.html</anchorfile>
      <anchor>a2a1d5694c1098854d78e763bfc6e5cdc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>veins::VehicleObstacleShadowing</name>
    <filename>classveins_1_1_vehicle_obstacle_shadowing.html</filename>
    <base>veins::AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>VehicleObstacleShadowing</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_shadowing.html</anchorfile>
      <anchor>a3f1f7416e25c8c2c7d812851cc52cd19</anchor>
      <arglist>(cComponent *owner, VehicleObstacleControl &amp;vehicleObstacleControl, bool useTorus, const Coord &amp;playgroundSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterSignal</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_shadowing.html</anchorfile>
      <anchor>aa1a8069440240b74a7a8ea0c91b06116</anchor>
      <arglist>(Signal *signal) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neverIncreasesPower</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_shadowing.html</anchorfile>
      <anchor>a0f90a4062b7d86bffa04a379e0e6b2c3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VehicleObstacleControl &amp;</type>
      <name>vehicleObstacleControl</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_shadowing.html</anchorfile>
      <anchor>a36670e561287de8fb5471ec357891a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>useTorus</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_shadowing.html</anchorfile>
      <anchor>ad1e04564339908c2868e097b5b7c6d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord &amp;</type>
      <name>playgroundSize</name>
      <anchorfile>classveins_1_1_vehicle_obstacle_shadowing.html</anchorfile>
      <anchor>a525e834fc04bb40c88d9606662850e14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>veins::TraCICommandInterface::VersionConfig</name>
    <filename>structveins_1_1_tra_c_i_command_interface_1_1_version_config.html</filename>
    <member kind="variable">
      <type>unsigned</type>
      <name>version</name>
      <anchorfile>structveins_1_1_tra_c_i_command_interface_1_1_version_config.html</anchorfile>
      <anchor>a7f59c2321f308f31ff9e9b9ff1005078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>timeType</name>
      <anchorfile>structveins_1_1_tra_c_i_command_interface_1_1_version_config.html</anchorfile>
      <anchor>a303d6f877b3340adf30b189c905e1574</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>netBoundaryType</name>
      <anchorfile>structveins_1_1_tra_c_i_command_interface_1_1_version_config.html</anchorfile>
      <anchor>ac7999ada0eefadf7b6c0aa2752ab36ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>timeStepCmd</name>
      <anchorfile>structveins_1_1_tra_c_i_command_interface_1_1_version_config.html</anchorfile>
      <anchor>a5dba0063ddccfa3f6bca8fb29849dcf2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{AnnotationManager.cc}</name>
    <filename>namespaceanonymous__namespace_02_annotation_manager_8cc_03.html</filename>
    <member kind="variable">
      <type>const short</type>
      <name>EVT_SCHEDULED_ERASE</name>
      <anchorfile>namespaceanonymous__namespace_02_annotation_manager_8cc_03.html</anchorfile>
      <anchor>aad339c1ed9a3ef9a85238e16e2b920ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{BaseConnectionManager.cc}</name>
    <filename>namespaceanonymous__namespace_02_base_connection_manager_8cc_03.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dist</name>
      <anchorfile>namespaceanonymous__namespace_02_base_connection_manager_8cc_03.html</anchorfile>
      <anchor>a03d2870486bee7d8198d066f67d00e04</anchor>
      <arglist>(double coord1, double coord2, double size)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrTorusDist</name>
      <anchorfile>namespaceanonymous__namespace_02_base_connection_manager_8cc_03.html</anchorfile>
      <anchor>a4c7285eb31fa2914adffc7da4255b6d2</anchor>
      <arglist>(Coord c, Coord b, Coord size)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{BaseMobility.cc}</name>
    <filename>namespaceanonymous__namespace_02_base_mobility_8cc_03.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isInBoundary</name>
      <anchorfile>namespaceanonymous__namespace_02_base_mobility_8cc_03.html</anchorfile>
      <anchor>a63cc37de263c8dbba9a763b23359862d</anchor>
      <arglist>(Coord c, Coord lowerBound, Coord upperBound)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{BBoxLookup.cc}</name>
    <filename>namespaceanonymous__namespace_02_b_box_lookup_8cc_03.html</filename>
    <class kind="struct">anonymous_namespace{BBoxLookup.cc}::Ray</class>
    <member kind="typedef">
      <type>veins::BBoxLookup::Point</type>
      <name>Point</name>
      <anchorfile>namespaceanonymous__namespace_02_b_box_lookup_8cc_03.html</anchorfile>
      <anchor>ab44832c5578a22ebf7b2a19694405cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>veins::BBoxLookup::Box</type>
      <name>Box</name>
      <anchorfile>namespaceanonymous__namespace_02_b_box_lookup_8cc_03.html</anchorfile>
      <anchor>a7fdc32ad591b5c3137e1208ee806f466</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Ray</type>
      <name>makeRay</name>
      <anchorfile>namespaceanonymous__namespace_02_b_box_lookup_8cc_03.html</anchorfile>
      <anchor>a511746fffff7fb590b4d01d923189b03</anchor>
      <arglist>(const Point &amp;sender, const Point &amp;receiver)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>namespaceanonymous__namespace_02_b_box_lookup_8cc_03.html</anchorfile>
      <anchor>ad29edbecc2bba7cf9afb525f0aff0f25</anchor>
      <arglist>(const Ray &amp;ray, const Box &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{Coord.cc}</name>
    <filename>namespaceanonymous__namespace_02_coord_8cc_03.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dist</name>
      <anchorfile>namespaceanonymous__namespace_02_coord_8cc_03.html</anchorfile>
      <anchor>a8c0f9656a5c33ea4cd7240eb430fc1d6</anchor>
      <arglist>(double coord1, double coord2, double size)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{MobileHostObstacle.cc}</name>
    <filename>namespaceanonymous__namespace_02_mobile_host_obstacle_8cc_03.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isPointInObstacle</name>
      <anchorfile>namespaceanonymous__namespace_02_mobile_host_obstacle_8cc_03.html</anchorfile>
      <anchor>a4905f71256d96d9b1781ab9b31ec2a9e</anchor>
      <arglist>(Coord point, const MobileHostObstacle::Coords &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>segmentsIntersectAt</name>
      <anchorfile>namespaceanonymous__namespace_02_mobile_host_obstacle_8cc_03.html</anchorfile>
      <anchor>a5d7ee91cc8c7d960c2adaf8c6c773604</anchor>
      <arglist>(Coord p1From, Coord p1To, Coord p2From, Coord p2To)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{NetwToMacControlInfo.cc}</name>
    <filename>namespaceanonymous__namespace_02_netw_to_mac_control_info_8cc_03.html</filename>
    <member kind="typedef">
      <type>NetwToMacControlInfo</type>
      <name>tNetwToMacControlInfoBase</name>
      <anchorfile>namespaceanonymous__namespace_02_netw_to_mac_control_info_8cc_03.html</anchorfile>
      <anchor>a6a3ed43948eaeb9fd5b5b1e9ed5bed9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{Obstacle.cc}</name>
    <filename>namespaceanonymous__namespace_02_obstacle_8cc_03.html</filename>
    <member kind="function">
      <type>double</type>
      <name>segmentsIntersectAt</name>
      <anchorfile>namespaceanonymous__namespace_02_obstacle_8cc_03.html</anchorfile>
      <anchor>a46da0e8b4beb911bde581d7997d7312c</anchor>
      <arglist>(const Coord &amp;p1From, const Coord &amp;p1To, const Coord &amp;p2From, const Coord &amp;p2To)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{ObstacleControl.cc}</name>
    <filename>namespaceanonymous__namespace_02_obstacle_control_8cc_03.html</filename>
    <member kind="function">
      <type>veins::BBoxLookup</type>
      <name>rebuildBBoxLookup</name>
      <anchorfile>namespaceanonymous__namespace_02_obstacle_control_8cc_03.html</anchorfile>
      <anchor>a622c9a0b0c5d14fbd42f7d5bcba982cb</anchor>
      <arglist>(const std::vector&lt; std::unique_ptr&lt; veins::Obstacle &gt;&gt; &amp;obstacleOwner, int gridCellSize=250)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{TraCIMobility.cc}</name>
    <filename>namespaceanonymous__namespace_02_tra_c_i_mobility_8cc_03.html</filename>
    <member kind="variable">
      <type>const double</type>
      <name>MY_INFINITY</name>
      <anchorfile>namespaceanonymous__namespace_02_tra_c_i_mobility_8cc_03.html</anchorfile>
      <anchor>a2460ad95761f590f8bfdc2fb72d73e57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{TraCIScenarioManager.cc}</name>
    <filename>namespaceanonymous__namespace_02_tra_c_i_scenario_manager_8cc_03.html</filename>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getMapping</name>
      <anchorfile>namespaceanonymous__namespace_02_tra_c_i_scenario_manager_8cc_03.html</anchorfile>
      <anchor>aee10972a597261c51d4978b2e596294a</anchor>
      <arglist>(std::string el)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{TraCIScenarioManagerForker.cc}</name>
    <filename>namespaceanonymous__namespace_02_tra_c_i_scenario_manager_forker_8cc_03.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>replace</name>
      <anchorfile>namespaceanonymous__namespace_02_tra_c_i_scenario_manager_forker_8cc_03.html</anchorfile>
      <anchor>ab1f88e93928abbf9d1734e6c330da1e9</anchor>
      <arglist>(std::string haystack, std::string needle, T newValue)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>omnetpp</name>
    <filename>namespaceomnetpp.html</filename>
  </compound>
  <compound kind="namespace">
    <name>veins</name>
    <filename>namespaceveins.html</filename>
    <namespace>veins::math</namespace>
    <namespace>veins::SignalUtils</namespace>
    <namespace>veins::TraCIConstants</namespace>
    <class kind="class">veins::AccessModuleWrap</class>
    <class kind="class">veins::AddressingInterface</class>
    <class kind="class">veins::AnalogueModel</class>
    <class kind="class">veins::AnnotationDummy</class>
    <class kind="class">veins::AnnotationManager</class>
    <class kind="class">veins::AnnotationManagerAccess</class>
    <class kind="class">veins::Antenna</class>
    <class kind="class">veins::AntennaPosition</class>
    <class kind="class">veins::BaseApplLayer</class>
    <class kind="class">veins::BaseBattery</class>
    <class kind="class">veins::BaseConnectionManager</class>
    <class kind="class">veins::BaseDecider</class>
    <class kind="class">veins::BaseLayer</class>
    <class kind="class">veins::BaseMacLayer</class>
    <class kind="class">veins::BaseMobility</class>
    <class kind="class">veins::BaseModule</class>
    <class kind="class">veins::BasePhyLayer</class>
    <class kind="class">veins::BaseWorldUtility</class>
    <class kind="class">veins::BatteryAccess</class>
    <class kind="class">veins::BBoxLookup</class>
    <class kind="class">veins::BreakpointPathlossModel</class>
    <class kind="class">veins::ChannelAccess</class>
    <class kind="class">veins::ChannelInfo</class>
    <class kind="class">veins::ConnectionManager</class>
    <class kind="class">veins::Coord</class>
    <class kind="class">veins::Decider</class>
    <class kind="class">veins::Decider80211p</class>
    <class kind="class">veins::Decider80211pToPhy80211pInterface</class>
    <class kind="class">veins::DeciderResult</class>
    <class kind="class">veins::DeciderResult80211</class>
    <class kind="class">veins::DeciderToPhyInterface</class>
    <class kind="class">veins::DemoBaseApplLayer</class>
    <class kind="class">veins::DemoBaseApplLayerToMac1609_4Interface</class>
    <class kind="class">veins::DrawAmount</class>
    <class kind="class">veins::EnumBitset</class>
    <class kind="struct">veins::EnumTraits&lt; VehicleSignal &gt;</class>
    <class kind="class">veins::FindModule</class>
    <class kind="class">veins::FWMath</class>
    <class kind="class">veins::HasLogProxy</class>
    <class kind="class">veins::Heading</class>
    <class kind="class">veins::HostState</class>
    <class kind="class">veins::LAddress</class>
    <class kind="class">veins::LinearMobility</class>
    <class kind="class">veins::Mac1609_4</class>
    <class kind="class">veins::Mac80211pToPhy11pInterface</class>
    <class kind="class">veins::MacToNetwControlInfo</class>
    <class kind="struct">veins::MacToPhyControlInfo11p</class>
    <class kind="class">veins::MacToPhyInterface</class>
    <class kind="class">veins::MobileHostObstacle</class>
    <class kind="class">veins::Move</class>
    <class kind="class">veins::MyVeinsApp</class>
    <class kind="class">veins::NakagamiFading</class>
    <class kind="class">veins::NetwToMacControlInfo</class>
    <class kind="class">veins::NicEntry</class>
    <class kind="class">veins::NicEntryDebug</class>
    <class kind="class">veins::NicEntryDirect</class>
    <class kind="class">veins::NistErrorRate</class>
    <class kind="class">veins::Obstacle</class>
    <class kind="class">veins::ObstacleControl</class>
    <class kind="class">veins::ObstacleControlAccess</class>
    <class kind="class">veins::ParBuffer</class>
    <class kind="class">veins::PassedMessage</class>
    <class kind="class">veins::PERModel</class>
    <class kind="class">veins::PhyLayer80211p</class>
    <class kind="class">veins::PhyToMacControlInfo</class>
    <class kind="class">veins::POA</class>
    <class kind="class">veins::Radio</class>
    <class kind="class">veins::SampledAntenna1D</class>
    <class kind="class">veins::Signal</class>
    <class kind="class">veins::SignalCallbackListener</class>
    <class kind="class">veins::SignalManager</class>
    <class kind="struct">veins::SignalPayload</class>
    <class kind="class">veins::SimpleObstacleShadowing</class>
    <class kind="class">veins::SimplePathlossModel</class>
    <class kind="class">veins::Spectrum</class>
    <class kind="class">veins::TimerManager</class>
    <class kind="struct">veins::TimerMessage</class>
    <class kind="struct">veins::TimerSpecification</class>
    <class kind="struct">veins::traci2omnet_functor</class>
    <class kind="class">veins::TraCIBuffer</class>
    <class kind="class">veins::TraCIColor</class>
    <class kind="class">veins::TraCICommandInterface</class>
    <class kind="class">veins::TraCIConnection</class>
    <class kind="struct">veins::TraCICoord</class>
    <class kind="class">veins::TraCICoordinateTransformation</class>
    <class kind="class">veins::TraCIDemo11p</class>
    <class kind="class">veins::TraCIDemoRSU11p</class>
    <class kind="class">veins::TraCILauncher</class>
    <class kind="class">veins::TraCIMobility</class>
    <class kind="class">veins::TraCIMobilityAccess</class>
    <class kind="class">veins::TraCIRegionOfInterest</class>
    <class kind="class">veins::TraCIScenarioManager</class>
    <class kind="class">veins::TraCIScenarioManagerAccess</class>
    <class kind="class">veins::TraCIScenarioManagerForker</class>
    <class kind="class">veins::TraCIScenarioManagerForkerAccess</class>
    <class kind="class">veins::TraCIScenarioManagerLaunchd</class>
    <class kind="class">veins::TraCIScenarioManagerLaunchdAccess</class>
    <class kind="class">veins::TraCIScreenRecorder</class>
    <class kind="class">veins::TraCITrafficLightAbstractLogic</class>
    <class kind="class">veins::TraCITrafficLightInterface</class>
    <class kind="class">veins::TraCITrafficLightInterfaceAccess</class>
    <class kind="struct">veins::TraCITrafficLightLink</class>
    <class kind="class">veins::TraCITrafficLightProgram</class>
    <class kind="class">veins::TraCITrafficLightSimpleLogic</class>
    <class kind="class">veins::TraCITrafficLightSimpleLogicAccess</class>
    <class kind="class">veins::TraCIVehicleInserter</class>
    <class kind="class">veins::TwoRayInterferenceModel</class>
    <class kind="class">veins::VehicleObstacleControl</class>
    <class kind="class">veins::VehicleObstacleControlAccess</class>
    <class kind="class">veins::VehicleObstacleShadowing</class>
    <member kind="typedef">
      <type>AccessModuleWrap&lt; BaseMobility &gt;</type>
      <name>ChannelMobilityAccessType</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa8c17c8b65bcd5ce004cdfc957cf2d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ChannelMobilityAccessType::wrapType *</type>
      <name>ChannelMobilityPtrType</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aab6dc29dc16d0393e914dc30ddbbb5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::unique_ptr&lt; AnalogueModel &gt; &gt;</type>
      <name>AnalogueModelList</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a964364ce7398400296a90e748346ac78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraCICoordinateTransformation::OmnetCoord</type>
      <name>OmnetCoord</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a2bf3c811568782b8e09332f929be278d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraCICoordinateTransformation::OmnetCoordList</type>
      <name>OmnetCoordList</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a83a9df14be621e16218eca6ba1a6ec2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraCICoordinateTransformation::TraCICoordList</type>
      <name>TraCICoordList</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a8038130a97935e742fac799330b84c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraCICoordinateTransformation::OmnetHeading</type>
      <name>OmnetHeading</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ac2179e548f812de4b81b0040ef0d33f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraCICoordinateTransformation::TraCIHeading</type>
      <name>TraCIHeading</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a4ac0d5fc836cf7b6d5ad47aea35cc6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EnumBitset&lt; VehicleSignal &gt;</type>
      <name>VehicleSignalSet</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a93b519d305586018b3e235bde088e6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VehicleSignal</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a3646bbff248e309c6bf314c1c105166f</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa159cf822c52983226f035885a219ec22">blinker_right</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fafc6b63264388abbf3a6d3d0757a53b16">blinker_left</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fafe805ede71bf740a4d4f448e9c6ddba8">blinker_emergency</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa1a9f113e4ae235f61db27efc25403f85">brakelight</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa44aabd6568e2b2fa5c3e279096303261">frontlight</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa757ffdaa87a487b7cdb1f7d231435720">foglight</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa7e9791a80f6356966b5f4baaec74b425">highbeam</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa15a6647e6aacae388a44be2a8df170c1">backdrive</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa07a8e724484fb94f28e6f4823bd36cdb">wiper</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166faed71a12e31aaf2ca49e54e15168991c4">door_open_left</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa7ef4f0d1dcece28de7b1dc96db4b6dfd">door_open_right</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166faf8e33cf2711b4b11ece6db4363d63ffe">emergency_blue</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fadab7b3f81a59a5796c4f5d11f863887f">emergency_red</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fae8eee9bcc56abe72a1f67de2f19d4fa1">emergency_yellow</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a3646bbff248e309c6bf314c1c105166fa5e543256c480ac577d30f76f9120eb74">undefined</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Channel</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a241b63592930794cb29608c80e737b1c</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1cab7c11fd60722f49eacf6edfe440abe8a">crit_sol</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1cabe2b832062b96b611d69ca99cb257938">sch1</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1ca60531a06d9e5763e9a0f98da418f4009">sch2</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1ca64f5e67ed2b90b1bb9084c7e755bbd7b">cch</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1cab66e16a1079dc327d9771f9c94430dc4">sch3</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1caadbb78a568f709399bf51b5b56524ef6">sch4</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a241b63592930794cb29608c80e737b1ca7a8caced55cdc0ec9e96cd0af2a9ae17">hpps</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ChannelType</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a04ab2e3513c72a990fe9f96ae42d9e9a</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceveins.html" anchor="a04ab2e3513c72a990fe9f96ae42d9e9aafc5364bf9dbfa34954526becad136d4b">control</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a04ab2e3513c72a990fe9f96ae42d9e9aaaaabf0d39951f3e6c3e8a7911df524c2">service</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MCS</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a0f6515c4d41d47795a037fd662d6b317</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317a5e543256c480ac577d30f76f9120eb74">undefined</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317a91739f1f7ee1f870d3288d72255833e1">ofdm_bpsk_r_1_2</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317a0a709e5c381aaca2ecff5ecb1baf7b08">ofdm_bpsk_r_3_4</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317ae8dd44a070977ab68651bd49afdd7aeb">ofdm_qpsk_r_1_2</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317a5f9d64ab4822c900ee71e08140f2e0d8">ofdm_qpsk_r_3_4</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317a59b5c09e00c8579440accd91f27003a7">ofdm_qam16_r_1_2</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317aaf66c500a925bbbdb1d69f8953a67a5a">ofdm_qam16_r_3_4</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317abad975a6a211a4f29e592091d4ef6f07">ofdm_qam64_r_2_3</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a0f6515c4d41d47795a037fd662d6b317abf6ab9dd51d59ae94ee0626ebdff6d97">ofdm_qam64_r_3_4</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Bandwidth</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a5f8caa3707df632bbf563c8c30e1314b</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceveins.html" anchor="a5f8caa3707df632bbf563c8c30e1314ba03a13d1e6d29b1512625fc7474f726f2">ofdm_5_mhz</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a5f8caa3707df632bbf563c8c30e1314ba41ca49365a43716b4878539e9f3517e9">ofdm_10_mhz</enumvalue>
      <enumvalue file="namespaceveins.html" anchor="a5f8caa3707df632bbf563c8c30e1314baad77370707687075dfe34be031a10fd6">ofdm_20_mhz</enumvalue>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a7e340a38decf7a51e8d1e3c3f70a68e6</anchor>
      <arglist>(std::ostream &amp;os, const Signal &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>calculateStart</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa3e1a164dfa10df737a132165e84432a</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a3a7c8c80c7dc9491c5e9d191a4d763b5</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Spectrum::Frequencies</type>
      <name>normalizeFrequencies</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ae317931ac12e25d2ecde34956f44c4ae</anchor>
      <arglist>(Spectrum::Frequencies freqs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a8d872d1d10d2ca42893c7ebe42cb3cc9</anchor>
      <arglist>(const Spectrum &amp;lhs, const Spectrum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a791e077e5b62c35a7165b9bcd7936614</anchor>
      <arglist>(std::ostream &amp;os, const Spectrum &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a0507aeea0384286a65df2962a103cfe9</anchor>
      <arglist>(std::ostream &amp;os, const Coord &amp;coord)</arglist>
    </member>
    <member kind="function">
      <type>EnumBitset&lt; T &gt;</type>
      <name>operator|</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a5251a4eef8dcd90ca81fd5b2625efd03</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T * &gt;</type>
      <name>getSubmodulesOfType</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>adf0e051fbdc2b88943cc638233f294ed</anchor>
      <arglist>(cModule *parentModule, bool recurse=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a1050fafc7711c48b53398e360ee1d269</anchor>
      <arglist>(std::ostream &amp;os, const Heading &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>bool VEINS_API</type>
      <name>isBigEndian</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>af50368edf283a729c6096472ee299637</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SOCKET</type>
      <name>socket</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a3e04988b53f0d0109602feb7895b4302</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>makeTraCICommand</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>af83b40d9114af922837b09398bc72005</anchor>
      <arglist>(uint8_t commandId, const TraCIBuffer &amp;buf=TraCIBuffer())</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getOfdmDatarate</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aac9251bf5836e3baa0adc984b3b4c783</anchor>
      <arglist>(MCS mcs, Bandwidth bw)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getNDBPS</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>acec18387f16de0bbed065607cb14f06a</anchor>
      <arglist>(MCS mcs)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getBandwidth</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa3595ed01bd33cecc0340d59c09e1ddd</anchor>
      <arglist>(Bandwidth bw)</arglist>
    </member>
    <member kind="function">
      <type>MCS</type>
      <name>getMCS</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a577339f223a802a547b44f9c27e0be8e</anchor>
      <arglist>(uint64_t datarate, Bandwidth bw)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>make_unique</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ab5ffaae0bbd1bb2eaab79788f3f45e03</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>abfc8946a04d32fb7d773e27cb81cf45f</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa878425a67810aa3f92068492a830b1b</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a95c45cac4b55a107962c8f1ad8c1e0c2</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a9aa18dbb2878124cbde5abec194dfd56</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a88f5eccdc9513521e70360a3dc66b05d</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>af272fb0f5a0e72642aa28c3585a19baa</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa8da0295acc06cfa17211dcef1b1f230</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a2925dc1d85c4d16a36736a5814a33034</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a04e5a424cea401ce029fe7431fcb59bf</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a0ee10fd2f82b3bf5672280a0aac92685</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a714e9dc581a597615c021bca6790ac93</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ae7f554dbeb2ee9119727b3f27d680c65</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>struct VEINS_API</type>
      <name>EnumTraits</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ade9045b9fa02a0e95c3fd874a96136cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64_t</type>
      <name>NUM_BITRATES_80211P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a891bdb709cc16d87998853bcee0cec3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64_t</type>
      <name>BITRATES_80211P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aaac445f2f574322887547cad4ec737c1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>N_DBPS_80211P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa2a238b855fa8d5aa97fdd8c2827d184</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>T_SYM_80211P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a86b5c305096431684a4583731c5ec96e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HDR_SERVICE_LENGTH</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ac46b6433ddbb13ec7e54e2dc6532bac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_TAIL_LENGTH</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a7db46f88d57cb2e65114df4ae3180648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PHY_HDR_PREAMBLE_DURATION</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a38ddacfad66b1cac4c9db643da8ec782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PHY_HDR_PLCPSIGNAL_DURATION</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a5070037c3985567bcda6a6a76f1d90c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HDR_PLCPSIGNAL_LENGTH</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>add3c22000991a0233c797a05382ea15f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64_t</type>
      <name>PHY_HDR_BITRATE</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a15dfb8b4e82c5039656158486b5f8aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>SLOTLENGTH_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a087b3a7363b908a1b56441d38ecd5d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>SIFS_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aaed093038c32269e153a1aece3ddd298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>RADIODELAY_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a15ffd08551ff488691e5af663f31c278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>CWMIN_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa96c2c22b02761022917168562433bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>CWMAX_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a2b8d2c8d761f95f373b9134214d630a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>SWITCHING_INTERVAL_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a7bbd290f309e944c0dea15aa0bc9aeb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>GUARD_INTERVAL_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a6c7096da6df660d80aa94bbf3b238ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Bandwidth</type>
      <name>BANDWIDTH_11P</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aff301ed290e2541f8be9ff668c04a321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::map&lt; Channel, double &gt;</type>
      <name>IEEE80211ChannelFrequencies</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a331eb6e8b805e13285fd08b8ed1164d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>abfc8946a04d32fb7d773e27cb81cf45f</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa878425a67810aa3f92068492a830b1b</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator+</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a95c45cac4b55a107962c8f1ad8c1e0c2</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a9aa18dbb2878124cbde5abec194dfd56</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a88f5eccdc9513521e70360a3dc66b05d</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator-</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>af272fb0f5a0e72642aa28c3585a19baa</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>aa8da0295acc06cfa17211dcef1b1f230</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a2925dc1d85c4d16a36736a5814a33034</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator*</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a04e5a424cea401ce029fe7431fcb59bf</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a0ee10fd2f82b3bf5672280a0aac92685</anchor>
      <arglist>(const Signal &amp;lhs, const Signal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>a714e9dc581a597615c021bca6790ac93</anchor>
      <arglist>(const Signal &amp;lhs, double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Signal</type>
      <name>operator/</name>
      <anchorfile>namespaceveins.html</anchorfile>
      <anchor>ae7f554dbeb2ee9119727b3f27d680c65</anchor>
      <arglist>(double lhs, const Signal &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>veins::math</name>
    <filename>namespaceveins_1_1math.html</filename>
    <member kind="function">
      <type>std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, bool &gt;::type</type>
      <name>almost_equal</name>
      <anchorfile>namespaceveins_1_1math.html</anchorfile>
      <anchor>a8e7bde81401ddc00bf062333bf217491</anchor>
      <arglist>(T x, T y, int ulp=1)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>veins::SignalUtils</name>
    <filename>namespaceveins_1_1_signal_utils.html</filename>
    <namespace>veins::SignalUtils::anonymous_namespace{SignalUtils.cc}</namespace>
    <member kind="typedef">
      <type>DeciderToPhyInterface::AirFrameVector</type>
      <name>AirFrameVector</name>
      <anchorfile>namespaceveins_1_1_signal_utils.html</anchorfile>
      <anchor>ac9c671582a40719ae28164dc42699535</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool VEINS_API</type>
      <name>isChannelPowerBelowThreshold</name>
      <anchorfile>namespaceveins_1_1_signal_utils.html</anchorfile>
      <anchor>a744df65831b369a6412cb305cf04f06f</anchor>
      <arglist>(simtime_t now, AirFrameVector &amp;interfererFrames, size_t freqIndex, double threshold, AirFrame *exclude=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>double VEINS_API</type>
      <name>getMinSINR</name>
      <anchorfile>namespaceveins_1_1_signal_utils.html</anchorfile>
      <anchor>a65bf87cf643cccf540dc5f0802a71427</anchor>
      <arglist>(simtime_t start, simtime_t end, AirFrame *signalFrame, AirFrameVector &amp;interfererFrames, double noise)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>veins::SignalUtils::anonymous_namespace{SignalUtils.cc}</name>
    <filename>namespaceveins_1_1_signal_utils_1_1anonymous__namespace_02_signal_utils_8cc_03.html</filename>
    <class kind="struct">veins::SignalUtils::anonymous_namespace{SignalUtils.cc}::greaterByReceptionEnd</class>
    <member kind="function">
      <type>Signal</type>
      <name>getMaxInterference</name>
      <anchorfile>namespaceveins_1_1_signal_utils_1_1anonymous__namespace_02_signal_utils_8cc_03.html</anchorfile>
      <anchor>adec53cec45469bce01bd893290800df5</anchor>
      <arglist>(simtime_t start, simtime_t end, AirFrame *const referenceFrame, AirFrameVector &amp;interfererFrames)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>powerLevelSumAtFrequencyIndex</name>
      <anchorfile>namespaceveins_1_1_signal_utils_1_1anonymous__namespace_02_signal_utils_8cc_03.html</anchorfile>
      <anchor>a861f01ba64a81a5ee7b98bb632eb41c7</anchor>
      <arglist>(const std::vector&lt; Signal *&gt; &amp;signals, size_t freqIndex)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>veins::TraCIConstants</name>
    <filename>namespaceveins_1_1_tra_c_i_constants.html</filename>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>TRACI_VERSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1d55c4f263164c10f249e8d4b4072a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>INVALID_DOUBLE_VALUE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa8f42ef2e0fc6886f1bb94ec8850272c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>INVALID_INT_VALUE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad4023f62c7a5af28ec417e2c139313aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ADD</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0083f50089ce124f7d80c7708baf64ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ADD_FULL</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a674ec8bab6f31412dc608fa960a92d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>APPEND_STAGE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae337dd7e356e6a1cca510e8e1d61b08a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>ARRIVALFLAG_LANE_CURRENT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a52695cc200a41dee2a3f944ca728f355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>ARRIVALFLAG_POS_MAX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0837d852df23ad78985d59a0a454b0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>ARRIVALFLAG_POS_RANDOM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab1c8ded9a8f7c80221403e79aa1474ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>ARRIVALFLAG_SPEED_CURRENT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ada0284294deda2096883dbe8b6c8539f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>AUTOMATIC_CONTEXT_SUBSCRIPTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab93fffe1eb1dfaef2c175243592fa396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>AUTOMATIC_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae7f2bab67972bfe7cb686869c8293ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_ADD_SUBSCRIPTION_FILTER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aca335b6911df428fcd8ee8e182c0c700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_CHANGELANE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1be53569ebedbc3fafd27e36872cbb9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_CHANGESUBLANE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aec61aa1517f0b39160b6fa0fd03ab7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_CHANGETARGET</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a558b0fcecbaf1d86edcd52cff3972a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_CLEAR_PENDING_VEHICLES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0c95812cb05335c95cbc850768b7002d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_CLOSE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>adf88aecb6eb6e35ddc79db5cd5470898</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GETVERSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7596522423a0e947a2be889af53de757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_EDGE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5107d68e22f637d26da0419cdade3b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_GUI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a52fbb48436814920190d54bab2b9cd12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>adee8c65e2359c7f9f11a514056cb1b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_JUNCTION_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acda977bbbb9a759a05fd7af267afd091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_LANEAREA_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad2533090405c38bd7658777ead68d717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_LANE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8da5ce287801d389863ed377aea39e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_MULTIENTRYEXIT_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4edc090924c966285dea2e55d687de21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_PERSON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8b5144f3769af818b859c812c6f37683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_POI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5589f5c6175eb106819d75e302f960ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_POLYGON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2952101fb6329fdab72453ac45cc0ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_ROUTE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0d73cbd9c4fe36f0c64a4ed823e8aedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_SIM_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5dc903c1a669de70b048894ea85bbf99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_TL_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a71c6e6bd583f7e4fe28254b8d3ca0a9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9e3a3538d44792f8cb6f11d3b5b89a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_GET_VEHICLE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a18f341b3e34e0eff06eb32af09b7e8e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_LOAD</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1395f83a5cdac54bbdab27f16b818946</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_OPENGAP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9b1fb421acd625f3db3a4b6e0a2a1c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_REROUTE_EFFORT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a75258ec759be8e69d9d2dcca83f131e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_REROUTE_TO_PARKING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab3180b43505cd8a32df0cfb8fabadd14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_REROUTE_TRAVELTIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aad9dc453d537e0d7f3fbcbed5657bd90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_RESUME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a08891b658012be406ebefd418dd958a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SAVE_SIMSTATE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a344045eb42037ff7be9679e0533c04e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SETORDER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6f8dda9284a2a98903753605c423ddf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_EDGE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7929e82b4e42fe4576f724578c2fcb6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_GUI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0386f14f7feea6ebfef8e534e710e1fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_JUNCTION_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7ca23b7769ffeec1527b7538fc2e04e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_LANE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a72a295dbc0bb414e1a1567cc14e06ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_PERSON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a50f2364c5c7b4fefc1418c1bb2c77f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_POI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a960655c907b2a2e2e3ea96815aaeb2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_POLYGON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a663072978ecabe8cdf4782ea78afb077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_ROUTE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9ba5ad9d1894ea35bc7c46a2e0380a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_SIM_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a798e56dc1480d2352aacf2fc892e19d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_TL_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a30d91d06932b34bfa4685ae33ec99654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a98c942d010509276311292bc53317db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SET_VEHICLE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7074f136e1e29bb0b978c5f4951ed58a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SIMSTEP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3728000b9eb37ca4e54f3a7a7ff73db8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SIMSTEP2</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5ecec69d4f87492fc49d69c276d5d94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SLOWDOWN</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a09818c5a2500c1d92b9c8aa89821b6b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_STOP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa163a8307e0036269fe5ed9ad48e2e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a33d7693e44ecd3492a93f1fe3398218a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5d9bd6c8cf6a6fa8fe4009ccc1610e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae704adfb171aeecf1b4d25813160e7f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a331bc419d2216d722a7fbb2f66f2574a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acaa9654a4f68cc7aef6a824a72936296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a644968b383f1bf798688829f3f2d0650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae2750e99e746852cf4620fcaae31bae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3629a36b5f9f5ad777aec98f43984833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_LANEAREA_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a914a386605c9626bc36a976cc2b3a1e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_LANEAREA_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3bd0d0b0cd56ebe1d835bca3fc5664ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a796e535e23c8f61d7626b63c290491f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab90938525080232809a234be5a6ee554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4b191bd0edfa59d3298a028f3192b282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1ad5c518743336903a79efadee2f36b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_PERSON_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6327632506c1c59dd0ab736ca593f96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_PERSON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab9858176315ed92259c9c00734130901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af5cd7fd90c37b7c2ca9840650a67a2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9253e63d1f1f9d69acc06553246892b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a419b677e9574c785764c7b30e03e50c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9e205add6fe30958b976cec05a5d778c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af46719b79ab762edc541127e98d6fa98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1854d0d2f11ec945104869b6258c1d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a804f6d86a463a077d58728f3bf204074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a790f23db5c82d5a6ab3a424db7a160e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9ccda4bd15c66915982a8434beb4b7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>afdaf3e863979f15562f998e2cef7e46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8840bd1d60730091f2947220bed48824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2bb8ab263cb2dfcc056f36b45b2fc4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2c8abb9d2b22c2f05c8053c3035c0772</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a80f88e3428839954864610f4826e3d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>COPY</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a00a6c22a920b628490a865a188134de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_CONTAINER_TRIGGERED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a119a2f0df4486cca51626012ddf47589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_LANE_ALLOWED_FREE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab9bfbf0eddc6220054b83e04e07f8f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_LANE_BEST_FREE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6bf3851b50fdd13675a5f25101f953be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_LANE_FIRST_ALLOWED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a122ae32d08848a3ca4bdceacf42633e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_LANE_FREE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5f94e440c340ba65adf2e90ebfd5d2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_LANE_RANDOM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab84a8f0f5bfcb79d7da7e74fea2032cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_NOW</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af4ad5013a78822a67d67187e07599daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_POS_BASE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5694f1a06d0f67ad614c701c9006dacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_POS_FREE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abd4ac65edda30e608334b340ec5b4d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_POS_LAST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a74970ac753946ba92404963aaa8f1e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_POS_RANDOM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a13ead9605ee6ce88b900ea404ce3376b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_POS_RANDOM_FREE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac9b9eab3eea208b9bd9f2f91b9dc6b84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_SPEED_MAX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac554d5eb7745d733c993617f91bcf7ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_SPEED_RANDOM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0722b915a5b8a448cf248f1bd33856eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int8_t</type>
      <name>DEPARTFLAG_TRIGGERED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a159ca02d35d85313204fa6b2d9fbe416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>DISTANCE_REQUEST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a610b036ca0873b9faf4ec7c8a4fa8c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_DOWNSTREAM_DIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7808c4a46dc8d8caba33e5b275f8e7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_LANES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a51d2cdcae20f4ed2a24dcc2657932280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_LEAD_FOLLOW</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3f12015372cfb668653e7caeda26a41d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_NONE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abf5b41362feebddc9bf192646551c9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_NOOPPOSITE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1548c71b697053f0fcbfb424998cd66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_TURN</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a48336af4dc508025d71d500d20501acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_UPSTREAM_DIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7d9413ecc7a35082690c8550b5fd9568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_VCLASS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8a6336387347b63bd677b3ce61c34e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FILTER_TYPE_VTYPE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abf7ba13d792b3994fde04a27868745a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FIND_INTERMODAL_ROUTE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa1c1d285e179f488737f33963f318625</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>FIND_ROUTE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4883055b79cca555d66553023cff85c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>GENERIC_ATTRIBUTE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad2a201bddd92c7f3ade24d9ed752fc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ID_COUNT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8e4d320b5b2265dfd6142048d4900084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ID_LIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a93bf7340c6eb435e04228db67fc23c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>JAM_LENGTH_METERS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a63b0681f966578bdbe85aa53c751a601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>JAM_LENGTH_VEHICLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aeab93f4940177563a2886fba3b3b2cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LANE_ALLOWED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ada307cbf59174739525dd7969f857268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LANE_DISALLOWED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab947d3518c46712cf7d0f71939365b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LANE_EDGE_ID</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aac92eddcc1779fb5012f0820fd5d2856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LANE_LINKS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab076987edeabdc96fdd34f09a8227ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LANE_LINK_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab26823007236012dd9c6dad157d47a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_LENGTH</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a24cb28b90f420af44c32abcc92aacb01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_MEAN_SPEED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a707de22f6c1e38a1cd06ec01c1f1b7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_OCCUPANCY</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae8b97800ca541774f5e967774f56d5c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_PERSON_ID_LIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8eab9937dac32f69897ef7d3adfcde10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_TIME_SINCE_DETECTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab8d10ae1877c471189f05db75a0b4c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_VEHICLE_DATA</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a67f044319ca850d9b69bbccc3403c5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_VEHICLE_HALTING_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac14ecda98143d2b8a452f08d0041d0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_VEHICLE_ID_LIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2760c3b3a9c262c1394c3e956c4df9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>LAST_STEP_VEHICLE_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4266722453e6396b135656417f33de58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>MAX_ORDER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a41cf3c7750091d7750ee7f62117d309f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>MOVE_TO_XY</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9651724aa4ba1a97d8f64dcd6da1c5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>OBJECT_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ade8011036de23a055014b79c9463a07d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>POSITION_2D</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2d5c064ba63549611152777b2771c52b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>POSITION_3D</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a17ba2941981a6ac2b884297c54d6dafb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>POSITION_CONVERSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acff95f7b5f58f59e747da995e6b88485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>POSITION_LON_LAT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3cd7aabb51036019cc10a3f83e607ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>POSITION_LON_LAT_ALT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a20c10ec846baabb94d846de5a04d8bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>POSITION_ROADMAP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa737dbb1f9131ababf25479b8f6fd258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a019693e64b8ce211a399053e3993cba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE_ARRIVED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a379b8496fe67ee4f15d1abb71e74fbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE_PARKING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2662e81f462269b9108114945d3b6133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE_STAGE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aec63fca6d4266af73a36eba24026008f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE_TELEPORT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad1222e32e537b774c802c4550de1d126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE_TELEPORT_ARRIVED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a67b08e09e754fbce503101993946d895</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REMOVE_VAPORIZED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a310193e5b6090ec034d11e12282d8dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REQUEST_AIRDIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9697eabf1d1a994a57d56803ac3a2a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>REQUEST_DRIVINGDIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a19de762b877db63e276773e05a9220cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_EDGE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a90ff01be6e141406f9c37bcc0e08b0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_GUI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a821be6d7e616e6c3e3ed3dfeb99f1ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aec8c5037ed871097679136ec60998d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_JUNCTION_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2831be810e183e5224a768869e4ba3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_LANEAREA_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae45edddb88ddbca1da58ec8d5a36b075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_LANE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9a17178a0e3d3dc1c76b5ab290b56fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_MULTIENTRYEXIT_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a50550e8f6a3b5a2701ea25b7f568d4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_PERSON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a80667e026af2702c64ec060eac478e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_POI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a382e2f163d3f35efe7d7d42afbb56378</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_POLYGON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aba23e2d83a996902170a42bf797b6b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_ROUTE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab9f1b9cc8f749c625b33567cc5ba6102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_SIM_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a27c4faf04094c4c6386a9e4337a52c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_TL_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a98466d31f30fca815797de2511185995</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acd9012372c1a3adc5df73a2655aac739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_GET_VEHICLE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6f1b22af322ec3f3f33d1269f0216797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae81895f251604d3b33f786ffac915168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1043b062926dc40f05282f9ba8f00467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a158504069ad522d95fa296c7e5bae11b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4cc0b1fd3d8587296e7f02e2e3868d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1fc57900510454df701c43448b3ea885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a606173b020d7aa1cacae9dd4ef052c64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a040b2125fd0ef100d5077c09af9fd7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1f48cd0468bbc90ff908d396fa710974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_LANEAREA_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3a5f1a7f8ed5fc28b0cd37b5355ba30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_LANEAREA_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a83f0545cfb30e2c40c2a486c98df9afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aaa5a955a838af23556351c2097dc2714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a698b1ec0ae678f391ea23fb8e9f7dd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3bf6f38c69c1aa2a92698e2c02592b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1873bbeafe5fa4af4dcf99e5c40ae401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_PERSON_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9f8f61cf1e65e2179fb1245891c63a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_PERSON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8acb0d47aab08702faeb2f06e22d4cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae9500aaf1778e1cb61c18079c76860d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8a41bda573adb076f158f7f9160b1a08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a20449044aa6ee4c903466f6f6a1bf1b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acad3e3447036d7546db4dbb7b03069b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abd9c72c080359ea695111af23de30d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a61529b7708c97c2cae0d8f8580e10dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a370b80805a2bbf0b8fb6f46d69f7df0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ace12f14337b099615656d8c0a8c4784a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3c1172327c129f366ff71ef9a4479770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a26c1662065b142b6468867977430d2ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a90a72e07ce0ae2ea5a4d17811e3bf267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1b910fa51146dad62cc611bf474c0a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>adc1839b293afd1baf4f0349b204d1963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae6b0869ef6bd5b15d6b16a39eeb3695a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ROUTING_MODE_AGGREGATED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a86699a113ca204a55c9ee762861ff0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ROUTING_MODE_COMBINED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab5d47b331dace2d49203a58fb09eb86d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ROUTING_MODE_DEFAULT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8ca9887f42f41d22e59e121fa78997f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ROUTING_MODE_EFFORT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a21ce1fe3a83c1036673166ef22a0e1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RTYPE_ERR</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6493e7aa545028af9e77993bdddef856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RTYPE_NOTIMPLEMENTED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a770b295d2b3ae7044db37e88f3771c60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>RTYPE_OK</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a038efb141c2da3e2f754992e25ab722a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STAGE_DRIVING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad725e31aced3ccc036a1a2d629d138c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STAGE_WAITING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aefcf629f3513ceb91f93e3cc3ea4b60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STAGE_WAITING_FOR_DEPART</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad50115008afb606daac96e9e9ea3790a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STAGE_WALKING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2f27bcc7bb568357f935a92bb1002492</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_BUS_STOP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae1fd5192f19808b63cd6c99b6a08d44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_CHARGING_STATION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a676ff638d037c5f5c69750099054db5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_CONTAINER_STOP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a87d96fbe529629198618017cf60c4b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_CONTAINER_TRIGGERED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2171da8ad1a591d3e2532876b205bf3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_DEFAULT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0b677d3896f9fdf3b86d00f0e2ba6c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_PARKING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a791949e85775f53a4d88f75dfc9ceaf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_PARKING_AREA</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1a689de929cd0a36ee710952629c7d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>STOP_TRIGGERED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa85ebd21e1b6b48b9bc7a762734c7243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>SURROUNDING_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1ccc2277d47e75c305f6d3fb8e818fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_COMPLETE_DEFINITION_RYG</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3321f59e5cff51ab2bb174e9822b675d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_COMPLETE_PROGRAM_RYG</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6f697a47568983c53fbf64ed3092c0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_CONTROLLED_JUNCTIONS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa0f8e2872f6581443e3c042046330928</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_CONTROLLED_LANES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abd394b27e478f87234fa86bc8d40b56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_CONTROLLED_LINKS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0101b821ee3e019f5fa834afe04163c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_CURRENT_PHASE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa9ef6478d0f94375f03f93d82158058e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_CURRENT_PROGRAM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac802f9da5bcd5c8643400791d9781beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_EXTERNAL_STATE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acd9e828a15047ccff30549b863186457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_NEXT_SWITCH</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa0bf49b6dc99ce8ceb66527eb9d32548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_PHASE_DURATION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a071d609be8b1c0285cd1f649213a8a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_PHASE_INDEX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa04bba616d8ab691d2d52c227f379414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_PROGRAM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3d3abee5103b7c7889eb101a252fddf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TL_RED_YELLOW_GREEN_STATE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4fe67e85f80a87b4baea3b54d54d759c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_BOUNDINGBOX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4e7cdc43f9bd91c73cd660f142c04287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_BYTE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a13db309262d2ed1cf84776d030b8cde3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_COLOR</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae535933987db6cee00babba6a158f07f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_COMPOUND</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a65f08c87a1e1b3d5a258bc982829c1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_DOUBLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af6bb70c9236f90e2704fced4b84bd212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_INTEGER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab27785bbcbbc587d55536b8ff94fd3a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_POLYGON</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a4989fce70194adc47c73117209bc74fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_STRING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7cc44f6f7f42e1d8eb0342be5f7ab7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_STRINGLIST</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a50f00f928dce85b05c6f5a79c4977dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>TYPE_UBYTE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a065078887c8297cd8aa0c50cdb12cb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ACCEL</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a14af26c9527a3517b2e898f04376c5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ACCELERATION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a847513b367168404b092232087851304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ACCUMULATED_WAITING_TIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9efd0c7bd14f21a396d3e68a5b1a6680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ACTIONSTEPLENGTH</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a35dceda9e6a939b0ecaaacf2061bbb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ALLOWED_SPEED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a28790aa32dd0605bc3230ec64a63fe1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ANGLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aad9636c908d03af0152ad27c964beb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_APPARENT_DECEL</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa3f23bd3d8ec6d776ecd7fef6b4fd002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ARRIVED_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa50b01e9caa6c6452c6a2209ee463ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ARRIVED_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>adfbadff16d0d74e2eb7932bcfd0e30fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_BEST_LANES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3bafded76a07433b44c7d219b6e02ad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_BUS_STOP_WAITING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>afed81896c10b84d11b3cefda29a3b3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_CO2EMISSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a27ce9026057761db0d07a38e650c2ad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_COEMISSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a462493718d46a957293f693d84fb3e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_COLLIDING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab28f457187d4577a7be9bcc843b7fd7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_COLLIDING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af6ee18f8b413c27be94bb7a499f22ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_COLOR</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7e3bb54846e45259ee916a00d7aaeffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_CURRENT_TRAVELTIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a62c8bfded9d860ad46ee1837d73937d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_DECEL</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa5348a3db9d8d0c99d920121d5053a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_DELTA_T</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8da0e1a27a1c4a7844f4c9b079a9aa2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_DEPARTED_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a6b0a4db6b50693d5c8b4962087ee3e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_DEPARTED_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>afce78e18e358428e29bf96d9a145528f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_DISTANCE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aebd787405b92d9642e576501fed97026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EDGES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9cca519d4872c8b189e3d0daa8e2e127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EDGE_EFFORT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a87b7208b1ba6b5c44936a6596395051d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EDGE_TRAVELTIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3b8d253292ef6a6f4b48514327224eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ELECTRICITYCONSUMPTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af2d88ef9e666253588196732a62f3282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EMERGENCYSTOPPING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a78a1b47b9194dd5060b67ddfd1416820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EMERGENCYSTOPPING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acbeb5dc1771cf09abd4484def77c10c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EMERGENCY_DECEL</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a222eb58a55bed9e6a0bb697ec6b6024c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_EMISSIONCLASS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acac94610c5a63b72d800306c8024e424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_FILL</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a82a7cd42c39dcc2d994f26c8b0062f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_FOES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab7bc9761f1b62503a67c864a014f8ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_FUELCONSUMPTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a475ec173b46567be6ca6b12b5e430734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_HAS_VIEW</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3498d1e534890c88d89effeab4127e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_HCEMISSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>accd898496ee6ce2e495dc3dc80fda49c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_HEIGHT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acd05564943f293ef468c40afdba2f313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_IMPERFECTION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abdf1064c4d1ac1063f0a1421cc4f2a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LANECHANGE_MODE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7547be5cd4daa41d82e34de561fc6396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LANEPOSITION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a20a4dd17ebbb7f5ef126b666e8372205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LANEPOSITION_LAT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3bbc41df278fd9c71c04195435c37d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LANE_ID</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a15c8991f6968052da0e9ae6fed821de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LANE_INDEX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af9a35fa7b5ff11084f441c8de4129bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LASTACTIONTIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a872eb8c91301cb8571e6a6b320149d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LATALIGNMENT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab2ee141f663521a781c4488b1a82ab36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LEADER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a110cc26ba2d2fcf2d25e9dbfb8439b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LENGTH</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1d322c7af87e627eca9baedfe1cc1dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LINE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af317ba591a7d0305f32ae33f25286a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LOADED_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae27613fafe7fdc5f36f7d596cb0c4edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_LOADED_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab1e4729f0b0cdd003464bb1629267797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MAXSPEED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a440e8279115dcd60b49ac7ea95f30c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MAXSPEED_LAT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abaa60320e825cf03f11a5b3c0d171ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MINGAP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a39c3028967cdaeade8fafbe3a51d6c60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MINGAP_LAT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aeb020c8463c09c1a458336b5be9c9c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MIN_EXPECTED_VEHICLES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a901b45f37181e6b3812a9fbbdf09e05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MOVE_TO</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a839e10df90e9f73f8795ca043b6bad74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_MOVE_TO_VTD</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a292cadea6d57e08590cf3b9fe22a99b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NAME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa84d2a1da5dca35911bcab5a66a98e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NET_BOUNDING_BOX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a55dc257c6806ba610e41e04bd3303acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NEXT_EDGE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2e6d78f26c47b3fa2a7bf73443db60ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NEXT_STOPS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a23fe5db07be564af12d9b7481b91a53f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NEXT_TLS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0def6d772135706328ac766a4d85d77d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NOISEEMISSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a97342a4c9309ffe643e46538e822d858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_NOXEMISSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a319db49d910b2cb08c3a2b148b8ff10e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PARAMETER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ab9b052fd2332ab24205b9bf90ab2e310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PARKING_ENDING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad9b3ef66755d7dee0a5570887aa0246d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PARKING_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a18cad94823e4de48637695b7ecbfff2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PARKING_STARTING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aebfae27abd1e47ea71be0b85559fe893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PARKING_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3861b6fb08c0d6b8742eaa78c478a43a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PERSON_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad0826e67fdbb7b00fe127a013ee9cdd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_PMXEMISSION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac299dce16143b8f7a02e172c35b98530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_POSITION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a9a41b6ec5aa12230aa9a96bade91c592</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_POSITION3D</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a7d7e9fb572cb051bd38f6ad8c3d7c81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ROAD_ID</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a24e84b504823e65153a5b4d5297f34ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ROUTE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5d7aad14697188502d64754123d637bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ROUTE_ID</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>afde08e40f69012821553ff04b6208e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ROUTE_INDEX</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5aabfe828ae1a41bed2e9ce024bbdf46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ROUTE_VALID</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0d5537981640aebbf0c1eb69fb0d6e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_ROUTING_MODE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a85747bdc413ba5886e7ca83f376e88a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SCREENSHOT</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac0d03089dd4be8fdbf06a56077cdee39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SHAPE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a76915d5a908a87087e922162fccc72ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SHAPECLASS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ad8ace34134f05e0c6638271787aa2736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SIGNALS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a283e1b19190bd0048f083d2df09248d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SLOPE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a85cfb7717d4faf0a9e90eaa32295b103</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SPEED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0b2aa56b7bce08b70c65cf04e327f728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SPEEDSETMODE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>afdc126524c3affeb3dc56b464bd76a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SPEED_DEVIATION</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a1075ed244f379cac020ca7950142e905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SPEED_FACTOR</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a3f5f9f85dcbeaac7d1217ecae5a72def</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_SPEED_WITHOUT_TRACI</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5fec2b2929721883af44683a8b2eba80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STAGE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae44c54af3f075403c9a4d026ecb6dcfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STAGES_REMAINING</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acf61da513559d4a8f832dfdd48acc350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STOPSTATE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af752c094a9442487ff68ab6a61a608af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STOP_ENDING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ace6b339b107e979abbe9ca8b4649c544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STOP_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a436a8974cfcdac9e160710902dbff1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STOP_STARTING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a83c8a13dbb9eafac2da5f10fc515082e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_STOP_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af38ea32891df56fde32c2e478140e084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TAU</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aafa9259f725b2040541a38f79dad27ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>acf35220cba7048c8dacd9d998a115ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a22245b01beef79cae76caef86691de58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_IDS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>abb54efc20062f7728651f4b1bb27e2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>adf52e6289cd322e7d79ad679d4934581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a34fde6e225cd3cbcca0022675b050936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TIME_STEP</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>aa734fae66b78d65811e2a53add713c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TRACK_VEHICLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a8bcdfe3878de6de2aa0d38062a37e4e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_TYPE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af0566d66ce7f3a351184646e7d181641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_UPDATE_BESTLANES</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a15a16c5925039c0f3f94014faa25ec5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VEHICLE</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ae77a0bb0249072e08b0a5c8977a97cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VEHICLECLASS</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>adc903729c495194afd818e2084888908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VIA</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a2922d6e9feec3909637a47303cf573af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VIEW_BOUNDARY</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a12247c48d0cccb94c22e4feb92d7e8b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VIEW_OFFSET</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af15c0a8cd433f0ae86cb54b5d2f81b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VIEW_SCHEMA</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a5943ec55c3b4ef4fcd9d8f9963a71619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_VIEW_ZOOM</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af5c533ce0ca7c848eadc10983ce5c046</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_WAITING_TIME</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>af9530f927275857b1ba3c2b9438bd932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_WAITING_TIME_ACCUMULATED</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>ac5c4ff2d0edaa689122a55d9d87dfb03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>VAR_WIDTH</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a0fc63ced70ab65c1b448f1d2d4b7a063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>CMD_FILE_SEND</name>
      <anchorfile>namespaceveins_1_1_tra_c_i_constants.html</anchorfile>
      <anchor>a23bcd5db8842b59a6337a611ce7436b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>manual</name>
    <title>Veins User Manual</title>
    <filename>manual</filename>
  </compound>
  <compound kind="page">
    <name>simsignal_management</name>
    <title>Simulation Signal Management</title>
    <filename>simsignal_management</filename>
  </compound>
  <compound kind="page">
    <name>timer_manager</name>
    <title>TimerManager -- Callback-Based Event Handling</title>
    <filename>timer_manager</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>%Veins - The open source vehicular network simulation framework.</title>
    <filename>index</filename>
  </compound>
</tagfile>
